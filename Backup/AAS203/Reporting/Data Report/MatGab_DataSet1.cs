//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------


 // ERROR: Not supported in C#: OptionDeclaration
using System;
using System.Data;
using System.Runtime.Serialization;
using System.Xml;


[Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Diagnostics.DebuggerStepThrough(), System.ComponentModel.ToolboxItem(true)]
public class DataSet1 : DataSet
{

	private StdSampInfoDataTable tableStdSampInfo;

	public DataSet1()
	{
		base.New();
		this.InitClass();
		System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = this.SchemaChanged;
		this.Tables.CollectionChanged += schemaChangedHandler;
		this.Relations.CollectionChanged += schemaChangedHandler;
	}

	protected DataSet1(SerializationInfo info, StreamingContext context)
	{
		base.New();
		string strSchema = (string)info.GetValue("XmlSchema", typeof(System.String));
		if ((!(strSchema) == null)) {
			DataSet ds = new DataSet();
			ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
			if ((!(ds.Tables("StdSampInfo")) == null)) {
				this.Tables.Add(new StdSampInfoDataTable(ds.Tables("StdSampInfo")));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		} else {
			this.InitClass();
		}
		this.GetSerializationData(info, context);
		System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = this.SchemaChanged;
		this.Tables.CollectionChanged += schemaChangedHandler;
		this.Relations.CollectionChanged += schemaChangedHandler;
	}

	[System.ComponentModel.Browsable(false), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
	public StdSampInfoDataTable StdSampInfo {
		get { return this.tableStdSampInfo; }
	}

	public override DataSet Clone()
	{
		DataSet1 cln = (DataSet1)base.Clone;
		cln.InitVars();
		return cln;
	}

	protected override bool ShouldSerializeTables()
	{
		return false;
	}

	protected override bool ShouldSerializeRelations()
	{
		return false;
	}

	protected override void ReadXmlSerializable(XmlReader reader)
	{
		this.Reset();
		DataSet ds = new DataSet();
		ds.ReadXml(reader);
		if ((!(ds.Tables("StdSampInfo")) == null)) {
			this.Tables.Add(new StdSampInfoDataTable(ds.Tables("StdSampInfo")));
		}
		this.DataSetName = ds.DataSetName;
		this.Prefix = ds.Prefix;
		this.Namespace = ds.Namespace;
		this.Locale = ds.Locale;
		this.CaseSensitive = ds.CaseSensitive;
		this.EnforceConstraints = ds.EnforceConstraints;
		this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
		this.InitVars();
	}

	protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
	{
		System.IO.MemoryStream stream = new System.IO.MemoryStream();
		this.WriteXmlSchema(new XmlTextWriter(stream, null));
		stream.Position = 0;
		return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
	}

	internal void InitVars()
	{
		this.tableStdSampInfo = (StdSampInfoDataTable)this.Tables("StdSampInfo");
		if ((!(this.tableStdSampInfo) == null)) {
			this.tableStdSampInfo.InitVars();
		}
	}

	private void InitClass()
	{
		this.DataSetName = "DataSet1";
		this.Prefix = "";
		this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
		this.Locale = new System.Globalization.CultureInfo("en-US");
		this.CaseSensitive = false;
		this.EnforceConstraints = true;
		this.tableStdSampInfo = new StdSampInfoDataTable();
		this.Tables.Add(this.tableStdSampInfo);
	}

	private bool ShouldSerializeStdSampInfo()
	{
		return false;
	}

	private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
	{
		if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
			this.InitVars();
		}
	}

	public delegate void StdSampInfoRowChangeEventHandler(object sender, StdSampInfoRowChangeEvent e);

	[System.Diagnostics.DebuggerStepThrough()]
	public class StdSampInfoDataTable : DataTable, System.Collections.IEnumerable
	{

		private DataColumn columnStdSamp;

		private DataColumn columnWeight;

		private DataColumn columnVolume;

		private DataColumn columnDilution;

		private DataColumn columnAbso;

		private DataColumn columnConc;

		private DataColumn columnConcUnit;

		internal StdSampInfoDataTable()
		{
			base.New("StdSampInfo");
			this.InitClass();
		}

		internal StdSampInfoDataTable(DataTable table)
		{
			base.New(table.TableName);
			if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
				this.CaseSensitive = table.CaseSensitive;
			}
			if ((table.Locale.ToString != table.DataSet.Locale.ToString)) {
				this.Locale = table.Locale;
			}
			if ((table.Namespace != table.DataSet.Namespace)) {
				this.Namespace = table.Namespace;
			}
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
		}

		[System.ComponentModel.Browsable(false)]
		public int Count {
			get { return this.Rows.Count; }
		}

		internal DataColumn StdSampColumn {
			get { return this.columnStdSamp; }
		}

		internal DataColumn WeightColumn {
			get { return this.columnWeight; }
		}

		internal DataColumn VolumeColumn {
			get { return this.columnVolume; }
		}

		internal DataColumn DilutionColumn {
			get { return this.columnDilution; }
		}

		internal DataColumn AbsoColumn {
			get { return this.columnAbso; }
		}

		internal DataColumn ConcColumn {
			get { return this.columnConc; }
		}

		internal DataColumn ConcUnitColumn {
			get { return this.columnConcUnit; }
		}

		public StdSampInfoRow this[int index] {
			get { return (StdSampInfoRow)this.Rows(index); }
		}

		public event StdSampInfoRowChangeEventHandler StdSampInfoRowChanged;

		public event StdSampInfoRowChangeEventHandler StdSampInfoRowChanging;

		public event StdSampInfoRowChangeEventHandler StdSampInfoRowDeleted;

		public event StdSampInfoRowChangeEventHandler StdSampInfoRowDeleting;

		public void AddStdSampInfoRow(StdSampInfoRow row)
		{
			this.Rows.Add(row);
		}

		public StdSampInfoRow AddStdSampInfoRow(string StdSamp, double Weight, double Volume, double Dilution, double Abso, double Conc, double ConcUnit)
		{
			StdSampInfoRow rowStdSampInfoRow = (StdSampInfoRow)this.NewRow;
			rowStdSampInfoRow.ItemArray = new object[] {
				StdSamp,
				Weight,
				Volume,
				Dilution,
				Abso,
				Conc,
				ConcUnit
			};
			this.Rows.Add(rowStdSampInfoRow);
			return rowStdSampInfoRow;
		}

		public StdSampInfoRow FindByStdSamp(string StdSamp)
		{
			return (StdSampInfoRow)this.Rows.Find(new object[] { StdSamp });
		}

		public System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Rows.GetEnumerator;
		}

		public override DataTable Clone()
		{
			StdSampInfoDataTable cln = (StdSampInfoDataTable)base.Clone;
			cln.InitVars();
			return cln;
		}

		protected override DataTable CreateInstance()
		{
			return new StdSampInfoDataTable();
		}

		internal void InitVars()
		{
			this.columnStdSamp = this.Columns("StdSamp");
			this.columnWeight = this.Columns("Weight");
			this.columnVolume = this.Columns("Volume");
			this.columnDilution = this.Columns("Dilution");
			this.columnAbso = this.Columns("Abso");
			this.columnConc = this.Columns("Conc");
			this.columnConcUnit = this.Columns("ConcUnit");
		}

		private void InitClass()
		{
			this.columnStdSamp = new DataColumn("StdSamp", typeof(System.String), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnStdSamp);
			this.columnWeight = new DataColumn("Weight", typeof(System.Double), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnWeight);
			this.columnVolume = new DataColumn("Volume", typeof(System.Double), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnVolume);
			this.columnDilution = new DataColumn("Dilution", typeof(System.Double), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnDilution);
			this.columnAbso = new DataColumn("Abso", typeof(System.Double), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnAbso);
			this.columnConc = new DataColumn("Conc", typeof(System.Double), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnConc);
			this.columnConcUnit = new DataColumn("ConcUnit", typeof(System.Double), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnConcUnit);
			this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnStdSamp }, true));
			this.columnStdSamp.AllowDBNull = false;
			this.columnStdSamp.Unique = true;
		}

		public StdSampInfoRow NewStdSampInfoRow()
		{
			return (StdSampInfoRow)this.NewRow;
		}

		protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
		{
			return new StdSampInfoRow(builder);
		}

		protected override System.Type GetRowType()
		{
			return typeof(StdSampInfoRow);
		}

		protected override void OnRowChanged(DataRowChangeEventArgs e)
		{
			base.OnRowChanged(e);
			if ((!(this.StdSampInfoRowChangedEvent) == null)) {
				if (StdSampInfoRowChanged != null) {
					StdSampInfoRowChanged(this, new StdSampInfoRowChangeEvent((StdSampInfoRow)e.Row, e.Action));
				}
			}
		}

		protected override void OnRowChanging(DataRowChangeEventArgs e)
		{
			base.OnRowChanging(e);
			if ((!(this.StdSampInfoRowChangingEvent) == null)) {
				if (StdSampInfoRowChanging != null) {
					StdSampInfoRowChanging(this, new StdSampInfoRowChangeEvent((StdSampInfoRow)e.Row, e.Action));
				}
			}
		}

		protected override void OnRowDeleted(DataRowChangeEventArgs e)
		{
			base.OnRowDeleted(e);
			if ((!(this.StdSampInfoRowDeletedEvent) == null)) {
				if (StdSampInfoRowDeleted != null) {
					StdSampInfoRowDeleted(this, new StdSampInfoRowChangeEvent((StdSampInfoRow)e.Row, e.Action));
				}
			}
		}

		protected override void OnRowDeleting(DataRowChangeEventArgs e)
		{
			base.OnRowDeleting(e);
			if ((!(this.StdSampInfoRowDeletingEvent) == null)) {
				if (StdSampInfoRowDeleting != null) {
					StdSampInfoRowDeleting(this, new StdSampInfoRowChangeEvent((StdSampInfoRow)e.Row, e.Action));
				}
			}
		}

		public void RemoveStdSampInfoRow(StdSampInfoRow row)
		{
			this.Rows.Remove(row);
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class StdSampInfoRow : DataRow
	{

		private StdSampInfoDataTable tableStdSampInfo;

		internal StdSampInfoRow(DataRowBuilder rb)
		{
			base.New(rb);
			this.tableStdSampInfo = (StdSampInfoDataTable)this.Table;
		}

		public string StdSamp {
			get { return (string)this(this.tableStdSampInfo.StdSampColumn); }
			set { this(this.tableStdSampInfo.StdSampColumn) = value; }
		}

		public double Weight {
			get {
				try {
					return (double)this(this.tableStdSampInfo.WeightColumn);
				} catch (InvalidCastException e) {
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			}
			set { this(this.tableStdSampInfo.WeightColumn) = value; }
		}

		public double Volume {
			get {
				try {
					return (double)this(this.tableStdSampInfo.VolumeColumn);
				} catch (InvalidCastException e) {
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			}
			set { this(this.tableStdSampInfo.VolumeColumn) = value; }
		}

		public double Dilution {
			get {
				try {
					return (double)this(this.tableStdSampInfo.DilutionColumn);
				} catch (InvalidCastException e) {
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			}
			set { this(this.tableStdSampInfo.DilutionColumn) = value; }
		}

		public double Abso {
			get {
				try {
					return (double)this(this.tableStdSampInfo.AbsoColumn);
				} catch (InvalidCastException e) {
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			}
			set { this(this.tableStdSampInfo.AbsoColumn) = value; }
		}

		public double Conc {
			get {
				try {
					return (double)this(this.tableStdSampInfo.ConcColumn);
				} catch (InvalidCastException e) {
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			}
			set { this(this.tableStdSampInfo.ConcColumn) = value; }
		}

		public double ConcUnit {
			get {
				try {
					return (double)this(this.tableStdSampInfo.ConcUnitColumn);
				} catch (InvalidCastException e) {
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			}
			set { this(this.tableStdSampInfo.ConcUnitColumn) = value; }
		}

		public bool IsWeightNull()
		{
			return this.IsNull(this.tableStdSampInfo.WeightColumn);
		}

		public void SetWeightNull()
		{
			this(this.tableStdSampInfo.WeightColumn) = System.Convert.DBNull;
		}

		public bool IsVolumeNull()
		{
			return this.IsNull(this.tableStdSampInfo.VolumeColumn);
		}

		public void SetVolumeNull()
		{
			this(this.tableStdSampInfo.VolumeColumn) = System.Convert.DBNull;
		}

		public bool IsDilutionNull()
		{
			return this.IsNull(this.tableStdSampInfo.DilutionColumn);
		}

		public void SetDilutionNull()
		{
			this(this.tableStdSampInfo.DilutionColumn) = System.Convert.DBNull;
		}

		public bool IsAbsoNull()
		{
			return this.IsNull(this.tableStdSampInfo.AbsoColumn);
		}

		public void SetAbsoNull()
		{
			this(this.tableStdSampInfo.AbsoColumn) = System.Convert.DBNull;
		}

		public bool IsConcNull()
		{
			return this.IsNull(this.tableStdSampInfo.ConcColumn);
		}

		public void SetConcNull()
		{
			this(this.tableStdSampInfo.ConcColumn) = System.Convert.DBNull;
		}

		public bool IsConcUnitNull()
		{
			return this.IsNull(this.tableStdSampInfo.ConcUnitColumn);
		}

		public void SetConcUnitNull()
		{
			this(this.tableStdSampInfo.ConcUnitColumn) = System.Convert.DBNull;
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class StdSampInfoRowChangeEvent : EventArgs
	{

		private StdSampInfoRow eventRow;

		private DataRowAction eventAction;

		public StdSampInfoRowChangeEvent(StdSampInfoRow row, DataRowAction action)
		{
			base.New();
			this.eventRow = row;
			this.eventAction = action;
		}

		public StdSampInfoRow Row {
			get { return this.eventRow; }
		}

		public DataRowAction Action {
			get { return this.eventAction; }
		}
	}
}
