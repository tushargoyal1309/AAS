'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableStdSampInfo As StdSampInfoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("StdSampInfo")) Is Nothing) Then
                Me.Tables.Add(New StdSampInfoDataTable(ds.Tables("StdSampInfo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StdSampInfo As StdSampInfoDataTable
        Get
            Return Me.tableStdSampInfo
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("StdSampInfo")) Is Nothing) Then
            Me.Tables.Add(New StdSampInfoDataTable(ds.Tables("StdSampInfo")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableStdSampInfo = CType(Me.Tables("StdSampInfo"),StdSampInfoDataTable)
        If (Not (Me.tableStdSampInfo) Is Nothing) Then
            Me.tableStdSampInfo.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableStdSampInfo = New StdSampInfoDataTable
        Me.Tables.Add(Me.tableStdSampInfo)
    End Sub
    
    Private Function ShouldSerializeStdSampInfo() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub StdSampInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As StdSampInfoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StdSampInfoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnStdSamp As DataColumn
        
        Private columnWeight As DataColumn
        
        Private columnVolume As DataColumn
        
        Private columnDilution As DataColumn
        
        Private columnAbso As DataColumn
        
        Private columnConc As DataColumn
        
        Private columnConcUnit As DataColumn
        
        Friend Sub New()
            MyBase.New("StdSampInfo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property StdSampColumn As DataColumn
            Get
                Return Me.columnStdSamp
            End Get
        End Property
        
        Friend ReadOnly Property WeightColumn As DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        Friend ReadOnly Property VolumeColumn As DataColumn
            Get
                Return Me.columnVolume
            End Get
        End Property
        
        Friend ReadOnly Property DilutionColumn As DataColumn
            Get
                Return Me.columnDilution
            End Get
        End Property
        
        Friend ReadOnly Property AbsoColumn As DataColumn
            Get
                Return Me.columnAbso
            End Get
        End Property
        
        Friend ReadOnly Property ConcColumn As DataColumn
            Get
                Return Me.columnConc
            End Get
        End Property
        
        Friend ReadOnly Property ConcUnitColumn As DataColumn
            Get
                Return Me.columnConcUnit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StdSampInfoRow
            Get
                Return CType(Me.Rows(index),StdSampInfoRow)
            End Get
        End Property
        
        Public Event StdSampInfoRowChanged As StdSampInfoRowChangeEventHandler
        
        Public Event StdSampInfoRowChanging As StdSampInfoRowChangeEventHandler
        
        Public Event StdSampInfoRowDeleted As StdSampInfoRowChangeEventHandler
        
        Public Event StdSampInfoRowDeleting As StdSampInfoRowChangeEventHandler
        
        Public Overloads Sub AddStdSampInfoRow(ByVal row As StdSampInfoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStdSampInfoRow(ByVal StdSamp As String, ByVal Weight As Double, ByVal Volume As Double, ByVal Dilution As Double, ByVal Abso As Double, ByVal Conc As Double, ByVal ConcUnit As Double) As StdSampInfoRow
            Dim rowStdSampInfoRow As StdSampInfoRow = CType(Me.NewRow,StdSampInfoRow)
            rowStdSampInfoRow.ItemArray = New Object() {StdSamp, Weight, Volume, Dilution, Abso, Conc, ConcUnit}
            Me.Rows.Add(rowStdSampInfoRow)
            Return rowStdSampInfoRow
        End Function
        
        Public Function FindByStdSamp(ByVal StdSamp As String) As StdSampInfoRow
            Return CType(Me.Rows.Find(New Object() {StdSamp}),StdSampInfoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StdSampInfoDataTable = CType(MyBase.Clone,StdSampInfoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StdSampInfoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnStdSamp = Me.Columns("StdSamp")
            Me.columnWeight = Me.Columns("Weight")
            Me.columnVolume = Me.Columns("Volume")
            Me.columnDilution = Me.Columns("Dilution")
            Me.columnAbso = Me.Columns("Abso")
            Me.columnConc = Me.Columns("Conc")
            Me.columnConcUnit = Me.Columns("ConcUnit")
        End Sub
        
        Private Sub InitClass()
            Me.columnStdSamp = New DataColumn("StdSamp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStdSamp)
            Me.columnWeight = New DataColumn("Weight", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeight)
            Me.columnVolume = New DataColumn("Volume", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVolume)
            Me.columnDilution = New DataColumn("Dilution", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDilution)
            Me.columnAbso = New DataColumn("Abso", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbso)
            Me.columnConc = New DataColumn("Conc", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConc)
            Me.columnConcUnit = New DataColumn("ConcUnit", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConcUnit)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnStdSamp}, true))
            Me.columnStdSamp.AllowDBNull = false
            Me.columnStdSamp.Unique = true
        End Sub
        
        Public Function NewStdSampInfoRow() As StdSampInfoRow
            Return CType(Me.NewRow,StdSampInfoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StdSampInfoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StdSampInfoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StdSampInfoRowChangedEvent) Is Nothing) Then
                RaiseEvent StdSampInfoRowChanged(Me, New StdSampInfoRowChangeEvent(CType(e.Row,StdSampInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StdSampInfoRowChangingEvent) Is Nothing) Then
                RaiseEvent StdSampInfoRowChanging(Me, New StdSampInfoRowChangeEvent(CType(e.Row,StdSampInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StdSampInfoRowDeletedEvent) Is Nothing) Then
                RaiseEvent StdSampInfoRowDeleted(Me, New StdSampInfoRowChangeEvent(CType(e.Row,StdSampInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StdSampInfoRowDeletingEvent) Is Nothing) Then
                RaiseEvent StdSampInfoRowDeleting(Me, New StdSampInfoRowChangeEvent(CType(e.Row,StdSampInfoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStdSampInfoRow(ByVal row As StdSampInfoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StdSampInfoRow
        Inherits DataRow
        
        Private tableStdSampInfo As StdSampInfoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStdSampInfo = CType(Me.Table,StdSampInfoDataTable)
        End Sub
        
        Public Property StdSamp As String
            Get
                Return CType(Me(Me.tableStdSampInfo.StdSampColumn),String)
            End Get
            Set
                Me(Me.tableStdSampInfo.StdSampColumn) = value
            End Set
        End Property
        
        Public Property Weight As Double
            Get
                Try 
                    Return CType(Me(Me.tableStdSampInfo.WeightColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStdSampInfo.WeightColumn) = value
            End Set
        End Property
        
        Public Property Volume As Double
            Get
                Try 
                    Return CType(Me(Me.tableStdSampInfo.VolumeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStdSampInfo.VolumeColumn) = value
            End Set
        End Property
        
        Public Property Dilution As Double
            Get
                Try 
                    Return CType(Me(Me.tableStdSampInfo.DilutionColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStdSampInfo.DilutionColumn) = value
            End Set
        End Property
        
        Public Property Abso As Double
            Get
                Try 
                    Return CType(Me(Me.tableStdSampInfo.AbsoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStdSampInfo.AbsoColumn) = value
            End Set
        End Property
        
        Public Property Conc As Double
            Get
                Try 
                    Return CType(Me(Me.tableStdSampInfo.ConcColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStdSampInfo.ConcColumn) = value
            End Set
        End Property
        
        Public Property ConcUnit As Double
            Get
                Try 
                    Return CType(Me(Me.tableStdSampInfo.ConcUnitColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStdSampInfo.ConcUnitColumn) = value
            End Set
        End Property
        
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableStdSampInfo.WeightColumn)
        End Function
        
        Public Sub SetWeightNull()
            Me(Me.tableStdSampInfo.WeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVolumeNull() As Boolean
            Return Me.IsNull(Me.tableStdSampInfo.VolumeColumn)
        End Function
        
        Public Sub SetVolumeNull()
            Me(Me.tableStdSampInfo.VolumeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDilutionNull() As Boolean
            Return Me.IsNull(Me.tableStdSampInfo.DilutionColumn)
        End Function
        
        Public Sub SetDilutionNull()
            Me(Me.tableStdSampInfo.DilutionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbsoNull() As Boolean
            Return Me.IsNull(Me.tableStdSampInfo.AbsoColumn)
        End Function
        
        Public Sub SetAbsoNull()
            Me(Me.tableStdSampInfo.AbsoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConcNull() As Boolean
            Return Me.IsNull(Me.tableStdSampInfo.ConcColumn)
        End Function
        
        Public Sub SetConcNull()
            Me(Me.tableStdSampInfo.ConcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConcUnitNull() As Boolean
            Return Me.IsNull(Me.tableStdSampInfo.ConcUnitColumn)
        End Function
        
        Public Sub SetConcUnitNull()
            Me(Me.tableStdSampInfo.ConcUnitColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StdSampInfoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StdSampInfoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StdSampInfoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StdSampInfoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
