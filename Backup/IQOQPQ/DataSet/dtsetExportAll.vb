'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dtsetExportAll
    Inherits DataSet
    
    Private tableEquipmentList As EquipmentListDataTable
    
    Private tableCustomerDetails As CustomerDetailsDataTable
    
    Private tableCompletedAcceptedBY As CompletedAcceptedBYDataTable
    
    Private tableIQManualList As IQManualListDataTable
    
    Private tableDeficiencyCorrectiveActionPlan As DeficiencyCorrectiveActionPlanDataTable
    
    Private tableManufacturerRepresentative As ManufacturerRepresentativeDataTable
    
    Private tableIQAccessory As IQAccessoryDataTable
    
    Private tableCustomerRepresentative As CustomerRepresentativeDataTable
    
    Private tableIQSpecification As IQSpecificationDataTable
    
    Private tableOQCompletedAcceptedBy As OQCompletedAcceptedByDataTable
    
    Private tableOQDeficiencyCorrectiveActionPlan As OQDeficiencyCorrectiveActionPlanDataTable
    
    Private tableOQEquipmentList As OQEquipmentListDataTable
    
    Private tableOQManufacturerRepresentative As OQManufacturerRepresentativeDataTable
    
    Private tableOQTest As OQTestDataTable
    
    Private tableOQUserTraining As OQUserTrainingDataTable
    
    Private tableOQUser As OQUserDataTable
    
    Private tableOQCustomerRepresentative As OQCustomerRepresentativeDataTable
    
    Private tablePQCompletedAcceptedBy As PQCompletedAcceptedByDataTable
    
    Private tablePQCustomerRepresentative As PQCustomerRepresentativeDataTable
    
    Private tablePQDeficiencyCorrectiveActionPlan As PQDeficiencyCorrectiveActionPlanDataTable
    
    Private tablePQEquipmentList As PQEquipmentListDataTable
    
    Private tablePQManufacturerRepresentative As PQManufacturerRepresentativeDataTable
    
    Private tableTest As TestDataTable
    
    Private tablePQTest1 As PQTest1DataTable
    
    Private tablePQTest5 As PQTest5DataTable
    
    Private tablePQTest2 As PQTest2DataTable
    
    Private tablePQTest3 As PQTest3DataTable
    
    Private tablePQTest4 As PQTest4DataTable
    
    Private tablePQTest6 As PQTest6DataTable
    
    Private tablePQTest7 As PQTest7DataTable
    
    Private tablePQTest8 As PQTest8DataTable
    
    Private tablePQTest9 As PQTest9DataTable
    
    Private tablePQTest10 As PQTest10DataTable
    
    Private tablePQTest11 As PQTest11DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EquipmentList")) Is Nothing) Then
                Me.Tables.Add(New EquipmentListDataTable(ds.Tables("EquipmentList")))
            End If
            If (Not (ds.Tables("CustomerDetails")) Is Nothing) Then
                Me.Tables.Add(New CustomerDetailsDataTable(ds.Tables("CustomerDetails")))
            End If
            If (Not (ds.Tables("CompletedAcceptedBY")) Is Nothing) Then
                Me.Tables.Add(New CompletedAcceptedBYDataTable(ds.Tables("CompletedAcceptedBY")))
            End If
            If (Not (ds.Tables("IQManualList")) Is Nothing) Then
                Me.Tables.Add(New IQManualListDataTable(ds.Tables("IQManualList")))
            End If
            If (Not (ds.Tables("DeficiencyCorrectiveActionPlan")) Is Nothing) Then
                Me.Tables.Add(New DeficiencyCorrectiveActionPlanDataTable(ds.Tables("DeficiencyCorrectiveActionPlan")))
            End If
            If (Not (ds.Tables("ManufacturerRepresentative")) Is Nothing) Then
                Me.Tables.Add(New ManufacturerRepresentativeDataTable(ds.Tables("ManufacturerRepresentative")))
            End If
            If (Not (ds.Tables("IQAccessory")) Is Nothing) Then
                Me.Tables.Add(New IQAccessoryDataTable(ds.Tables("IQAccessory")))
            End If
            If (Not (ds.Tables("CustomerRepresentative")) Is Nothing) Then
                Me.Tables.Add(New CustomerRepresentativeDataTable(ds.Tables("CustomerRepresentative")))
            End If
            If (Not (ds.Tables("IQSpecification")) Is Nothing) Then
                Me.Tables.Add(New IQSpecificationDataTable(ds.Tables("IQSpecification")))
            End If
            If (Not (ds.Tables("OQCompletedAcceptedBy")) Is Nothing) Then
                Me.Tables.Add(New OQCompletedAcceptedByDataTable(ds.Tables("OQCompletedAcceptedBy")))
            End If
            If (Not (ds.Tables("OQDeficiencyCorrectiveActionPlan")) Is Nothing) Then
                Me.Tables.Add(New OQDeficiencyCorrectiveActionPlanDataTable(ds.Tables("OQDeficiencyCorrectiveActionPlan")))
            End If
            If (Not (ds.Tables("OQEquipmentList")) Is Nothing) Then
                Me.Tables.Add(New OQEquipmentListDataTable(ds.Tables("OQEquipmentList")))
            End If
            If (Not (ds.Tables("OQManufacturerRepresentative")) Is Nothing) Then
                Me.Tables.Add(New OQManufacturerRepresentativeDataTable(ds.Tables("OQManufacturerRepresentative")))
            End If
            If (Not (ds.Tables("OQTest")) Is Nothing) Then
                Me.Tables.Add(New OQTestDataTable(ds.Tables("OQTest")))
            End If
            If (Not (ds.Tables("OQUserTraining")) Is Nothing) Then
                Me.Tables.Add(New OQUserTrainingDataTable(ds.Tables("OQUserTraining")))
            End If
            If (Not (ds.Tables("OQUser")) Is Nothing) Then
                Me.Tables.Add(New OQUserDataTable(ds.Tables("OQUser")))
            End If
            If (Not (ds.Tables("OQCustomerRepresentative")) Is Nothing) Then
                Me.Tables.Add(New OQCustomerRepresentativeDataTable(ds.Tables("OQCustomerRepresentative")))
            End If
            If (Not (ds.Tables("PQCompletedAcceptedBy")) Is Nothing) Then
                Me.Tables.Add(New PQCompletedAcceptedByDataTable(ds.Tables("PQCompletedAcceptedBy")))
            End If
            If (Not (ds.Tables("PQCustomerRepresentative")) Is Nothing) Then
                Me.Tables.Add(New PQCustomerRepresentativeDataTable(ds.Tables("PQCustomerRepresentative")))
            End If
            If (Not (ds.Tables("PQDeficiencyCorrectiveActionPlan")) Is Nothing) Then
                Me.Tables.Add(New PQDeficiencyCorrectiveActionPlanDataTable(ds.Tables("PQDeficiencyCorrectiveActionPlan")))
            End If
            If (Not (ds.Tables("PQEquipmentList")) Is Nothing) Then
                Me.Tables.Add(New PQEquipmentListDataTable(ds.Tables("PQEquipmentList")))
            End If
            If (Not (ds.Tables("PQManufacturerRepresentative")) Is Nothing) Then
                Me.Tables.Add(New PQManufacturerRepresentativeDataTable(ds.Tables("PQManufacturerRepresentative")))
            End If
            If (Not (ds.Tables("Test")) Is Nothing) Then
                Me.Tables.Add(New TestDataTable(ds.Tables("Test")))
            End If
            If (Not (ds.Tables("PQTest1")) Is Nothing) Then
                Me.Tables.Add(New PQTest1DataTable(ds.Tables("PQTest1")))
            End If
            If (Not (ds.Tables("PQTest5")) Is Nothing) Then
                Me.Tables.Add(New PQTest5DataTable(ds.Tables("PQTest5")))
            End If
            If (Not (ds.Tables("PQTest2")) Is Nothing) Then
                Me.Tables.Add(New PQTest2DataTable(ds.Tables("PQTest2")))
            End If
            If (Not (ds.Tables("PQTest3")) Is Nothing) Then
                Me.Tables.Add(New PQTest3DataTable(ds.Tables("PQTest3")))
            End If
            If (Not (ds.Tables("PQTest4")) Is Nothing) Then
                Me.Tables.Add(New PQTest4DataTable(ds.Tables("PQTest4")))
            End If
            If (Not (ds.Tables("PQTest6")) Is Nothing) Then
                Me.Tables.Add(New PQTest6DataTable(ds.Tables("PQTest6")))
            End If
            If (Not (ds.Tables("PQTest7")) Is Nothing) Then
                Me.Tables.Add(New PQTest7DataTable(ds.Tables("PQTest7")))
            End If
            If (Not (ds.Tables("PQTest8")) Is Nothing) Then
                Me.Tables.Add(New PQTest8DataTable(ds.Tables("PQTest8")))
            End If
            If (Not (ds.Tables("PQTest9")) Is Nothing) Then
                Me.Tables.Add(New PQTest9DataTable(ds.Tables("PQTest9")))
            End If
            If (Not (ds.Tables("PQTest10")) Is Nothing) Then
                Me.Tables.Add(New PQTest10DataTable(ds.Tables("PQTest10")))
            End If
            If (Not (ds.Tables("PQTest11")) Is Nothing) Then
                Me.Tables.Add(New PQTest11DataTable(ds.Tables("PQTest11")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EquipmentList As EquipmentListDataTable
        Get
            Return Me.tableEquipmentList
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerDetails As CustomerDetailsDataTable
        Get
            Return Me.tableCustomerDetails
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CompletedAcceptedBY As CompletedAcceptedBYDataTable
        Get
            Return Me.tableCompletedAcceptedBY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IQManualList As IQManualListDataTable
        Get
            Return Me.tableIQManualList
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DeficiencyCorrectiveActionPlan As DeficiencyCorrectiveActionPlanDataTable
        Get
            Return Me.tableDeficiencyCorrectiveActionPlan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManufacturerRepresentative As ManufacturerRepresentativeDataTable
        Get
            Return Me.tableManufacturerRepresentative
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IQAccessory As IQAccessoryDataTable
        Get
            Return Me.tableIQAccessory
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerRepresentative As CustomerRepresentativeDataTable
        Get
            Return Me.tableCustomerRepresentative
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IQSpecification As IQSpecificationDataTable
        Get
            Return Me.tableIQSpecification
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OQCompletedAcceptedBy As OQCompletedAcceptedByDataTable
        Get
            Return Me.tableOQCompletedAcceptedBy
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OQDeficiencyCorrectiveActionPlan As OQDeficiencyCorrectiveActionPlanDataTable
        Get
            Return Me.tableOQDeficiencyCorrectiveActionPlan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OQEquipmentList As OQEquipmentListDataTable
        Get
            Return Me.tableOQEquipmentList
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OQManufacturerRepresentative As OQManufacturerRepresentativeDataTable
        Get
            Return Me.tableOQManufacturerRepresentative
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OQTest As OQTestDataTable
        Get
            Return Me.tableOQTest
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OQUserTraining As OQUserTrainingDataTable
        Get
            Return Me.tableOQUserTraining
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OQUser As OQUserDataTable
        Get
            Return Me.tableOQUser
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OQCustomerRepresentative As OQCustomerRepresentativeDataTable
        Get
            Return Me.tableOQCustomerRepresentative
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQCompletedAcceptedBy As PQCompletedAcceptedByDataTable
        Get
            Return Me.tablePQCompletedAcceptedBy
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQCustomerRepresentative As PQCustomerRepresentativeDataTable
        Get
            Return Me.tablePQCustomerRepresentative
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQDeficiencyCorrectiveActionPlan As PQDeficiencyCorrectiveActionPlanDataTable
        Get
            Return Me.tablePQDeficiencyCorrectiveActionPlan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQEquipmentList As PQEquipmentListDataTable
        Get
            Return Me.tablePQEquipmentList
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQManufacturerRepresentative As PQManufacturerRepresentativeDataTable
        Get
            Return Me.tablePQManufacturerRepresentative
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Test As TestDataTable
        Get
            Return Me.tableTest
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest1 As PQTest1DataTable
        Get
            Return Me.tablePQTest1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest5 As PQTest5DataTable
        Get
            Return Me.tablePQTest5
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest2 As PQTest2DataTable
        Get
            Return Me.tablePQTest2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest3 As PQTest3DataTable
        Get
            Return Me.tablePQTest3
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest4 As PQTest4DataTable
        Get
            Return Me.tablePQTest4
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest6 As PQTest6DataTable
        Get
            Return Me.tablePQTest6
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest7 As PQTest7DataTable
        Get
            Return Me.tablePQTest7
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest8 As PQTest8DataTable
        Get
            Return Me.tablePQTest8
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest9 As PQTest9DataTable
        Get
            Return Me.tablePQTest9
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest10 As PQTest10DataTable
        Get
            Return Me.tablePQTest10
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PQTest11 As PQTest11DataTable
        Get
            Return Me.tablePQTest11
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dtsetExportAll = CType(MyBase.Clone,dtsetExportAll)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("EquipmentList")) Is Nothing) Then
            Me.Tables.Add(New EquipmentListDataTable(ds.Tables("EquipmentList")))
        End If
        If (Not (ds.Tables("CustomerDetails")) Is Nothing) Then
            Me.Tables.Add(New CustomerDetailsDataTable(ds.Tables("CustomerDetails")))
        End If
        If (Not (ds.Tables("CompletedAcceptedBY")) Is Nothing) Then
            Me.Tables.Add(New CompletedAcceptedBYDataTable(ds.Tables("CompletedAcceptedBY")))
        End If
        If (Not (ds.Tables("IQManualList")) Is Nothing) Then
            Me.Tables.Add(New IQManualListDataTable(ds.Tables("IQManualList")))
        End If
        If (Not (ds.Tables("DeficiencyCorrectiveActionPlan")) Is Nothing) Then
            Me.Tables.Add(New DeficiencyCorrectiveActionPlanDataTable(ds.Tables("DeficiencyCorrectiveActionPlan")))
        End If
        If (Not (ds.Tables("ManufacturerRepresentative")) Is Nothing) Then
            Me.Tables.Add(New ManufacturerRepresentativeDataTable(ds.Tables("ManufacturerRepresentative")))
        End If
        If (Not (ds.Tables("IQAccessory")) Is Nothing) Then
            Me.Tables.Add(New IQAccessoryDataTable(ds.Tables("IQAccessory")))
        End If
        If (Not (ds.Tables("CustomerRepresentative")) Is Nothing) Then
            Me.Tables.Add(New CustomerRepresentativeDataTable(ds.Tables("CustomerRepresentative")))
        End If
        If (Not (ds.Tables("IQSpecification")) Is Nothing) Then
            Me.Tables.Add(New IQSpecificationDataTable(ds.Tables("IQSpecification")))
        End If
        If (Not (ds.Tables("OQCompletedAcceptedBy")) Is Nothing) Then
            Me.Tables.Add(New OQCompletedAcceptedByDataTable(ds.Tables("OQCompletedAcceptedBy")))
        End If
        If (Not (ds.Tables("OQDeficiencyCorrectiveActionPlan")) Is Nothing) Then
            Me.Tables.Add(New OQDeficiencyCorrectiveActionPlanDataTable(ds.Tables("OQDeficiencyCorrectiveActionPlan")))
        End If
        If (Not (ds.Tables("OQEquipmentList")) Is Nothing) Then
            Me.Tables.Add(New OQEquipmentListDataTable(ds.Tables("OQEquipmentList")))
        End If
        If (Not (ds.Tables("OQManufacturerRepresentative")) Is Nothing) Then
            Me.Tables.Add(New OQManufacturerRepresentativeDataTable(ds.Tables("OQManufacturerRepresentative")))
        End If
        If (Not (ds.Tables("OQTest")) Is Nothing) Then
            Me.Tables.Add(New OQTestDataTable(ds.Tables("OQTest")))
        End If
        If (Not (ds.Tables("OQUserTraining")) Is Nothing) Then
            Me.Tables.Add(New OQUserTrainingDataTable(ds.Tables("OQUserTraining")))
        End If
        If (Not (ds.Tables("OQUser")) Is Nothing) Then
            Me.Tables.Add(New OQUserDataTable(ds.Tables("OQUser")))
        End If
        If (Not (ds.Tables("OQCustomerRepresentative")) Is Nothing) Then
            Me.Tables.Add(New OQCustomerRepresentativeDataTable(ds.Tables("OQCustomerRepresentative")))
        End If
        If (Not (ds.Tables("PQCompletedAcceptedBy")) Is Nothing) Then
            Me.Tables.Add(New PQCompletedAcceptedByDataTable(ds.Tables("PQCompletedAcceptedBy")))
        End If
        If (Not (ds.Tables("PQCustomerRepresentative")) Is Nothing) Then
            Me.Tables.Add(New PQCustomerRepresentativeDataTable(ds.Tables("PQCustomerRepresentative")))
        End If
        If (Not (ds.Tables("PQDeficiencyCorrectiveActionPlan")) Is Nothing) Then
            Me.Tables.Add(New PQDeficiencyCorrectiveActionPlanDataTable(ds.Tables("PQDeficiencyCorrectiveActionPlan")))
        End If
        If (Not (ds.Tables("PQEquipmentList")) Is Nothing) Then
            Me.Tables.Add(New PQEquipmentListDataTable(ds.Tables("PQEquipmentList")))
        End If
        If (Not (ds.Tables("PQManufacturerRepresentative")) Is Nothing) Then
            Me.Tables.Add(New PQManufacturerRepresentativeDataTable(ds.Tables("PQManufacturerRepresentative")))
        End If
        If (Not (ds.Tables("Test")) Is Nothing) Then
            Me.Tables.Add(New TestDataTable(ds.Tables("Test")))
        End If
        If (Not (ds.Tables("PQTest1")) Is Nothing) Then
            Me.Tables.Add(New PQTest1DataTable(ds.Tables("PQTest1")))
        End If
        If (Not (ds.Tables("PQTest5")) Is Nothing) Then
            Me.Tables.Add(New PQTest5DataTable(ds.Tables("PQTest5")))
        End If
        If (Not (ds.Tables("PQTest2")) Is Nothing) Then
            Me.Tables.Add(New PQTest2DataTable(ds.Tables("PQTest2")))
        End If
        If (Not (ds.Tables("PQTest3")) Is Nothing) Then
            Me.Tables.Add(New PQTest3DataTable(ds.Tables("PQTest3")))
        End If
        If (Not (ds.Tables("PQTest4")) Is Nothing) Then
            Me.Tables.Add(New PQTest4DataTable(ds.Tables("PQTest4")))
        End If
        If (Not (ds.Tables("PQTest6")) Is Nothing) Then
            Me.Tables.Add(New PQTest6DataTable(ds.Tables("PQTest6")))
        End If
        If (Not (ds.Tables("PQTest7")) Is Nothing) Then
            Me.Tables.Add(New PQTest7DataTable(ds.Tables("PQTest7")))
        End If
        If (Not (ds.Tables("PQTest8")) Is Nothing) Then
            Me.Tables.Add(New PQTest8DataTable(ds.Tables("PQTest8")))
        End If
        If (Not (ds.Tables("PQTest9")) Is Nothing) Then
            Me.Tables.Add(New PQTest9DataTable(ds.Tables("PQTest9")))
        End If
        If (Not (ds.Tables("PQTest10")) Is Nothing) Then
            Me.Tables.Add(New PQTest10DataTable(ds.Tables("PQTest10")))
        End If
        If (Not (ds.Tables("PQTest11")) Is Nothing) Then
            Me.Tables.Add(New PQTest11DataTable(ds.Tables("PQTest11")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableEquipmentList = CType(Me.Tables("EquipmentList"),EquipmentListDataTable)
        If (Not (Me.tableEquipmentList) Is Nothing) Then
            Me.tableEquipmentList.InitVars
        End If
        Me.tableCustomerDetails = CType(Me.Tables("CustomerDetails"),CustomerDetailsDataTable)
        If (Not (Me.tableCustomerDetails) Is Nothing) Then
            Me.tableCustomerDetails.InitVars
        End If
        Me.tableCompletedAcceptedBY = CType(Me.Tables("CompletedAcceptedBY"),CompletedAcceptedBYDataTable)
        If (Not (Me.tableCompletedAcceptedBY) Is Nothing) Then
            Me.tableCompletedAcceptedBY.InitVars
        End If
        Me.tableIQManualList = CType(Me.Tables("IQManualList"),IQManualListDataTable)
        If (Not (Me.tableIQManualList) Is Nothing) Then
            Me.tableIQManualList.InitVars
        End If
        Me.tableDeficiencyCorrectiveActionPlan = CType(Me.Tables("DeficiencyCorrectiveActionPlan"),DeficiencyCorrectiveActionPlanDataTable)
        If (Not (Me.tableDeficiencyCorrectiveActionPlan) Is Nothing) Then
            Me.tableDeficiencyCorrectiveActionPlan.InitVars
        End If
        Me.tableManufacturerRepresentative = CType(Me.Tables("ManufacturerRepresentative"),ManufacturerRepresentativeDataTable)
        If (Not (Me.tableManufacturerRepresentative) Is Nothing) Then
            Me.tableManufacturerRepresentative.InitVars
        End If
        Me.tableIQAccessory = CType(Me.Tables("IQAccessory"),IQAccessoryDataTable)
        If (Not (Me.tableIQAccessory) Is Nothing) Then
            Me.tableIQAccessory.InitVars
        End If
        Me.tableCustomerRepresentative = CType(Me.Tables("CustomerRepresentative"),CustomerRepresentativeDataTable)
        If (Not (Me.tableCustomerRepresentative) Is Nothing) Then
            Me.tableCustomerRepresentative.InitVars
        End If
        Me.tableIQSpecification = CType(Me.Tables("IQSpecification"),IQSpecificationDataTable)
        If (Not (Me.tableIQSpecification) Is Nothing) Then
            Me.tableIQSpecification.InitVars
        End If
        Me.tableOQCompletedAcceptedBy = CType(Me.Tables("OQCompletedAcceptedBy"),OQCompletedAcceptedByDataTable)
        If (Not (Me.tableOQCompletedAcceptedBy) Is Nothing) Then
            Me.tableOQCompletedAcceptedBy.InitVars
        End If
        Me.tableOQDeficiencyCorrectiveActionPlan = CType(Me.Tables("OQDeficiencyCorrectiveActionPlan"),OQDeficiencyCorrectiveActionPlanDataTable)
        If (Not (Me.tableOQDeficiencyCorrectiveActionPlan) Is Nothing) Then
            Me.tableOQDeficiencyCorrectiveActionPlan.InitVars
        End If
        Me.tableOQEquipmentList = CType(Me.Tables("OQEquipmentList"),OQEquipmentListDataTable)
        If (Not (Me.tableOQEquipmentList) Is Nothing) Then
            Me.tableOQEquipmentList.InitVars
        End If
        Me.tableOQManufacturerRepresentative = CType(Me.Tables("OQManufacturerRepresentative"),OQManufacturerRepresentativeDataTable)
        If (Not (Me.tableOQManufacturerRepresentative) Is Nothing) Then
            Me.tableOQManufacturerRepresentative.InitVars
        End If
        Me.tableOQTest = CType(Me.Tables("OQTest"),OQTestDataTable)
        If (Not (Me.tableOQTest) Is Nothing) Then
            Me.tableOQTest.InitVars
        End If
        Me.tableOQUserTraining = CType(Me.Tables("OQUserTraining"),OQUserTrainingDataTable)
        If (Not (Me.tableOQUserTraining) Is Nothing) Then
            Me.tableOQUserTraining.InitVars
        End If
        Me.tableOQUser = CType(Me.Tables("OQUser"),OQUserDataTable)
        If (Not (Me.tableOQUser) Is Nothing) Then
            Me.tableOQUser.InitVars
        End If
        Me.tableOQCustomerRepresentative = CType(Me.Tables("OQCustomerRepresentative"),OQCustomerRepresentativeDataTable)
        If (Not (Me.tableOQCustomerRepresentative) Is Nothing) Then
            Me.tableOQCustomerRepresentative.InitVars
        End If
        Me.tablePQCompletedAcceptedBy = CType(Me.Tables("PQCompletedAcceptedBy"),PQCompletedAcceptedByDataTable)
        If (Not (Me.tablePQCompletedAcceptedBy) Is Nothing) Then
            Me.tablePQCompletedAcceptedBy.InitVars
        End If
        Me.tablePQCustomerRepresentative = CType(Me.Tables("PQCustomerRepresentative"),PQCustomerRepresentativeDataTable)
        If (Not (Me.tablePQCustomerRepresentative) Is Nothing) Then
            Me.tablePQCustomerRepresentative.InitVars
        End If
        Me.tablePQDeficiencyCorrectiveActionPlan = CType(Me.Tables("PQDeficiencyCorrectiveActionPlan"),PQDeficiencyCorrectiveActionPlanDataTable)
        If (Not (Me.tablePQDeficiencyCorrectiveActionPlan) Is Nothing) Then
            Me.tablePQDeficiencyCorrectiveActionPlan.InitVars
        End If
        Me.tablePQEquipmentList = CType(Me.Tables("PQEquipmentList"),PQEquipmentListDataTable)
        If (Not (Me.tablePQEquipmentList) Is Nothing) Then
            Me.tablePQEquipmentList.InitVars
        End If
        Me.tablePQManufacturerRepresentative = CType(Me.Tables("PQManufacturerRepresentative"),PQManufacturerRepresentativeDataTable)
        If (Not (Me.tablePQManufacturerRepresentative) Is Nothing) Then
            Me.tablePQManufacturerRepresentative.InitVars
        End If
        Me.tableTest = CType(Me.Tables("Test"),TestDataTable)
        If (Not (Me.tableTest) Is Nothing) Then
            Me.tableTest.InitVars
        End If
        Me.tablePQTest1 = CType(Me.Tables("PQTest1"),PQTest1DataTable)
        If (Not (Me.tablePQTest1) Is Nothing) Then
            Me.tablePQTest1.InitVars
        End If
        Me.tablePQTest5 = CType(Me.Tables("PQTest5"),PQTest5DataTable)
        If (Not (Me.tablePQTest5) Is Nothing) Then
            Me.tablePQTest5.InitVars
        End If
        Me.tablePQTest2 = CType(Me.Tables("PQTest2"),PQTest2DataTable)
        If (Not (Me.tablePQTest2) Is Nothing) Then
            Me.tablePQTest2.InitVars
        End If
        Me.tablePQTest3 = CType(Me.Tables("PQTest3"),PQTest3DataTable)
        If (Not (Me.tablePQTest3) Is Nothing) Then
            Me.tablePQTest3.InitVars
        End If
        Me.tablePQTest4 = CType(Me.Tables("PQTest4"),PQTest4DataTable)
        If (Not (Me.tablePQTest4) Is Nothing) Then
            Me.tablePQTest4.InitVars
        End If
        Me.tablePQTest6 = CType(Me.Tables("PQTest6"),PQTest6DataTable)
        If (Not (Me.tablePQTest6) Is Nothing) Then
            Me.tablePQTest6.InitVars
        End If
        Me.tablePQTest7 = CType(Me.Tables("PQTest7"),PQTest7DataTable)
        If (Not (Me.tablePQTest7) Is Nothing) Then
            Me.tablePQTest7.InitVars
        End If
        Me.tablePQTest8 = CType(Me.Tables("PQTest8"),PQTest8DataTable)
        If (Not (Me.tablePQTest8) Is Nothing) Then
            Me.tablePQTest8.InitVars
        End If
        Me.tablePQTest9 = CType(Me.Tables("PQTest9"),PQTest9DataTable)
        If (Not (Me.tablePQTest9) Is Nothing) Then
            Me.tablePQTest9.InitVars
        End If
        Me.tablePQTest10 = CType(Me.Tables("PQTest10"),PQTest10DataTable)
        If (Not (Me.tablePQTest10) Is Nothing) Then
            Me.tablePQTest10.InitVars
        End If
        Me.tablePQTest11 = CType(Me.Tables("PQTest11"),PQTest11DataTable)
        If (Not (Me.tablePQTest11) Is Nothing) Then
            Me.tablePQTest11.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dtsetExportAll"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtsetExportAll.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableEquipmentList = New EquipmentListDataTable
        Me.Tables.Add(Me.tableEquipmentList)
        Me.tableCustomerDetails = New CustomerDetailsDataTable
        Me.Tables.Add(Me.tableCustomerDetails)
        Me.tableCompletedAcceptedBY = New CompletedAcceptedBYDataTable
        Me.Tables.Add(Me.tableCompletedAcceptedBY)
        Me.tableIQManualList = New IQManualListDataTable
        Me.Tables.Add(Me.tableIQManualList)
        Me.tableDeficiencyCorrectiveActionPlan = New DeficiencyCorrectiveActionPlanDataTable
        Me.Tables.Add(Me.tableDeficiencyCorrectiveActionPlan)
        Me.tableManufacturerRepresentative = New ManufacturerRepresentativeDataTable
        Me.Tables.Add(Me.tableManufacturerRepresentative)
        Me.tableIQAccessory = New IQAccessoryDataTable
        Me.Tables.Add(Me.tableIQAccessory)
        Me.tableCustomerRepresentative = New CustomerRepresentativeDataTable
        Me.Tables.Add(Me.tableCustomerRepresentative)
        Me.tableIQSpecification = New IQSpecificationDataTable
        Me.Tables.Add(Me.tableIQSpecification)
        Me.tableOQCompletedAcceptedBy = New OQCompletedAcceptedByDataTable
        Me.Tables.Add(Me.tableOQCompletedAcceptedBy)
        Me.tableOQDeficiencyCorrectiveActionPlan = New OQDeficiencyCorrectiveActionPlanDataTable
        Me.Tables.Add(Me.tableOQDeficiencyCorrectiveActionPlan)
        Me.tableOQEquipmentList = New OQEquipmentListDataTable
        Me.Tables.Add(Me.tableOQEquipmentList)
        Me.tableOQManufacturerRepresentative = New OQManufacturerRepresentativeDataTable
        Me.Tables.Add(Me.tableOQManufacturerRepresentative)
        Me.tableOQTest = New OQTestDataTable
        Me.Tables.Add(Me.tableOQTest)
        Me.tableOQUserTraining = New OQUserTrainingDataTable
        Me.Tables.Add(Me.tableOQUserTraining)
        Me.tableOQUser = New OQUserDataTable
        Me.Tables.Add(Me.tableOQUser)
        Me.tableOQCustomerRepresentative = New OQCustomerRepresentativeDataTable
        Me.Tables.Add(Me.tableOQCustomerRepresentative)
        Me.tablePQCompletedAcceptedBy = New PQCompletedAcceptedByDataTable
        Me.Tables.Add(Me.tablePQCompletedAcceptedBy)
        Me.tablePQCustomerRepresentative = New PQCustomerRepresentativeDataTable
        Me.Tables.Add(Me.tablePQCustomerRepresentative)
        Me.tablePQDeficiencyCorrectiveActionPlan = New PQDeficiencyCorrectiveActionPlanDataTable
        Me.Tables.Add(Me.tablePQDeficiencyCorrectiveActionPlan)
        Me.tablePQEquipmentList = New PQEquipmentListDataTable
        Me.Tables.Add(Me.tablePQEquipmentList)
        Me.tablePQManufacturerRepresentative = New PQManufacturerRepresentativeDataTable
        Me.Tables.Add(Me.tablePQManufacturerRepresentative)
        Me.tableTest = New TestDataTable
        Me.Tables.Add(Me.tableTest)
        Me.tablePQTest1 = New PQTest1DataTable
        Me.Tables.Add(Me.tablePQTest1)
        Me.tablePQTest5 = New PQTest5DataTable
        Me.Tables.Add(Me.tablePQTest5)
        Me.tablePQTest2 = New PQTest2DataTable
        Me.Tables.Add(Me.tablePQTest2)
        Me.tablePQTest3 = New PQTest3DataTable
        Me.Tables.Add(Me.tablePQTest3)
        Me.tablePQTest4 = New PQTest4DataTable
        Me.Tables.Add(Me.tablePQTest4)
        Me.tablePQTest6 = New PQTest6DataTable
        Me.Tables.Add(Me.tablePQTest6)
        Me.tablePQTest7 = New PQTest7DataTable
        Me.Tables.Add(Me.tablePQTest7)
        Me.tablePQTest8 = New PQTest8DataTable
        Me.Tables.Add(Me.tablePQTest8)
        Me.tablePQTest9 = New PQTest9DataTable
        Me.Tables.Add(Me.tablePQTest9)
        Me.tablePQTest10 = New PQTest10DataTable
        Me.Tables.Add(Me.tablePQTest10)
        Me.tablePQTest11 = New PQTest11DataTable
        Me.Tables.Add(Me.tablePQTest11)
    End Sub
    
    Private Function ShouldSerializeEquipmentList() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustomerDetails() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCompletedAcceptedBY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIQManualList() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeficiencyCorrectiveActionPlan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeManufacturerRepresentative() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIQAccessory() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustomerRepresentative() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIQSpecification() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOQCompletedAcceptedBy() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOQDeficiencyCorrectiveActionPlan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOQEquipmentList() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOQManufacturerRepresentative() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOQTest() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOQUserTraining() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOQUser() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOQCustomerRepresentative() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQCompletedAcceptedBy() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQCustomerRepresentative() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQDeficiencyCorrectiveActionPlan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQEquipmentList() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQManufacturerRepresentative() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTest() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest5() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest3() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest4() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest6() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest7() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest8() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest9() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest10() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePQTest11() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub EquipmentListRowChangeEventHandler(ByVal sender As Object, ByVal e As EquipmentListRowChangeEvent)
    
    Public Delegate Sub CustomerDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerDetailsRowChangeEvent)
    
    Public Delegate Sub CompletedAcceptedBYRowChangeEventHandler(ByVal sender As Object, ByVal e As CompletedAcceptedBYRowChangeEvent)
    
    Public Delegate Sub IQManualListRowChangeEventHandler(ByVal sender As Object, ByVal e As IQManualListRowChangeEvent)
    
    Public Delegate Sub DeficiencyCorrectiveActionPlanRowChangeEventHandler(ByVal sender As Object, ByVal e As DeficiencyCorrectiveActionPlanRowChangeEvent)
    
    Public Delegate Sub ManufacturerRepresentativeRowChangeEventHandler(ByVal sender As Object, ByVal e As ManufacturerRepresentativeRowChangeEvent)
    
    Public Delegate Sub IQAccessoryRowChangeEventHandler(ByVal sender As Object, ByVal e As IQAccessoryRowChangeEvent)
    
    Public Delegate Sub CustomerRepresentativeRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerRepresentativeRowChangeEvent)
    
    Public Delegate Sub IQSpecificationRowChangeEventHandler(ByVal sender As Object, ByVal e As IQSpecificationRowChangeEvent)
    
    Public Delegate Sub OQCompletedAcceptedByRowChangeEventHandler(ByVal sender As Object, ByVal e As OQCompletedAcceptedByRowChangeEvent)
    
    Public Delegate Sub OQDeficiencyCorrectiveActionPlanRowChangeEventHandler(ByVal sender As Object, ByVal e As OQDeficiencyCorrectiveActionPlanRowChangeEvent)
    
    Public Delegate Sub OQEquipmentListRowChangeEventHandler(ByVal sender As Object, ByVal e As OQEquipmentListRowChangeEvent)
    
    Public Delegate Sub OQManufacturerRepresentativeRowChangeEventHandler(ByVal sender As Object, ByVal e As OQManufacturerRepresentativeRowChangeEvent)
    
    Public Delegate Sub OQTestRowChangeEventHandler(ByVal sender As Object, ByVal e As OQTestRowChangeEvent)
    
    Public Delegate Sub OQUserTrainingRowChangeEventHandler(ByVal sender As Object, ByVal e As OQUserTrainingRowChangeEvent)
    
    Public Delegate Sub OQUserRowChangeEventHandler(ByVal sender As Object, ByVal e As OQUserRowChangeEvent)
    
    Public Delegate Sub OQCustomerRepresentativeRowChangeEventHandler(ByVal sender As Object, ByVal e As OQCustomerRepresentativeRowChangeEvent)
    
    Public Delegate Sub PQCompletedAcceptedByRowChangeEventHandler(ByVal sender As Object, ByVal e As PQCompletedAcceptedByRowChangeEvent)
    
    Public Delegate Sub PQCustomerRepresentativeRowChangeEventHandler(ByVal sender As Object, ByVal e As PQCustomerRepresentativeRowChangeEvent)
    
    Public Delegate Sub PQDeficiencyCorrectiveActionPlanRowChangeEventHandler(ByVal sender As Object, ByVal e As PQDeficiencyCorrectiveActionPlanRowChangeEvent)
    
    Public Delegate Sub PQEquipmentListRowChangeEventHandler(ByVal sender As Object, ByVal e As PQEquipmentListRowChangeEvent)
    
    Public Delegate Sub PQManufacturerRepresentativeRowChangeEventHandler(ByVal sender As Object, ByVal e As PQManufacturerRepresentativeRowChangeEvent)
    
    Public Delegate Sub TestRowChangeEventHandler(ByVal sender As Object, ByVal e As TestRowChangeEvent)
    
    Public Delegate Sub PQTest1RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest1RowChangeEvent)
    
    Public Delegate Sub PQTest5RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest5RowChangeEvent)
    
    Public Delegate Sub PQTest2RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest2RowChangeEvent)
    
    Public Delegate Sub PQTest3RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest3RowChangeEvent)
    
    Public Delegate Sub PQTest4RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest4RowChangeEvent)
    
    Public Delegate Sub PQTest6RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest6RowChangeEvent)
    
    Public Delegate Sub PQTest7RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest7RowChangeEvent)
    
    Public Delegate Sub PQTest8RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest8RowChangeEvent)
    
    Public Delegate Sub PQTest9RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest9RowChangeEvent)
    
    Public Delegate Sub PQTest10RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest10RowChangeEvent)
    
    Public Delegate Sub PQTest11RowChangeEventHandler(ByVal sender As Object, ByVal e As PQTest11RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EquipmentListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEquipmentListID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnSerialNo As DataColumn
        
        Private columnCheckedBy As DataColumn
        
        Private columnVerifiedBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Private columnModelNo As DataColumn
        
        Friend Sub New()
            MyBase.New("EquipmentList")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EquipmentListIDColumn As DataColumn
            Get
                Return Me.columnEquipmentListID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property SerialNoColumn As DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        Friend ReadOnly Property CheckedByColumn As DataColumn
            Get
                Return Me.columnCheckedBy
            End Get
        End Property
        
        Friend ReadOnly Property VerifiedByColumn As DataColumn
            Get
                Return Me.columnVerifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Friend ReadOnly Property ModelNoColumn As DataColumn
            Get
                Return Me.columnModelNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EquipmentListRow
            Get
                Return CType(Me.Rows(index),EquipmentListRow)
            End Get
        End Property
        
        Public Event EquipmentListRowChanged As EquipmentListRowChangeEventHandler
        
        Public Event EquipmentListRowChanging As EquipmentListRowChangeEventHandler
        
        Public Event EquipmentListRowDeleted As EquipmentListRowChangeEventHandler
        
        Public Event EquipmentListRowDeleting As EquipmentListRowChangeEventHandler
        
        Public Overloads Sub AddEquipmentListRow(ByVal row As EquipmentListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEquipmentListRow(ByVal EquipmentListID As Integer, ByVal Name As String, ByVal SerialNo As String, ByVal CheckedBy As String, ByVal VerifiedBy As String, ByVal CheckStatusIQOQPQ As Single, ByVal ModelNo As String) As EquipmentListRow
            Dim rowEquipmentListRow As EquipmentListRow = CType(Me.NewRow,EquipmentListRow)
            rowEquipmentListRow.ItemArray = New Object() {EquipmentListID, Name, SerialNo, CheckedBy, VerifiedBy, CheckStatusIQOQPQ, ModelNo}
            Me.Rows.Add(rowEquipmentListRow)
            Return rowEquipmentListRow
        End Function
        
        Public Function FindByEquipmentListID(ByVal EquipmentListID As Integer) As EquipmentListRow
            Return CType(Me.Rows.Find(New Object() {EquipmentListID}),EquipmentListRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EquipmentListDataTable = CType(MyBase.Clone,EquipmentListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EquipmentListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEquipmentListID = Me.Columns("EquipmentListID")
            Me.columnName = Me.Columns("Name")
            Me.columnSerialNo = Me.Columns("SerialNo")
            Me.columnCheckedBy = Me.Columns("CheckedBy")
            Me.columnVerifiedBy = Me.Columns("VerifiedBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
            Me.columnModelNo = Me.Columns("ModelNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnEquipmentListID = New DataColumn("EquipmentListID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEquipmentListID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnSerialNo = New DataColumn("SerialNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSerialNo)
            Me.columnCheckedBy = New DataColumn("CheckedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckedBy)
            Me.columnVerifiedBy = New DataColumn("VerifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVerifiedBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.columnModelNo = New DataColumn("ModelNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModelNo)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey1", New DataColumn() {Me.columnEquipmentListID}, true))
            Me.columnEquipmentListID.AllowDBNull = false
            Me.columnEquipmentListID.Unique = true
        End Sub
        
        Public Function NewEquipmentListRow() As EquipmentListRow
            Return CType(Me.NewRow,EquipmentListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EquipmentListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EquipmentListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EquipmentListRowChangedEvent) Is Nothing) Then
                RaiseEvent EquipmentListRowChanged(Me, New EquipmentListRowChangeEvent(CType(e.Row,EquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EquipmentListRowChangingEvent) Is Nothing) Then
                RaiseEvent EquipmentListRowChanging(Me, New EquipmentListRowChangeEvent(CType(e.Row,EquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EquipmentListRowDeletedEvent) Is Nothing) Then
                RaiseEvent EquipmentListRowDeleted(Me, New EquipmentListRowChangeEvent(CType(e.Row,EquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EquipmentListRowDeletingEvent) Is Nothing) Then
                RaiseEvent EquipmentListRowDeleting(Me, New EquipmentListRowChangeEvent(CType(e.Row,EquipmentListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEquipmentListRow(ByVal row As EquipmentListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EquipmentListRow
        Inherits DataRow
        
        Private tableEquipmentList As EquipmentListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEquipmentList = CType(Me.Table,EquipmentListDataTable)
        End Sub
        
        Public Property EquipmentListID As Integer
            Get
                Return CType(Me(Me.tableEquipmentList.EquipmentListIDColumn),Integer)
            End Get
            Set
                Me(Me.tableEquipmentList.EquipmentListIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableEquipmentList.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipmentList.NameColumn) = value
            End Set
        End Property
        
        Public Property SerialNo As String
            Get
                Try 
                    Return CType(Me(Me.tableEquipmentList.SerialNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipmentList.SerialNoColumn) = value
            End Set
        End Property
        
        Public Property CheckedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableEquipmentList.CheckedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipmentList.CheckedByColumn) = value
            End Set
        End Property
        
        Public Property VerifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableEquipmentList.VerifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipmentList.VerifiedByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableEquipmentList.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipmentList.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Property ModelNo As String
            Get
                Try 
                    Return CType(Me(Me.tableEquipmentList.ModelNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipmentList.ModelNoColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableEquipmentList.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableEquipmentList.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableEquipmentList.SerialNoColumn)
        End Function
        
        Public Sub SetSerialNoNull()
            Me(Me.tableEquipmentList.SerialNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckedByNull() As Boolean
            Return Me.IsNull(Me.tableEquipmentList.CheckedByColumn)
        End Function
        
        Public Sub SetCheckedByNull()
            Me(Me.tableEquipmentList.CheckedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVerifiedByNull() As Boolean
            Return Me.IsNull(Me.tableEquipmentList.VerifiedByColumn)
        End Function
        
        Public Sub SetVerifiedByNull()
            Me(Me.tableEquipmentList.VerifiedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableEquipmentList.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableEquipmentList.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModelNoNull() As Boolean
            Return Me.IsNull(Me.tableEquipmentList.ModelNoColumn)
        End Function
        
        Public Sub SetModelNoNull()
            Me(Me.tableEquipmentList.ModelNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EquipmentListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EquipmentListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EquipmentListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EquipmentListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerDetailsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnAttention As DataColumn
        
        Private columnPhone As DataColumn
        
        Private columnFax As DataColumn
        
        Private columnDoneBy As DataColumn
        
        Private columnCompleteDate As DataColumn
        
        Private columnIQModeLocked As DataColumn
        
        Private columnOQModeLocked As DataColumn
        
        Private columnPQModeLocked As DataColumn
        
        Friend Sub New()
            MyBase.New("CustomerDetails")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property AttentionColumn As DataColumn
            Get
                Return Me.columnAttention
            End Get
        End Property
        
        Friend ReadOnly Property PhoneColumn As DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        Friend ReadOnly Property FaxColumn As DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        Friend ReadOnly Property DoneByColumn As DataColumn
            Get
                Return Me.columnDoneBy
            End Get
        End Property
        
        Friend ReadOnly Property CompleteDateColumn As DataColumn
            Get
                Return Me.columnCompleteDate
            End Get
        End Property
        
        Friend ReadOnly Property IQModeLockedColumn As DataColumn
            Get
                Return Me.columnIQModeLocked
            End Get
        End Property
        
        Friend ReadOnly Property OQModeLockedColumn As DataColumn
            Get
                Return Me.columnOQModeLocked
            End Get
        End Property
        
        Friend ReadOnly Property PQModeLockedColumn As DataColumn
            Get
                Return Me.columnPQModeLocked
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerDetailsRow
            Get
                Return CType(Me.Rows(index),CustomerDetailsRow)
            End Get
        End Property
        
        Public Event CustomerDetailsRowChanged As CustomerDetailsRowChangeEventHandler
        
        Public Event CustomerDetailsRowChanging As CustomerDetailsRowChangeEventHandler
        
        Public Event CustomerDetailsRowDeleted As CustomerDetailsRowChangeEventHandler
        
        Public Event CustomerDetailsRowDeleting As CustomerDetailsRowChangeEventHandler
        
        Public Overloads Sub AddCustomerDetailsRow(ByVal row As CustomerDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerDetailsRow(ByVal CustomerID As Integer, ByVal Name As String, ByVal Address As String, ByVal Attention As String, ByVal Phone As String, ByVal Fax As String, ByVal DoneBy As String, ByVal CompleteDate As Date, ByVal IQModeLocked As Integer, ByVal OQModeLocked As Integer, ByVal PQModeLocked As Integer) As CustomerDetailsRow
            Dim rowCustomerDetailsRow As CustomerDetailsRow = CType(Me.NewRow,CustomerDetailsRow)
            rowCustomerDetailsRow.ItemArray = New Object() {CustomerID, Name, Address, Attention, Phone, Fax, DoneBy, CompleteDate, IQModeLocked, OQModeLocked, PQModeLocked}
            Me.Rows.Add(rowCustomerDetailsRow)
            Return rowCustomerDetailsRow
        End Function
        
        Public Function FindByCustomerID(ByVal CustomerID As Integer) As CustomerDetailsRow
            Return CType(Me.Rows.Find(New Object() {CustomerID}),CustomerDetailsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CustomerDetailsDataTable = CType(MyBase.Clone,CustomerDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CustomerDetailsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnName = Me.Columns("Name")
            Me.columnAddress = Me.Columns("Address")
            Me.columnAttention = Me.Columns("Attention")
            Me.columnPhone = Me.Columns("Phone")
            Me.columnFax = Me.Columns("Fax")
            Me.columnDoneBy = Me.Columns("DoneBy")
            Me.columnCompleteDate = Me.Columns("CompleteDate")
            Me.columnIQModeLocked = Me.Columns("IQModeLocked")
            Me.columnOQModeLocked = Me.Columns("OQModeLocked")
            Me.columnPQModeLocked = Me.Columns("PQModeLocked")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnAttention = New DataColumn("Attention", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAttention)
            Me.columnPhone = New DataColumn("Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhone)
            Me.columnFax = New DataColumn("Fax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax)
            Me.columnDoneBy = New DataColumn("DoneBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDoneBy)
            Me.columnCompleteDate = New DataColumn("CompleteDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompleteDate)
            Me.columnIQModeLocked = New DataColumn("IQModeLocked", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIQModeLocked)
            Me.columnOQModeLocked = New DataColumn("OQModeLocked", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOQModeLocked)
            Me.columnPQModeLocked = New DataColumn("PQModeLocked", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQModeLocked)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey2", New DataColumn() {Me.columnCustomerID}, true))
            Me.columnCustomerID.AllowDBNull = false
            Me.columnCustomerID.Unique = true
        End Sub
        
        Public Function NewCustomerDetailsRow() As CustomerDetailsRow
            Return CType(Me.NewRow,CustomerDetailsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CustomerDetailsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerDetailsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerDetailsRowChanged(Me, New CustomerDetailsRowChangeEvent(CType(e.Row,CustomerDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerDetailsRowChanging(Me, New CustomerDetailsRowChangeEvent(CType(e.Row,CustomerDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerDetailsRowDeleted(Me, New CustomerDetailsRowChangeEvent(CType(e.Row,CustomerDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerDetailsRowDeleting(Me, New CustomerDetailsRowChangeEvent(CType(e.Row,CustomerDetailsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerDetailsRow(ByVal row As CustomerDetailsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerDetailsRow
        Inherits DataRow
        
        Private tableCustomerDetails As CustomerDetailsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerDetails = CType(Me.Table,CustomerDetailsDataTable)
        End Sub
        
        Public Property CustomerID As Integer
            Get
                Return CType(Me(Me.tableCustomerDetails.CustomerIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomerDetails.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.NameColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.AddressColumn) = value
            End Set
        End Property
        
        Public Property Attention As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.AttentionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.AttentionColumn) = value
            End Set
        End Property
        
        Public Property Phone As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.PhoneColumn) = value
            End Set
        End Property
        
        Public Property Fax As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.FaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.FaxColumn) = value
            End Set
        End Property
        
        Public Property DoneBy As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.DoneByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.DoneByColumn) = value
            End Set
        End Property
        
        Public Property CompleteDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.CompleteDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.CompleteDateColumn) = value
            End Set
        End Property
        
        Public Property IQModeLocked As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.IQModeLockedColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.IQModeLockedColumn) = value
            End Set
        End Property
        
        Public Property OQModeLocked As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.OQModeLockedColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.OQModeLockedColumn) = value
            End Set
        End Property
        
        Public Property PQModeLocked As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCustomerDetails.PQModeLockedColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerDetails.PQModeLockedColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableCustomerDetails.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableCustomerDetails.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAttentionNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.AttentionColumn)
        End Function
        
        Public Sub SetAttentionNull()
            Me(Me.tableCustomerDetails.AttentionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.PhoneColumn)
        End Function
        
        Public Sub SetPhoneNull()
            Me(Me.tableCustomerDetails.PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.FaxColumn)
        End Function
        
        Public Sub SetFaxNull()
            Me(Me.tableCustomerDetails.FaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDoneByNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.DoneByColumn)
        End Function
        
        Public Sub SetDoneByNull()
            Me(Me.tableCustomerDetails.DoneByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompleteDateNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.CompleteDateColumn)
        End Function
        
        Public Sub SetCompleteDateNull()
            Me(Me.tableCustomerDetails.CompleteDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIQModeLockedNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.IQModeLockedColumn)
        End Function
        
        Public Sub SetIQModeLockedNull()
            Me(Me.tableCustomerDetails.IQModeLockedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOQModeLockedNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.OQModeLockedColumn)
        End Function
        
        Public Sub SetOQModeLockedNull()
            Me(Me.tableCustomerDetails.OQModeLockedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPQModeLockedNull() As Boolean
            Return Me.IsNull(Me.tableCustomerDetails.PQModeLockedColumn)
        End Function
        
        Public Sub SetPQModeLockedNull()
            Me(Me.tableCustomerDetails.PQModeLockedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerDetailsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CustomerDetailsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CustomerDetailsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CustomerDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompletedAcceptedBYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCompletedAcceptedByID As DataColumn
        
        Private columnCompletedBy As DataColumn
        
        Private columnAcceptedBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("CompletedAcceptedBY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CompletedAcceptedByIDColumn As DataColumn
            Get
                Return Me.columnCompletedAcceptedByID
            End Get
        End Property
        
        Friend ReadOnly Property CompletedByColumn As DataColumn
            Get
                Return Me.columnCompletedBy
            End Get
        End Property
        
        Friend ReadOnly Property AcceptedByColumn As DataColumn
            Get
                Return Me.columnAcceptedBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompletedAcceptedBYRow
            Get
                Return CType(Me.Rows(index),CompletedAcceptedBYRow)
            End Get
        End Property
        
        Public Event CompletedAcceptedBYRowChanged As CompletedAcceptedBYRowChangeEventHandler
        
        Public Event CompletedAcceptedBYRowChanging As CompletedAcceptedBYRowChangeEventHandler
        
        Public Event CompletedAcceptedBYRowDeleted As CompletedAcceptedBYRowChangeEventHandler
        
        Public Event CompletedAcceptedBYRowDeleting As CompletedAcceptedBYRowChangeEventHandler
        
        Public Overloads Sub AddCompletedAcceptedBYRow(ByVal row As CompletedAcceptedBYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCompletedAcceptedBYRow(ByVal CompletedAcceptedByID As Integer, ByVal CompletedBy As String, ByVal AcceptedBy As String, ByVal CheckStatusIQOQPQ As Single) As CompletedAcceptedBYRow
            Dim rowCompletedAcceptedBYRow As CompletedAcceptedBYRow = CType(Me.NewRow,CompletedAcceptedBYRow)
            rowCompletedAcceptedBYRow.ItemArray = New Object() {CompletedAcceptedByID, CompletedBy, AcceptedBy, CheckStatusIQOQPQ}
            Me.Rows.Add(rowCompletedAcceptedBYRow)
            Return rowCompletedAcceptedBYRow
        End Function
        
        Public Function FindByCompletedAcceptedByID(ByVal CompletedAcceptedByID As Integer) As CompletedAcceptedBYRow
            Return CType(Me.Rows.Find(New Object() {CompletedAcceptedByID}),CompletedAcceptedBYRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CompletedAcceptedBYDataTable = CType(MyBase.Clone,CompletedAcceptedBYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CompletedAcceptedBYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCompletedAcceptedByID = Me.Columns("CompletedAcceptedByID")
            Me.columnCompletedBy = Me.Columns("CompletedBy")
            Me.columnAcceptedBy = Me.Columns("AcceptedBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnCompletedAcceptedByID = New DataColumn("CompletedAcceptedByID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompletedAcceptedByID)
            Me.columnCompletedBy = New DataColumn("CompletedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompletedBy)
            Me.columnAcceptedBy = New DataColumn("AcceptedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcceptedBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey3", New DataColumn() {Me.columnCompletedAcceptedByID}, true))
            Me.columnCompletedAcceptedByID.AllowDBNull = false
            Me.columnCompletedAcceptedByID.Unique = true
        End Sub
        
        Public Function NewCompletedAcceptedBYRow() As CompletedAcceptedBYRow
            Return CType(Me.NewRow,CompletedAcceptedBYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CompletedAcceptedBYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CompletedAcceptedBYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompletedAcceptedBYRowChangedEvent) Is Nothing) Then
                RaiseEvent CompletedAcceptedBYRowChanged(Me, New CompletedAcceptedBYRowChangeEvent(CType(e.Row,CompletedAcceptedBYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompletedAcceptedBYRowChangingEvent) Is Nothing) Then
                RaiseEvent CompletedAcceptedBYRowChanging(Me, New CompletedAcceptedBYRowChangeEvent(CType(e.Row,CompletedAcceptedBYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompletedAcceptedBYRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompletedAcceptedBYRowDeleted(Me, New CompletedAcceptedBYRowChangeEvent(CType(e.Row,CompletedAcceptedBYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompletedAcceptedBYRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompletedAcceptedBYRowDeleting(Me, New CompletedAcceptedBYRowChangeEvent(CType(e.Row,CompletedAcceptedBYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCompletedAcceptedBYRow(ByVal row As CompletedAcceptedBYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompletedAcceptedBYRow
        Inherits DataRow
        
        Private tableCompletedAcceptedBY As CompletedAcceptedBYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompletedAcceptedBY = CType(Me.Table,CompletedAcceptedBYDataTable)
        End Sub
        
        Public Property CompletedAcceptedByID As Integer
            Get
                Return CType(Me(Me.tableCompletedAcceptedBY.CompletedAcceptedByIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCompletedAcceptedBY.CompletedAcceptedByIDColumn) = value
            End Set
        End Property
        
        Public Property CompletedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableCompletedAcceptedBY.CompletedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompletedAcceptedBY.CompletedByColumn) = value
            End Set
        End Property
        
        Public Property AcceptedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableCompletedAcceptedBY.AcceptedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompletedAcceptedBY.AcceptedByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableCompletedAcceptedBY.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompletedAcceptedBY.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsCompletedByNull() As Boolean
            Return Me.IsNull(Me.tableCompletedAcceptedBY.CompletedByColumn)
        End Function
        
        Public Sub SetCompletedByNull()
            Me(Me.tableCompletedAcceptedBY.CompletedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcceptedByNull() As Boolean
            Return Me.IsNull(Me.tableCompletedAcceptedBY.AcceptedByColumn)
        End Function
        
        Public Sub SetAcceptedByNull()
            Me(Me.tableCompletedAcceptedBY.AcceptedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableCompletedAcceptedBY.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableCompletedAcceptedBY.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompletedAcceptedBYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CompletedAcceptedBYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CompletedAcceptedBYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CompletedAcceptedBYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQManualListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnPartNo As DataColumn
        
        Private columnQuantity As DataColumn
        
        Private columnManualListID As DataColumn
        
        Friend Sub New()
            MyBase.New("IQManualList")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property PartNoColumn As DataColumn
            Get
                Return Me.columnPartNo
            End Get
        End Property
        
        Friend ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Friend ReadOnly Property ManualListIDColumn As DataColumn
            Get
                Return Me.columnManualListID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IQManualListRow
            Get
                Return CType(Me.Rows(index),IQManualListRow)
            End Get
        End Property
        
        Public Event IQManualListRowChanged As IQManualListRowChangeEventHandler
        
        Public Event IQManualListRowChanging As IQManualListRowChangeEventHandler
        
        Public Event IQManualListRowDeleted As IQManualListRowChangeEventHandler
        
        Public Event IQManualListRowDeleting As IQManualListRowChangeEventHandler
        
        Public Overloads Sub AddIQManualListRow(ByVal row As IQManualListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIQManualListRow(ByVal Name As String, ByVal PartNo As String, ByVal Quantity As String, ByVal ManualListID As Integer) As IQManualListRow
            Dim rowIQManualListRow As IQManualListRow = CType(Me.NewRow,IQManualListRow)
            rowIQManualListRow.ItemArray = New Object() {Name, PartNo, Quantity, ManualListID}
            Me.Rows.Add(rowIQManualListRow)
            Return rowIQManualListRow
        End Function
        
        Public Function FindByManualListID(ByVal ManualListID As Integer) As IQManualListRow
            Return CType(Me.Rows.Find(New Object() {ManualListID}),IQManualListRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IQManualListDataTable = CType(MyBase.Clone,IQManualListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IQManualListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnPartNo = Me.Columns("PartNo")
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnManualListID = Me.Columns("ManualListID")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnPartNo = New DataColumn("PartNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartNo)
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnManualListID = New DataColumn("ManualListID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManualListID)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey4", New DataColumn() {Me.columnManualListID}, true))
            Me.columnManualListID.AllowDBNull = false
            Me.columnManualListID.Unique = true
        End Sub
        
        Public Function NewIQManualListRow() As IQManualListRow
            Return CType(Me.NewRow,IQManualListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IQManualListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IQManualListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IQManualListRowChangedEvent) Is Nothing) Then
                RaiseEvent IQManualListRowChanged(Me, New IQManualListRowChangeEvent(CType(e.Row,IQManualListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IQManualListRowChangingEvent) Is Nothing) Then
                RaiseEvent IQManualListRowChanging(Me, New IQManualListRowChangeEvent(CType(e.Row,IQManualListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IQManualListRowDeletedEvent) Is Nothing) Then
                RaiseEvent IQManualListRowDeleted(Me, New IQManualListRowChangeEvent(CType(e.Row,IQManualListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IQManualListRowDeletingEvent) Is Nothing) Then
                RaiseEvent IQManualListRowDeleting(Me, New IQManualListRowChangeEvent(CType(e.Row,IQManualListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIQManualListRow(ByVal row As IQManualListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQManualListRow
        Inherits DataRow
        
        Private tableIQManualList As IQManualListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIQManualList = CType(Me.Table,IQManualListDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableIQManualList.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQManualList.NameColumn) = value
            End Set
        End Property
        
        Public Property PartNo As String
            Get
                Try 
                    Return CType(Me(Me.tableIQManualList.PartNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQManualList.PartNoColumn) = value
            End Set
        End Property
        
        Public Property Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableIQManualList.QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQManualList.QuantityColumn) = value
            End Set
        End Property
        
        Public Property ManualListID As Integer
            Get
                Return CType(Me(Me.tableIQManualList.ManualListIDColumn),Integer)
            End Get
            Set
                Me(Me.tableIQManualList.ManualListIDColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableIQManualList.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableIQManualList.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartNoNull() As Boolean
            Return Me.IsNull(Me.tableIQManualList.PartNoColumn)
        End Function
        
        Public Sub SetPartNoNull()
            Me(Me.tableIQManualList.PartNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableIQManualList.QuantityColumn)
        End Function
        
        Public Sub SetQuantityNull()
            Me(Me.tableIQManualList.QuantityColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQManualListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IQManualListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IQManualListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IQManualListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeficiencyCorrectiveActionPlanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDeficiencyCorrectiveActionPlanID As DataColumn
        
        Private columnDetails As DataColumn
        
        Private columnActionPlan As DataColumn
        
        Private columnCorrectiveActionDate As DataColumn
        
        Private columnCorrectiveActionOrBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("DeficiencyCorrectiveActionPlan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DeficiencyCorrectiveActionPlanIDColumn As DataColumn
            Get
                Return Me.columnDeficiencyCorrectiveActionPlanID
            End Get
        End Property
        
        Friend ReadOnly Property DetailsColumn As DataColumn
            Get
                Return Me.columnDetails
            End Get
        End Property
        
        Friend ReadOnly Property ActionPlanColumn As DataColumn
            Get
                Return Me.columnActionPlan
            End Get
        End Property
        
        Friend ReadOnly Property CorrectiveActionDateColumn As DataColumn
            Get
                Return Me.columnCorrectiveActionDate
            End Get
        End Property
        
        Friend ReadOnly Property CorrectiveActionOrByColumn As DataColumn
            Get
                Return Me.columnCorrectiveActionOrBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DeficiencyCorrectiveActionPlanRow
            Get
                Return CType(Me.Rows(index),DeficiencyCorrectiveActionPlanRow)
            End Get
        End Property
        
        Public Event DeficiencyCorrectiveActionPlanRowChanged As DeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event DeficiencyCorrectiveActionPlanRowChanging As DeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event DeficiencyCorrectiveActionPlanRowDeleted As DeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event DeficiencyCorrectiveActionPlanRowDeleting As DeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Overloads Sub AddDeficiencyCorrectiveActionPlanRow(ByVal row As DeficiencyCorrectiveActionPlanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDeficiencyCorrectiveActionPlanRow(ByVal DeficiencyCorrectiveActionPlanID As Integer, ByVal Details As String, ByVal ActionPlan As String, ByVal CorrectiveActionDate As Date, ByVal CorrectiveActionOrBy As String, ByVal CheckStatusIQOQPQ As Long) As DeficiencyCorrectiveActionPlanRow
            Dim rowDeficiencyCorrectiveActionPlanRow As DeficiencyCorrectiveActionPlanRow = CType(Me.NewRow,DeficiencyCorrectiveActionPlanRow)
            rowDeficiencyCorrectiveActionPlanRow.ItemArray = New Object() {DeficiencyCorrectiveActionPlanID, Details, ActionPlan, CorrectiveActionDate, CorrectiveActionOrBy, CheckStatusIQOQPQ}
            Me.Rows.Add(rowDeficiencyCorrectiveActionPlanRow)
            Return rowDeficiencyCorrectiveActionPlanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DeficiencyCorrectiveActionPlanDataTable = CType(MyBase.Clone,DeficiencyCorrectiveActionPlanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DeficiencyCorrectiveActionPlanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDeficiencyCorrectiveActionPlanID = Me.Columns("DeficiencyCorrectiveActionPlanID")
            Me.columnDetails = Me.Columns("Details")
            Me.columnActionPlan = Me.Columns("ActionPlan")
            Me.columnCorrectiveActionDate = Me.Columns("CorrectiveActionDate")
            Me.columnCorrectiveActionOrBy = Me.Columns("CorrectiveActionOrBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnDeficiencyCorrectiveActionPlanID = New DataColumn("DeficiencyCorrectiveActionPlanID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeficiencyCorrectiveActionPlanID)
            Me.columnDetails = New DataColumn("Details", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails)
            Me.columnActionPlan = New DataColumn("ActionPlan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActionPlan)
            Me.columnCorrectiveActionDate = New DataColumn("CorrectiveActionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorrectiveActionDate)
            Me.columnCorrectiveActionOrBy = New DataColumn("CorrectiveActionOrBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorrectiveActionOrBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
        End Sub
        
        Public Function NewDeficiencyCorrectiveActionPlanRow() As DeficiencyCorrectiveActionPlanRow
            Return CType(Me.NewRow,DeficiencyCorrectiveActionPlanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DeficiencyCorrectiveActionPlanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DeficiencyCorrectiveActionPlanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DeficiencyCorrectiveActionPlanRowChangedEvent) Is Nothing) Then
                RaiseEvent DeficiencyCorrectiveActionPlanRowChanged(Me, New DeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,DeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DeficiencyCorrectiveActionPlanRowChangingEvent) Is Nothing) Then
                RaiseEvent DeficiencyCorrectiveActionPlanRowChanging(Me, New DeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,DeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DeficiencyCorrectiveActionPlanRowDeletedEvent) Is Nothing) Then
                RaiseEvent DeficiencyCorrectiveActionPlanRowDeleted(Me, New DeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,DeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DeficiencyCorrectiveActionPlanRowDeletingEvent) Is Nothing) Then
                RaiseEvent DeficiencyCorrectiveActionPlanRowDeleting(Me, New DeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,DeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDeficiencyCorrectiveActionPlanRow(ByVal row As DeficiencyCorrectiveActionPlanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeficiencyCorrectiveActionPlanRow
        Inherits DataRow
        
        Private tableDeficiencyCorrectiveActionPlan As DeficiencyCorrectiveActionPlanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeficiencyCorrectiveActionPlan = CType(Me.Table,DeficiencyCorrectiveActionPlanDataTable)
        End Sub
        
        Public Property DeficiencyCorrectiveActionPlanID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn) = value
            End Set
        End Property
        
        Public Property Details As String
            Get
                Try 
                    Return CType(Me(Me.tableDeficiencyCorrectiveActionPlan.DetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeficiencyCorrectiveActionPlan.DetailsColumn) = value
            End Set
        End Property
        
        Public Property ActionPlan As String
            Get
                Try 
                    Return CType(Me(Me.tableDeficiencyCorrectiveActionPlan.ActionPlanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeficiencyCorrectiveActionPlan.ActionPlanColumn) = value
            End Set
        End Property
        
        Public Property CorrectiveActionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn) = value
            End Set
        End Property
        
        Public Property CorrectiveActionOrBy As String
            Get
                Try 
                    Return CType(Me(Me.tableDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Long
            Get
                Try 
                    Return CType(Me(Me.tableDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsDeficiencyCorrectiveActionPlanIDNull() As Boolean
            Return Me.IsNull(Me.tableDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn)
        End Function
        
        Public Sub SetDeficiencyCorrectiveActionPlanIDNull()
            Me(Me.tableDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetailsNull() As Boolean
            Return Me.IsNull(Me.tableDeficiencyCorrectiveActionPlan.DetailsColumn)
        End Function
        
        Public Sub SetDetailsNull()
            Me(Me.tableDeficiencyCorrectiveActionPlan.DetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsActionPlanNull() As Boolean
            Return Me.IsNull(Me.tableDeficiencyCorrectiveActionPlan.ActionPlanColumn)
        End Function
        
        Public Sub SetActionPlanNull()
            Me(Me.tableDeficiencyCorrectiveActionPlan.ActionPlanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorrectiveActionDateNull() As Boolean
            Return Me.IsNull(Me.tableDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn)
        End Function
        
        Public Sub SetCorrectiveActionDateNull()
            Me(Me.tableDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorrectiveActionOrByNull() As Boolean
            Return Me.IsNull(Me.tableDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn)
        End Function
        
        Public Sub SetCorrectiveActionOrByNull()
            Me(Me.tableDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeficiencyCorrectiveActionPlanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DeficiencyCorrectiveActionPlanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DeficiencyCorrectiveActionPlanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DeficiencyCorrectiveActionPlanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManufacturerRepresentativeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnManufacturerRepresentativeID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnCompany As DataColumn
        
        Private columnManDate As DataColumn
        
        Private columnJointFunctionalArea As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("ManufacturerRepresentative")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ManufacturerRepresentativeIDColumn As DataColumn
            Get
                Return Me.columnManufacturerRepresentativeID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property CompanyColumn As DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Friend ReadOnly Property ManDateColumn As DataColumn
            Get
                Return Me.columnManDate
            End Get
        End Property
        
        Friend ReadOnly Property JointFunctionalAreaColumn As DataColumn
            Get
                Return Me.columnJointFunctionalArea
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManufacturerRepresentativeRow
            Get
                Return CType(Me.Rows(index),ManufacturerRepresentativeRow)
            End Get
        End Property
        
        Public Event ManufacturerRepresentativeRowChanged As ManufacturerRepresentativeRowChangeEventHandler
        
        Public Event ManufacturerRepresentativeRowChanging As ManufacturerRepresentativeRowChangeEventHandler
        
        Public Event ManufacturerRepresentativeRowDeleted As ManufacturerRepresentativeRowChangeEventHandler
        
        Public Event ManufacturerRepresentativeRowDeleting As ManufacturerRepresentativeRowChangeEventHandler
        
        Public Overloads Sub AddManufacturerRepresentativeRow(ByVal row As ManufacturerRepresentativeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddManufacturerRepresentativeRow(ByVal ManufacturerRepresentativeID As Integer, ByVal Name As String, ByVal Designation As String, ByVal Company As String, ByVal ManDate As Date, ByVal JointFunctionalArea As String, ByVal CheckStatusIQOQPQ As Single) As ManufacturerRepresentativeRow
            Dim rowManufacturerRepresentativeRow As ManufacturerRepresentativeRow = CType(Me.NewRow,ManufacturerRepresentativeRow)
            rowManufacturerRepresentativeRow.ItemArray = New Object() {ManufacturerRepresentativeID, Name, Designation, Company, ManDate, JointFunctionalArea, CheckStatusIQOQPQ}
            Me.Rows.Add(rowManufacturerRepresentativeRow)
            Return rowManufacturerRepresentativeRow
        End Function
        
        Public Function FindByManufacturerRepresentativeID(ByVal ManufacturerRepresentativeID As Integer) As ManufacturerRepresentativeRow
            Return CType(Me.Rows.Find(New Object() {ManufacturerRepresentativeID}),ManufacturerRepresentativeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ManufacturerRepresentativeDataTable = CType(MyBase.Clone,ManufacturerRepresentativeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ManufacturerRepresentativeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnManufacturerRepresentativeID = Me.Columns("ManufacturerRepresentativeID")
            Me.columnName = Me.Columns("Name")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnCompany = Me.Columns("Company")
            Me.columnManDate = Me.Columns("ManDate")
            Me.columnJointFunctionalArea = Me.Columns("JointFunctionalArea")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnManufacturerRepresentativeID = New DataColumn("ManufacturerRepresentativeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManufacturerRepresentativeID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnCompany = New DataColumn("Company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompany)
            Me.columnManDate = New DataColumn("ManDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManDate)
            Me.columnJointFunctionalArea = New DataColumn("JointFunctionalArea", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJointFunctionalArea)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey5", New DataColumn() {Me.columnManufacturerRepresentativeID}, true))
            Me.columnManufacturerRepresentativeID.AllowDBNull = false
            Me.columnManufacturerRepresentativeID.Unique = true
        End Sub
        
        Public Function NewManufacturerRepresentativeRow() As ManufacturerRepresentativeRow
            Return CType(Me.NewRow,ManufacturerRepresentativeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ManufacturerRepresentativeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManufacturerRepresentativeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManufacturerRepresentativeRowChangedEvent) Is Nothing) Then
                RaiseEvent ManufacturerRepresentativeRowChanged(Me, New ManufacturerRepresentativeRowChangeEvent(CType(e.Row,ManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManufacturerRepresentativeRowChangingEvent) Is Nothing) Then
                RaiseEvent ManufacturerRepresentativeRowChanging(Me, New ManufacturerRepresentativeRowChangeEvent(CType(e.Row,ManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManufacturerRepresentativeRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManufacturerRepresentativeRowDeleted(Me, New ManufacturerRepresentativeRowChangeEvent(CType(e.Row,ManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManufacturerRepresentativeRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManufacturerRepresentativeRowDeleting(Me, New ManufacturerRepresentativeRowChangeEvent(CType(e.Row,ManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveManufacturerRepresentativeRow(ByVal row As ManufacturerRepresentativeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManufacturerRepresentativeRow
        Inherits DataRow
        
        Private tableManufacturerRepresentative As ManufacturerRepresentativeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableManufacturerRepresentative = CType(Me.Table,ManufacturerRepresentativeDataTable)
        End Sub
        
        Public Property ManufacturerRepresentativeID As Integer
            Get
                Return CType(Me(Me.tableManufacturerRepresentative.ManufacturerRepresentativeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableManufacturerRepresentative.ManufacturerRepresentativeIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableManufacturerRepresentative.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManufacturerRepresentative.NameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tableManufacturerRepresentative.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManufacturerRepresentative.DesignationColumn) = value
            End Set
        End Property
        
        Public Property Company As String
            Get
                Try 
                    Return CType(Me(Me.tableManufacturerRepresentative.CompanyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManufacturerRepresentative.CompanyColumn) = value
            End Set
        End Property
        
        Public Property ManDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableManufacturerRepresentative.ManDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManufacturerRepresentative.ManDateColumn) = value
            End Set
        End Property
        
        Public Property JointFunctionalArea As String
            Get
                Try 
                    Return CType(Me(Me.tableManufacturerRepresentative.JointFunctionalAreaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManufacturerRepresentative.JointFunctionalAreaColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableManufacturerRepresentative.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManufacturerRepresentative.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableManufacturerRepresentative.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableManufacturerRepresentative.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tableManufacturerRepresentative.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tableManufacturerRepresentative.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableManufacturerRepresentative.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tableManufacturerRepresentative.CompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsManDateNull() As Boolean
            Return Me.IsNull(Me.tableManufacturerRepresentative.ManDateColumn)
        End Function
        
        Public Sub SetManDateNull()
            Me(Me.tableManufacturerRepresentative.ManDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJointFunctionalAreaNull() As Boolean
            Return Me.IsNull(Me.tableManufacturerRepresentative.JointFunctionalAreaColumn)
        End Function
        
        Public Sub SetJointFunctionalAreaNull()
            Me(Me.tableManufacturerRepresentative.JointFunctionalAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableManufacturerRepresentative.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableManufacturerRepresentative.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManufacturerRepresentativeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ManufacturerRepresentativeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ManufacturerRepresentativeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ManufacturerRepresentativeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQAccessoryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnManufacturer As DataColumn
        
        Private columnSerialNo As DataColumn
        
        Private columnSpecification As DataColumn
        
        Private columnIQAccessoryID As DataColumn
        
        Friend Sub New()
            MyBase.New("IQAccessory")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property ManufacturerColumn As DataColumn
            Get
                Return Me.columnManufacturer
            End Get
        End Property
        
        Friend ReadOnly Property SerialNoColumn As DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        Friend ReadOnly Property SpecificationColumn As DataColumn
            Get
                Return Me.columnSpecification
            End Get
        End Property
        
        Friend ReadOnly Property IQAccessoryIDColumn As DataColumn
            Get
                Return Me.columnIQAccessoryID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IQAccessoryRow
            Get
                Return CType(Me.Rows(index),IQAccessoryRow)
            End Get
        End Property
        
        Public Event IQAccessoryRowChanged As IQAccessoryRowChangeEventHandler
        
        Public Event IQAccessoryRowChanging As IQAccessoryRowChangeEventHandler
        
        Public Event IQAccessoryRowDeleted As IQAccessoryRowChangeEventHandler
        
        Public Event IQAccessoryRowDeleting As IQAccessoryRowChangeEventHandler
        
        Public Overloads Sub AddIQAccessoryRow(ByVal row As IQAccessoryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIQAccessoryRow(ByVal Name As String, ByVal Manufacturer As String, ByVal SerialNo As String, ByVal Specification As String, ByVal IQAccessoryID As Integer) As IQAccessoryRow
            Dim rowIQAccessoryRow As IQAccessoryRow = CType(Me.NewRow,IQAccessoryRow)
            rowIQAccessoryRow.ItemArray = New Object() {Name, Manufacturer, SerialNo, Specification, IQAccessoryID}
            Me.Rows.Add(rowIQAccessoryRow)
            Return rowIQAccessoryRow
        End Function
        
        Public Function FindByIQAccessoryID(ByVal IQAccessoryID As Integer) As IQAccessoryRow
            Return CType(Me.Rows.Find(New Object() {IQAccessoryID}),IQAccessoryRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IQAccessoryDataTable = CType(MyBase.Clone,IQAccessoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IQAccessoryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnManufacturer = Me.Columns("Manufacturer")
            Me.columnSerialNo = Me.Columns("SerialNo")
            Me.columnSpecification = Me.Columns("Specification")
            Me.columnIQAccessoryID = Me.Columns("IQAccessoryID")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnManufacturer = New DataColumn("Manufacturer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManufacturer)
            Me.columnSerialNo = New DataColumn("SerialNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSerialNo)
            Me.columnSpecification = New DataColumn("Specification", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecification)
            Me.columnIQAccessoryID = New DataColumn("IQAccessoryID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIQAccessoryID)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey6", New DataColumn() {Me.columnIQAccessoryID}, true))
            Me.columnIQAccessoryID.AllowDBNull = false
            Me.columnIQAccessoryID.Unique = true
        End Sub
        
        Public Function NewIQAccessoryRow() As IQAccessoryRow
            Return CType(Me.NewRow,IQAccessoryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IQAccessoryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IQAccessoryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IQAccessoryRowChangedEvent) Is Nothing) Then
                RaiseEvent IQAccessoryRowChanged(Me, New IQAccessoryRowChangeEvent(CType(e.Row,IQAccessoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IQAccessoryRowChangingEvent) Is Nothing) Then
                RaiseEvent IQAccessoryRowChanging(Me, New IQAccessoryRowChangeEvent(CType(e.Row,IQAccessoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IQAccessoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent IQAccessoryRowDeleted(Me, New IQAccessoryRowChangeEvent(CType(e.Row,IQAccessoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IQAccessoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent IQAccessoryRowDeleting(Me, New IQAccessoryRowChangeEvent(CType(e.Row,IQAccessoryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIQAccessoryRow(ByVal row As IQAccessoryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQAccessoryRow
        Inherits DataRow
        
        Private tableIQAccessory As IQAccessoryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIQAccessory = CType(Me.Table,IQAccessoryDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableIQAccessory.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQAccessory.NameColumn) = value
            End Set
        End Property
        
        Public Property Manufacturer As String
            Get
                Try 
                    Return CType(Me(Me.tableIQAccessory.ManufacturerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQAccessory.ManufacturerColumn) = value
            End Set
        End Property
        
        Public Property SerialNo As String
            Get
                Try 
                    Return CType(Me(Me.tableIQAccessory.SerialNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQAccessory.SerialNoColumn) = value
            End Set
        End Property
        
        Public Property Specification As String
            Get
                Try 
                    Return CType(Me(Me.tableIQAccessory.SpecificationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQAccessory.SpecificationColumn) = value
            End Set
        End Property
        
        Public Property IQAccessoryID As Integer
            Get
                Return CType(Me(Me.tableIQAccessory.IQAccessoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tableIQAccessory.IQAccessoryIDColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableIQAccessory.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableIQAccessory.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsManufacturerNull() As Boolean
            Return Me.IsNull(Me.tableIQAccessory.ManufacturerColumn)
        End Function
        
        Public Sub SetManufacturerNull()
            Me(Me.tableIQAccessory.ManufacturerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableIQAccessory.SerialNoColumn)
        End Function
        
        Public Sub SetSerialNoNull()
            Me(Me.tableIQAccessory.SerialNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecificationNull() As Boolean
            Return Me.IsNull(Me.tableIQAccessory.SpecificationColumn)
        End Function
        
        Public Sub SetSpecificationNull()
            Me(Me.tableIQAccessory.SpecificationColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQAccessoryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IQAccessoryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IQAccessoryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IQAccessoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerRepresentativeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerRepresentativeID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnCustDate As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Private columnFunctionalArea As DataColumn
        
        Friend Sub New()
            MyBase.New("CustomerRepresentative")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerRepresentativeIDColumn As DataColumn
            Get
                Return Me.columnCustomerRepresentativeID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property CustDateColumn As DataColumn
            Get
                Return Me.columnCustDate
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Friend ReadOnly Property FunctionalAreaColumn As DataColumn
            Get
                Return Me.columnFunctionalArea
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerRepresentativeRow
            Get
                Return CType(Me.Rows(index),CustomerRepresentativeRow)
            End Get
        End Property
        
        Public Event CustomerRepresentativeRowChanged As CustomerRepresentativeRowChangeEventHandler
        
        Public Event CustomerRepresentativeRowChanging As CustomerRepresentativeRowChangeEventHandler
        
        Public Event CustomerRepresentativeRowDeleted As CustomerRepresentativeRowChangeEventHandler
        
        Public Event CustomerRepresentativeRowDeleting As CustomerRepresentativeRowChangeEventHandler
        
        Public Overloads Sub AddCustomerRepresentativeRow(ByVal row As CustomerRepresentativeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerRepresentativeRow(ByVal CustomerRepresentativeID As Integer, ByVal Name As String, ByVal Designation As String, ByVal CustDate As Date, ByVal CheckStatusIQOQPQ As Single, ByVal FunctionalArea As String) As CustomerRepresentativeRow
            Dim rowCustomerRepresentativeRow As CustomerRepresentativeRow = CType(Me.NewRow,CustomerRepresentativeRow)
            rowCustomerRepresentativeRow.ItemArray = New Object() {CustomerRepresentativeID, Name, Designation, CustDate, CheckStatusIQOQPQ, FunctionalArea}
            Me.Rows.Add(rowCustomerRepresentativeRow)
            Return rowCustomerRepresentativeRow
        End Function
        
        Public Function FindByCustomerRepresentativeID(ByVal CustomerRepresentativeID As Integer) As CustomerRepresentativeRow
            Return CType(Me.Rows.Find(New Object() {CustomerRepresentativeID}),CustomerRepresentativeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CustomerRepresentativeDataTable = CType(MyBase.Clone,CustomerRepresentativeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CustomerRepresentativeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerRepresentativeID = Me.Columns("CustomerRepresentativeID")
            Me.columnName = Me.Columns("Name")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnCustDate = Me.Columns("CustDate")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
            Me.columnFunctionalArea = Me.Columns("FunctionalArea")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerRepresentativeID = New DataColumn("CustomerRepresentativeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerRepresentativeID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnCustDate = New DataColumn("CustDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustDate)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.columnFunctionalArea = New DataColumn("FunctionalArea", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFunctionalArea)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey7", New DataColumn() {Me.columnCustomerRepresentativeID}, true))
            Me.columnCustomerRepresentativeID.AllowDBNull = false
            Me.columnCustomerRepresentativeID.Unique = true
        End Sub
        
        Public Function NewCustomerRepresentativeRow() As CustomerRepresentativeRow
            Return CType(Me.NewRow,CustomerRepresentativeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CustomerRepresentativeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerRepresentativeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerRepresentativeRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerRepresentativeRowChanged(Me, New CustomerRepresentativeRowChangeEvent(CType(e.Row,CustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerRepresentativeRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerRepresentativeRowChanging(Me, New CustomerRepresentativeRowChangeEvent(CType(e.Row,CustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerRepresentativeRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerRepresentativeRowDeleted(Me, New CustomerRepresentativeRowChangeEvent(CType(e.Row,CustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerRepresentativeRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerRepresentativeRowDeleting(Me, New CustomerRepresentativeRowChangeEvent(CType(e.Row,CustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerRepresentativeRow(ByVal row As CustomerRepresentativeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerRepresentativeRow
        Inherits DataRow
        
        Private tableCustomerRepresentative As CustomerRepresentativeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerRepresentative = CType(Me.Table,CustomerRepresentativeDataTable)
        End Sub
        
        Public Property CustomerRepresentativeID As Integer
            Get
                Return CType(Me(Me.tableCustomerRepresentative.CustomerRepresentativeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomerRepresentative.CustomerRepresentativeIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerRepresentative.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerRepresentative.NameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerRepresentative.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerRepresentative.DesignationColumn) = value
            End Set
        End Property
        
        Public Property CustDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCustomerRepresentative.CustDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerRepresentative.CustDateColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableCustomerRepresentative.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerRepresentative.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Property FunctionalArea As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerRepresentative.FunctionalAreaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerRepresentative.FunctionalAreaColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomerRepresentative.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableCustomerRepresentative.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tableCustomerRepresentative.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tableCustomerRepresentative.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustDateNull() As Boolean
            Return Me.IsNull(Me.tableCustomerRepresentative.CustDateColumn)
        End Function
        
        Public Sub SetCustDateNull()
            Me(Me.tableCustomerRepresentative.CustDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableCustomerRepresentative.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableCustomerRepresentative.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFunctionalAreaNull() As Boolean
            Return Me.IsNull(Me.tableCustomerRepresentative.FunctionalAreaColumn)
        End Function
        
        Public Sub SetFunctionalAreaNull()
            Me(Me.tableCustomerRepresentative.FunctionalAreaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerRepresentativeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CustomerRepresentativeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CustomerRepresentativeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CustomerRepresentativeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQSpecificationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIQSpecificationID As DataColumn
        
        Private columnIQEquipmentName As DataColumn
        
        Private columnIQManufacturer As DataColumn
        
        Private columnIQSerialNo As DataColumn
        
        Private columnIQSize As DataColumn
        
        Private columnIQMainpowerSupply As DataColumn
        
        Friend Sub New()
            MyBase.New("IQSpecification")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IQSpecificationIDColumn As DataColumn
            Get
                Return Me.columnIQSpecificationID
            End Get
        End Property
        
        Friend ReadOnly Property IQEquipmentNameColumn As DataColumn
            Get
                Return Me.columnIQEquipmentName
            End Get
        End Property
        
        Friend ReadOnly Property IQManufacturerColumn As DataColumn
            Get
                Return Me.columnIQManufacturer
            End Get
        End Property
        
        Friend ReadOnly Property IQSerialNoColumn As DataColumn
            Get
                Return Me.columnIQSerialNo
            End Get
        End Property
        
        Friend ReadOnly Property IQSizeColumn As DataColumn
            Get
                Return Me.columnIQSize
            End Get
        End Property
        
        Friend ReadOnly Property IQMainpowerSupplyColumn As DataColumn
            Get
                Return Me.columnIQMainpowerSupply
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IQSpecificationRow
            Get
                Return CType(Me.Rows(index),IQSpecificationRow)
            End Get
        End Property
        
        Public Event IQSpecificationRowChanged As IQSpecificationRowChangeEventHandler
        
        Public Event IQSpecificationRowChanging As IQSpecificationRowChangeEventHandler
        
        Public Event IQSpecificationRowDeleted As IQSpecificationRowChangeEventHandler
        
        Public Event IQSpecificationRowDeleting As IQSpecificationRowChangeEventHandler
        
        Public Overloads Sub AddIQSpecificationRow(ByVal row As IQSpecificationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIQSpecificationRow(ByVal IQSpecificationID As Integer, ByVal IQEquipmentName As String, ByVal IQManufacturer As String, ByVal IQSerialNo As String, ByVal IQSize As String, ByVal IQMainpowerSupply As String) As IQSpecificationRow
            Dim rowIQSpecificationRow As IQSpecificationRow = CType(Me.NewRow,IQSpecificationRow)
            rowIQSpecificationRow.ItemArray = New Object() {IQSpecificationID, IQEquipmentName, IQManufacturer, IQSerialNo, IQSize, IQMainpowerSupply}
            Me.Rows.Add(rowIQSpecificationRow)
            Return rowIQSpecificationRow
        End Function
        
        Public Function FindByIQSpecificationID(ByVal IQSpecificationID As Integer) As IQSpecificationRow
            Return CType(Me.Rows.Find(New Object() {IQSpecificationID}),IQSpecificationRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IQSpecificationDataTable = CType(MyBase.Clone,IQSpecificationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IQSpecificationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIQSpecificationID = Me.Columns("IQSpecificationID")
            Me.columnIQEquipmentName = Me.Columns("IQEquipmentName")
            Me.columnIQManufacturer = Me.Columns("IQManufacturer")
            Me.columnIQSerialNo = Me.Columns("IQSerialNo")
            Me.columnIQSize = Me.Columns("IQSize")
            Me.columnIQMainpowerSupply = Me.Columns("IQMainpowerSupply")
        End Sub
        
        Private Sub InitClass()
            Me.columnIQSpecificationID = New DataColumn("IQSpecificationID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIQSpecificationID)
            Me.columnIQEquipmentName = New DataColumn("IQEquipmentName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIQEquipmentName)
            Me.columnIQManufacturer = New DataColumn("IQManufacturer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIQManufacturer)
            Me.columnIQSerialNo = New DataColumn("IQSerialNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIQSerialNo)
            Me.columnIQSize = New DataColumn("IQSize", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIQSize)
            Me.columnIQMainpowerSupply = New DataColumn("IQMainpowerSupply", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIQMainpowerSupply)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey8", New DataColumn() {Me.columnIQSpecificationID}, true))
            Me.columnIQSpecificationID.AllowDBNull = false
            Me.columnIQSpecificationID.Unique = true
        End Sub
        
        Public Function NewIQSpecificationRow() As IQSpecificationRow
            Return CType(Me.NewRow,IQSpecificationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IQSpecificationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IQSpecificationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IQSpecificationRowChangedEvent) Is Nothing) Then
                RaiseEvent IQSpecificationRowChanged(Me, New IQSpecificationRowChangeEvent(CType(e.Row,IQSpecificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IQSpecificationRowChangingEvent) Is Nothing) Then
                RaiseEvent IQSpecificationRowChanging(Me, New IQSpecificationRowChangeEvent(CType(e.Row,IQSpecificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IQSpecificationRowDeletedEvent) Is Nothing) Then
                RaiseEvent IQSpecificationRowDeleted(Me, New IQSpecificationRowChangeEvent(CType(e.Row,IQSpecificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IQSpecificationRowDeletingEvent) Is Nothing) Then
                RaiseEvent IQSpecificationRowDeleting(Me, New IQSpecificationRowChangeEvent(CType(e.Row,IQSpecificationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIQSpecificationRow(ByVal row As IQSpecificationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQSpecificationRow
        Inherits DataRow
        
        Private tableIQSpecification As IQSpecificationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIQSpecification = CType(Me.Table,IQSpecificationDataTable)
        End Sub
        
        Public Property IQSpecificationID As Integer
            Get
                Return CType(Me(Me.tableIQSpecification.IQSpecificationIDColumn),Integer)
            End Get
            Set
                Me(Me.tableIQSpecification.IQSpecificationIDColumn) = value
            End Set
        End Property
        
        Public Property IQEquipmentName As String
            Get
                Try 
                    Return CType(Me(Me.tableIQSpecification.IQEquipmentNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQSpecification.IQEquipmentNameColumn) = value
            End Set
        End Property
        
        Public Property IQManufacturer As String
            Get
                Try 
                    Return CType(Me(Me.tableIQSpecification.IQManufacturerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQSpecification.IQManufacturerColumn) = value
            End Set
        End Property
        
        Public Property IQSerialNo As String
            Get
                Try 
                    Return CType(Me(Me.tableIQSpecification.IQSerialNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQSpecification.IQSerialNoColumn) = value
            End Set
        End Property
        
        Public Property IQSize As String
            Get
                Try 
                    Return CType(Me(Me.tableIQSpecification.IQSizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQSpecification.IQSizeColumn) = value
            End Set
        End Property
        
        Public Property IQMainpowerSupply As String
            Get
                Try 
                    Return CType(Me(Me.tableIQSpecification.IQMainpowerSupplyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIQSpecification.IQMainpowerSupplyColumn) = value
            End Set
        End Property
        
        Public Function IsIQEquipmentNameNull() As Boolean
            Return Me.IsNull(Me.tableIQSpecification.IQEquipmentNameColumn)
        End Function
        
        Public Sub SetIQEquipmentNameNull()
            Me(Me.tableIQSpecification.IQEquipmentNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIQManufacturerNull() As Boolean
            Return Me.IsNull(Me.tableIQSpecification.IQManufacturerColumn)
        End Function
        
        Public Sub SetIQManufacturerNull()
            Me(Me.tableIQSpecification.IQManufacturerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIQSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableIQSpecification.IQSerialNoColumn)
        End Function
        
        Public Sub SetIQSerialNoNull()
            Me(Me.tableIQSpecification.IQSerialNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIQSizeNull() As Boolean
            Return Me.IsNull(Me.tableIQSpecification.IQSizeColumn)
        End Function
        
        Public Sub SetIQSizeNull()
            Me(Me.tableIQSpecification.IQSizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIQMainpowerSupplyNull() As Boolean
            Return Me.IsNull(Me.tableIQSpecification.IQMainpowerSupplyColumn)
        End Function
        
        Public Sub SetIQMainpowerSupplyNull()
            Me(Me.tableIQSpecification.IQMainpowerSupplyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IQSpecificationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IQSpecificationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IQSpecificationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IQSpecificationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQCompletedAcceptedByDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCompletedAcceptedByID As DataColumn
        
        Private columnCompletedBy As DataColumn
        
        Private columnAcceptedBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("OQCompletedAcceptedBy")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CompletedAcceptedByIDColumn As DataColumn
            Get
                Return Me.columnCompletedAcceptedByID
            End Get
        End Property
        
        Friend ReadOnly Property CompletedByColumn As DataColumn
            Get
                Return Me.columnCompletedBy
            End Get
        End Property
        
        Friend ReadOnly Property AcceptedByColumn As DataColumn
            Get
                Return Me.columnAcceptedBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OQCompletedAcceptedByRow
            Get
                Return CType(Me.Rows(index),OQCompletedAcceptedByRow)
            End Get
        End Property
        
        Public Event OQCompletedAcceptedByRowChanged As OQCompletedAcceptedByRowChangeEventHandler
        
        Public Event OQCompletedAcceptedByRowChanging As OQCompletedAcceptedByRowChangeEventHandler
        
        Public Event OQCompletedAcceptedByRowDeleted As OQCompletedAcceptedByRowChangeEventHandler
        
        Public Event OQCompletedAcceptedByRowDeleting As OQCompletedAcceptedByRowChangeEventHandler
        
        Public Overloads Sub AddOQCompletedAcceptedByRow(ByVal row As OQCompletedAcceptedByRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOQCompletedAcceptedByRow(ByVal CompletedAcceptedByID As Integer, ByVal CompletedBy As String, ByVal AcceptedBy As String, ByVal CheckStatusIQOQPQ As Single) As OQCompletedAcceptedByRow
            Dim rowOQCompletedAcceptedByRow As OQCompletedAcceptedByRow = CType(Me.NewRow,OQCompletedAcceptedByRow)
            rowOQCompletedAcceptedByRow.ItemArray = New Object() {CompletedAcceptedByID, CompletedBy, AcceptedBy, CheckStatusIQOQPQ}
            Me.Rows.Add(rowOQCompletedAcceptedByRow)
            Return rowOQCompletedAcceptedByRow
        End Function
        
        Public Function FindByCompletedAcceptedByID(ByVal CompletedAcceptedByID As Integer) As OQCompletedAcceptedByRow
            Return CType(Me.Rows.Find(New Object() {CompletedAcceptedByID}),OQCompletedAcceptedByRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OQCompletedAcceptedByDataTable = CType(MyBase.Clone,OQCompletedAcceptedByDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OQCompletedAcceptedByDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCompletedAcceptedByID = Me.Columns("CompletedAcceptedByID")
            Me.columnCompletedBy = Me.Columns("CompletedBy")
            Me.columnAcceptedBy = Me.Columns("AcceptedBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnCompletedAcceptedByID = New DataColumn("CompletedAcceptedByID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompletedAcceptedByID)
            Me.columnCompletedBy = New DataColumn("CompletedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompletedBy)
            Me.columnAcceptedBy = New DataColumn("AcceptedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcceptedBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey9", New DataColumn() {Me.columnCompletedAcceptedByID}, true))
            Me.columnCompletedAcceptedByID.AllowDBNull = false
            Me.columnCompletedAcceptedByID.Unique = true
        End Sub
        
        Public Function NewOQCompletedAcceptedByRow() As OQCompletedAcceptedByRow
            Return CType(Me.NewRow,OQCompletedAcceptedByRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OQCompletedAcceptedByRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OQCompletedAcceptedByRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OQCompletedAcceptedByRowChangedEvent) Is Nothing) Then
                RaiseEvent OQCompletedAcceptedByRowChanged(Me, New OQCompletedAcceptedByRowChangeEvent(CType(e.Row,OQCompletedAcceptedByRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OQCompletedAcceptedByRowChangingEvent) Is Nothing) Then
                RaiseEvent OQCompletedAcceptedByRowChanging(Me, New OQCompletedAcceptedByRowChangeEvent(CType(e.Row,OQCompletedAcceptedByRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OQCompletedAcceptedByRowDeletedEvent) Is Nothing) Then
                RaiseEvent OQCompletedAcceptedByRowDeleted(Me, New OQCompletedAcceptedByRowChangeEvent(CType(e.Row,OQCompletedAcceptedByRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OQCompletedAcceptedByRowDeletingEvent) Is Nothing) Then
                RaiseEvent OQCompletedAcceptedByRowDeleting(Me, New OQCompletedAcceptedByRowChangeEvent(CType(e.Row,OQCompletedAcceptedByRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOQCompletedAcceptedByRow(ByVal row As OQCompletedAcceptedByRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQCompletedAcceptedByRow
        Inherits DataRow
        
        Private tableOQCompletedAcceptedBy As OQCompletedAcceptedByDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOQCompletedAcceptedBy = CType(Me.Table,OQCompletedAcceptedByDataTable)
        End Sub
        
        Public Property CompletedAcceptedByID As Integer
            Get
                Return CType(Me(Me.tableOQCompletedAcceptedBy.CompletedAcceptedByIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOQCompletedAcceptedBy.CompletedAcceptedByIDColumn) = value
            End Set
        End Property
        
        Public Property CompletedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableOQCompletedAcceptedBy.CompletedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQCompletedAcceptedBy.CompletedByColumn) = value
            End Set
        End Property
        
        Public Property AcceptedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableOQCompletedAcceptedBy.AcceptedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQCompletedAcceptedBy.AcceptedByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableOQCompletedAcceptedBy.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQCompletedAcceptedBy.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsCompletedByNull() As Boolean
            Return Me.IsNull(Me.tableOQCompletedAcceptedBy.CompletedByColumn)
        End Function
        
        Public Sub SetCompletedByNull()
            Me(Me.tableOQCompletedAcceptedBy.CompletedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcceptedByNull() As Boolean
            Return Me.IsNull(Me.tableOQCompletedAcceptedBy.AcceptedByColumn)
        End Function
        
        Public Sub SetAcceptedByNull()
            Me(Me.tableOQCompletedAcceptedBy.AcceptedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableOQCompletedAcceptedBy.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableOQCompletedAcceptedBy.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQCompletedAcceptedByRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OQCompletedAcceptedByRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OQCompletedAcceptedByRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OQCompletedAcceptedByRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQDeficiencyCorrectiveActionPlanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDeficiencyCorrectiveActionPlanID As DataColumn
        
        Private columnDetails As DataColumn
        
        Private columnActionPlan As DataColumn
        
        Private columnCorrectiveActionDate As DataColumn
        
        Private columnCorrectiveActionOrBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("OQDeficiencyCorrectiveActionPlan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DeficiencyCorrectiveActionPlanIDColumn As DataColumn
            Get
                Return Me.columnDeficiencyCorrectiveActionPlanID
            End Get
        End Property
        
        Friend ReadOnly Property DetailsColumn As DataColumn
            Get
                Return Me.columnDetails
            End Get
        End Property
        
        Friend ReadOnly Property ActionPlanColumn As DataColumn
            Get
                Return Me.columnActionPlan
            End Get
        End Property
        
        Friend ReadOnly Property CorrectiveActionDateColumn As DataColumn
            Get
                Return Me.columnCorrectiveActionDate
            End Get
        End Property
        
        Friend ReadOnly Property CorrectiveActionOrByColumn As DataColumn
            Get
                Return Me.columnCorrectiveActionOrBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OQDeficiencyCorrectiveActionPlanRow
            Get
                Return CType(Me.Rows(index),OQDeficiencyCorrectiveActionPlanRow)
            End Get
        End Property
        
        Public Event OQDeficiencyCorrectiveActionPlanRowChanged As OQDeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event OQDeficiencyCorrectiveActionPlanRowChanging As OQDeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event OQDeficiencyCorrectiveActionPlanRowDeleted As OQDeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event OQDeficiencyCorrectiveActionPlanRowDeleting As OQDeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Overloads Sub AddOQDeficiencyCorrectiveActionPlanRow(ByVal row As OQDeficiencyCorrectiveActionPlanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOQDeficiencyCorrectiveActionPlanRow(ByVal DeficiencyCorrectiveActionPlanID As Integer, ByVal Details As String, ByVal ActionPlan As String, ByVal CorrectiveActionDate As Date, ByVal CorrectiveActionOrBy As String, ByVal CheckStatusIQOQPQ As Single) As OQDeficiencyCorrectiveActionPlanRow
            Dim rowOQDeficiencyCorrectiveActionPlanRow As OQDeficiencyCorrectiveActionPlanRow = CType(Me.NewRow,OQDeficiencyCorrectiveActionPlanRow)
            rowOQDeficiencyCorrectiveActionPlanRow.ItemArray = New Object() {DeficiencyCorrectiveActionPlanID, Details, ActionPlan, CorrectiveActionDate, CorrectiveActionOrBy, CheckStatusIQOQPQ}
            Me.Rows.Add(rowOQDeficiencyCorrectiveActionPlanRow)
            Return rowOQDeficiencyCorrectiveActionPlanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OQDeficiencyCorrectiveActionPlanDataTable = CType(MyBase.Clone,OQDeficiencyCorrectiveActionPlanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OQDeficiencyCorrectiveActionPlanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDeficiencyCorrectiveActionPlanID = Me.Columns("DeficiencyCorrectiveActionPlanID")
            Me.columnDetails = Me.Columns("Details")
            Me.columnActionPlan = Me.Columns("ActionPlan")
            Me.columnCorrectiveActionDate = Me.Columns("CorrectiveActionDate")
            Me.columnCorrectiveActionOrBy = Me.Columns("CorrectiveActionOrBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnDeficiencyCorrectiveActionPlanID = New DataColumn("DeficiencyCorrectiveActionPlanID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeficiencyCorrectiveActionPlanID)
            Me.columnDetails = New DataColumn("Details", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails)
            Me.columnActionPlan = New DataColumn("ActionPlan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActionPlan)
            Me.columnCorrectiveActionDate = New DataColumn("CorrectiveActionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorrectiveActionDate)
            Me.columnCorrectiveActionOrBy = New DataColumn("CorrectiveActionOrBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorrectiveActionOrBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
        End Sub
        
        Public Function NewOQDeficiencyCorrectiveActionPlanRow() As OQDeficiencyCorrectiveActionPlanRow
            Return CType(Me.NewRow,OQDeficiencyCorrectiveActionPlanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OQDeficiencyCorrectiveActionPlanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OQDeficiencyCorrectiveActionPlanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OQDeficiencyCorrectiveActionPlanRowChangedEvent) Is Nothing) Then
                RaiseEvent OQDeficiencyCorrectiveActionPlanRowChanged(Me, New OQDeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,OQDeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OQDeficiencyCorrectiveActionPlanRowChangingEvent) Is Nothing) Then
                RaiseEvent OQDeficiencyCorrectiveActionPlanRowChanging(Me, New OQDeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,OQDeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OQDeficiencyCorrectiveActionPlanRowDeletedEvent) Is Nothing) Then
                RaiseEvent OQDeficiencyCorrectiveActionPlanRowDeleted(Me, New OQDeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,OQDeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OQDeficiencyCorrectiveActionPlanRowDeletingEvent) Is Nothing) Then
                RaiseEvent OQDeficiencyCorrectiveActionPlanRowDeleting(Me, New OQDeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,OQDeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOQDeficiencyCorrectiveActionPlanRow(ByVal row As OQDeficiencyCorrectiveActionPlanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQDeficiencyCorrectiveActionPlanRow
        Inherits DataRow
        
        Private tableOQDeficiencyCorrectiveActionPlan As OQDeficiencyCorrectiveActionPlanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOQDeficiencyCorrectiveActionPlan = CType(Me.Table,OQDeficiencyCorrectiveActionPlanDataTable)
        End Sub
        
        Public Property DeficiencyCorrectiveActionPlanID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOQDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn) = value
            End Set
        End Property
        
        Public Property Details As String
            Get
                Try 
                    Return CType(Me(Me.tableOQDeficiencyCorrectiveActionPlan.DetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQDeficiencyCorrectiveActionPlan.DetailsColumn) = value
            End Set
        End Property
        
        Public Property ActionPlan As String
            Get
                Try 
                    Return CType(Me(Me.tableOQDeficiencyCorrectiveActionPlan.ActionPlanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQDeficiencyCorrectiveActionPlan.ActionPlanColumn) = value
            End Set
        End Property
        
        Public Property CorrectiveActionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableOQDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn) = value
            End Set
        End Property
        
        Public Property CorrectiveActionOrBy As String
            Get
                Try 
                    Return CType(Me(Me.tableOQDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableOQDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsDeficiencyCorrectiveActionPlanIDNull() As Boolean
            Return Me.IsNull(Me.tableOQDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn)
        End Function
        
        Public Sub SetDeficiencyCorrectiveActionPlanIDNull()
            Me(Me.tableOQDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetailsNull() As Boolean
            Return Me.IsNull(Me.tableOQDeficiencyCorrectiveActionPlan.DetailsColumn)
        End Function
        
        Public Sub SetDetailsNull()
            Me(Me.tableOQDeficiencyCorrectiveActionPlan.DetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsActionPlanNull() As Boolean
            Return Me.IsNull(Me.tableOQDeficiencyCorrectiveActionPlan.ActionPlanColumn)
        End Function
        
        Public Sub SetActionPlanNull()
            Me(Me.tableOQDeficiencyCorrectiveActionPlan.ActionPlanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorrectiveActionDateNull() As Boolean
            Return Me.IsNull(Me.tableOQDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn)
        End Function
        
        Public Sub SetCorrectiveActionDateNull()
            Me(Me.tableOQDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorrectiveActionOrByNull() As Boolean
            Return Me.IsNull(Me.tableOQDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn)
        End Function
        
        Public Sub SetCorrectiveActionOrByNull()
            Me(Me.tableOQDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableOQDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableOQDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQDeficiencyCorrectiveActionPlanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OQDeficiencyCorrectiveActionPlanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OQDeficiencyCorrectiveActionPlanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OQDeficiencyCorrectiveActionPlanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQEquipmentListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEquipmentListID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnSerialNo As DataColumn
        
        Private columnCheckedBy As DataColumn
        
        Private columnVerifiedBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Private columnModelNo As DataColumn
        
        Friend Sub New()
            MyBase.New("OQEquipmentList")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EquipmentListIDColumn As DataColumn
            Get
                Return Me.columnEquipmentListID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property SerialNoColumn As DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        Friend ReadOnly Property CheckedByColumn As DataColumn
            Get
                Return Me.columnCheckedBy
            End Get
        End Property
        
        Friend ReadOnly Property VerifiedByColumn As DataColumn
            Get
                Return Me.columnVerifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Friend ReadOnly Property ModelNoColumn As DataColumn
            Get
                Return Me.columnModelNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OQEquipmentListRow
            Get
                Return CType(Me.Rows(index),OQEquipmentListRow)
            End Get
        End Property
        
        Public Event OQEquipmentListRowChanged As OQEquipmentListRowChangeEventHandler
        
        Public Event OQEquipmentListRowChanging As OQEquipmentListRowChangeEventHandler
        
        Public Event OQEquipmentListRowDeleted As OQEquipmentListRowChangeEventHandler
        
        Public Event OQEquipmentListRowDeleting As OQEquipmentListRowChangeEventHandler
        
        Public Overloads Sub AddOQEquipmentListRow(ByVal row As OQEquipmentListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOQEquipmentListRow(ByVal EquipmentListID As Integer, ByVal Name As String, ByVal SerialNo As String, ByVal CheckedBy As String, ByVal VerifiedBy As String, ByVal CheckStatusIQOQPQ As Single, ByVal ModelNo As String) As OQEquipmentListRow
            Dim rowOQEquipmentListRow As OQEquipmentListRow = CType(Me.NewRow,OQEquipmentListRow)
            rowOQEquipmentListRow.ItemArray = New Object() {EquipmentListID, Name, SerialNo, CheckedBy, VerifiedBy, CheckStatusIQOQPQ, ModelNo}
            Me.Rows.Add(rowOQEquipmentListRow)
            Return rowOQEquipmentListRow
        End Function
        
        Public Function FindByEquipmentListID(ByVal EquipmentListID As Integer) As OQEquipmentListRow
            Return CType(Me.Rows.Find(New Object() {EquipmentListID}),OQEquipmentListRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OQEquipmentListDataTable = CType(MyBase.Clone,OQEquipmentListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OQEquipmentListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEquipmentListID = Me.Columns("EquipmentListID")
            Me.columnName = Me.Columns("Name")
            Me.columnSerialNo = Me.Columns("SerialNo")
            Me.columnCheckedBy = Me.Columns("CheckedBy")
            Me.columnVerifiedBy = Me.Columns("VerifiedBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
            Me.columnModelNo = Me.Columns("ModelNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnEquipmentListID = New DataColumn("EquipmentListID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEquipmentListID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnSerialNo = New DataColumn("SerialNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSerialNo)
            Me.columnCheckedBy = New DataColumn("CheckedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckedBy)
            Me.columnVerifiedBy = New DataColumn("VerifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVerifiedBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.columnModelNo = New DataColumn("ModelNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModelNo)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey11", New DataColumn() {Me.columnEquipmentListID}, true))
            Me.columnEquipmentListID.AllowDBNull = false
            Me.columnEquipmentListID.Unique = true
        End Sub
        
        Public Function NewOQEquipmentListRow() As OQEquipmentListRow
            Return CType(Me.NewRow,OQEquipmentListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OQEquipmentListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OQEquipmentListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OQEquipmentListRowChangedEvent) Is Nothing) Then
                RaiseEvent OQEquipmentListRowChanged(Me, New OQEquipmentListRowChangeEvent(CType(e.Row,OQEquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OQEquipmentListRowChangingEvent) Is Nothing) Then
                RaiseEvent OQEquipmentListRowChanging(Me, New OQEquipmentListRowChangeEvent(CType(e.Row,OQEquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OQEquipmentListRowDeletedEvent) Is Nothing) Then
                RaiseEvent OQEquipmentListRowDeleted(Me, New OQEquipmentListRowChangeEvent(CType(e.Row,OQEquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OQEquipmentListRowDeletingEvent) Is Nothing) Then
                RaiseEvent OQEquipmentListRowDeleting(Me, New OQEquipmentListRowChangeEvent(CType(e.Row,OQEquipmentListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOQEquipmentListRow(ByVal row As OQEquipmentListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQEquipmentListRow
        Inherits DataRow
        
        Private tableOQEquipmentList As OQEquipmentListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOQEquipmentList = CType(Me.Table,OQEquipmentListDataTable)
        End Sub
        
        Public Property EquipmentListID As Integer
            Get
                Return CType(Me(Me.tableOQEquipmentList.EquipmentListIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOQEquipmentList.EquipmentListIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableOQEquipmentList.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQEquipmentList.NameColumn) = value
            End Set
        End Property
        
        Public Property SerialNo As String
            Get
                Try 
                    Return CType(Me(Me.tableOQEquipmentList.SerialNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQEquipmentList.SerialNoColumn) = value
            End Set
        End Property
        
        Public Property CheckedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableOQEquipmentList.CheckedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQEquipmentList.CheckedByColumn) = value
            End Set
        End Property
        
        Public Property VerifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableOQEquipmentList.VerifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQEquipmentList.VerifiedByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableOQEquipmentList.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQEquipmentList.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Property ModelNo As String
            Get
                Try 
                    Return CType(Me(Me.tableOQEquipmentList.ModelNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQEquipmentList.ModelNoColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableOQEquipmentList.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableOQEquipmentList.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tableOQEquipmentList.SerialNoColumn)
        End Function
        
        Public Sub SetSerialNoNull()
            Me(Me.tableOQEquipmentList.SerialNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckedByNull() As Boolean
            Return Me.IsNull(Me.tableOQEquipmentList.CheckedByColumn)
        End Function
        
        Public Sub SetCheckedByNull()
            Me(Me.tableOQEquipmentList.CheckedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVerifiedByNull() As Boolean
            Return Me.IsNull(Me.tableOQEquipmentList.VerifiedByColumn)
        End Function
        
        Public Sub SetVerifiedByNull()
            Me(Me.tableOQEquipmentList.VerifiedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableOQEquipmentList.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableOQEquipmentList.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModelNoNull() As Boolean
            Return Me.IsNull(Me.tableOQEquipmentList.ModelNoColumn)
        End Function
        
        Public Sub SetModelNoNull()
            Me(Me.tableOQEquipmentList.ModelNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQEquipmentListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OQEquipmentListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OQEquipmentListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OQEquipmentListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQManufacturerRepresentativeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnManufacturerRepresentativeID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnCompany As DataColumn
        
        Private columnManDate As DataColumn
        
        Private columnJointFunctionalArea As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("OQManufacturerRepresentative")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ManufacturerRepresentativeIDColumn As DataColumn
            Get
                Return Me.columnManufacturerRepresentativeID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property CompanyColumn As DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Friend ReadOnly Property ManDateColumn As DataColumn
            Get
                Return Me.columnManDate
            End Get
        End Property
        
        Friend ReadOnly Property JointFunctionalAreaColumn As DataColumn
            Get
                Return Me.columnJointFunctionalArea
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OQManufacturerRepresentativeRow
            Get
                Return CType(Me.Rows(index),OQManufacturerRepresentativeRow)
            End Get
        End Property
        
        Public Event OQManufacturerRepresentativeRowChanged As OQManufacturerRepresentativeRowChangeEventHandler
        
        Public Event OQManufacturerRepresentativeRowChanging As OQManufacturerRepresentativeRowChangeEventHandler
        
        Public Event OQManufacturerRepresentativeRowDeleted As OQManufacturerRepresentativeRowChangeEventHandler
        
        Public Event OQManufacturerRepresentativeRowDeleting As OQManufacturerRepresentativeRowChangeEventHandler
        
        Public Overloads Sub AddOQManufacturerRepresentativeRow(ByVal row As OQManufacturerRepresentativeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOQManufacturerRepresentativeRow(ByVal ManufacturerRepresentativeID As Integer, ByVal Name As String, ByVal Designation As String, ByVal Company As String, ByVal ManDate As Date, ByVal JointFunctionalArea As String, ByVal CheckStatusIQOQPQ As Single) As OQManufacturerRepresentativeRow
            Dim rowOQManufacturerRepresentativeRow As OQManufacturerRepresentativeRow = CType(Me.NewRow,OQManufacturerRepresentativeRow)
            rowOQManufacturerRepresentativeRow.ItemArray = New Object() {ManufacturerRepresentativeID, Name, Designation, Company, ManDate, JointFunctionalArea, CheckStatusIQOQPQ}
            Me.Rows.Add(rowOQManufacturerRepresentativeRow)
            Return rowOQManufacturerRepresentativeRow
        End Function
        
        Public Function FindByManufacturerRepresentativeID(ByVal ManufacturerRepresentativeID As Integer) As OQManufacturerRepresentativeRow
            Return CType(Me.Rows.Find(New Object() {ManufacturerRepresentativeID}),OQManufacturerRepresentativeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OQManufacturerRepresentativeDataTable = CType(MyBase.Clone,OQManufacturerRepresentativeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OQManufacturerRepresentativeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnManufacturerRepresentativeID = Me.Columns("ManufacturerRepresentativeID")
            Me.columnName = Me.Columns("Name")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnCompany = Me.Columns("Company")
            Me.columnManDate = Me.Columns("ManDate")
            Me.columnJointFunctionalArea = Me.Columns("JointFunctionalArea")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnManufacturerRepresentativeID = New DataColumn("ManufacturerRepresentativeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManufacturerRepresentativeID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnCompany = New DataColumn("Company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompany)
            Me.columnManDate = New DataColumn("ManDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManDate)
            Me.columnJointFunctionalArea = New DataColumn("JointFunctionalArea", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJointFunctionalArea)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey12", New DataColumn() {Me.columnManufacturerRepresentativeID}, true))
            Me.columnManufacturerRepresentativeID.AllowDBNull = false
            Me.columnManufacturerRepresentativeID.Unique = true
        End Sub
        
        Public Function NewOQManufacturerRepresentativeRow() As OQManufacturerRepresentativeRow
            Return CType(Me.NewRow,OQManufacturerRepresentativeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OQManufacturerRepresentativeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OQManufacturerRepresentativeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OQManufacturerRepresentativeRowChangedEvent) Is Nothing) Then
                RaiseEvent OQManufacturerRepresentativeRowChanged(Me, New OQManufacturerRepresentativeRowChangeEvent(CType(e.Row,OQManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OQManufacturerRepresentativeRowChangingEvent) Is Nothing) Then
                RaiseEvent OQManufacturerRepresentativeRowChanging(Me, New OQManufacturerRepresentativeRowChangeEvent(CType(e.Row,OQManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OQManufacturerRepresentativeRowDeletedEvent) Is Nothing) Then
                RaiseEvent OQManufacturerRepresentativeRowDeleted(Me, New OQManufacturerRepresentativeRowChangeEvent(CType(e.Row,OQManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OQManufacturerRepresentativeRowDeletingEvent) Is Nothing) Then
                RaiseEvent OQManufacturerRepresentativeRowDeleting(Me, New OQManufacturerRepresentativeRowChangeEvent(CType(e.Row,OQManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOQManufacturerRepresentativeRow(ByVal row As OQManufacturerRepresentativeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQManufacturerRepresentativeRow
        Inherits DataRow
        
        Private tableOQManufacturerRepresentative As OQManufacturerRepresentativeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOQManufacturerRepresentative = CType(Me.Table,OQManufacturerRepresentativeDataTable)
        End Sub
        
        Public Property ManufacturerRepresentativeID As Integer
            Get
                Return CType(Me(Me.tableOQManufacturerRepresentative.ManufacturerRepresentativeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOQManufacturerRepresentative.ManufacturerRepresentativeIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableOQManufacturerRepresentative.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQManufacturerRepresentative.NameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tableOQManufacturerRepresentative.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQManufacturerRepresentative.DesignationColumn) = value
            End Set
        End Property
        
        Public Property Company As String
            Get
                Try 
                    Return CType(Me(Me.tableOQManufacturerRepresentative.CompanyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQManufacturerRepresentative.CompanyColumn) = value
            End Set
        End Property
        
        Public Property ManDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableOQManufacturerRepresentative.ManDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQManufacturerRepresentative.ManDateColumn) = value
            End Set
        End Property
        
        Public Property JointFunctionalArea As String
            Get
                Try 
                    Return CType(Me(Me.tableOQManufacturerRepresentative.JointFunctionalAreaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQManufacturerRepresentative.JointFunctionalAreaColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableOQManufacturerRepresentative.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQManufacturerRepresentative.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableOQManufacturerRepresentative.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableOQManufacturerRepresentative.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tableOQManufacturerRepresentative.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tableOQManufacturerRepresentative.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableOQManufacturerRepresentative.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tableOQManufacturerRepresentative.CompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsManDateNull() As Boolean
            Return Me.IsNull(Me.tableOQManufacturerRepresentative.ManDateColumn)
        End Function
        
        Public Sub SetManDateNull()
            Me(Me.tableOQManufacturerRepresentative.ManDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJointFunctionalAreaNull() As Boolean
            Return Me.IsNull(Me.tableOQManufacturerRepresentative.JointFunctionalAreaColumn)
        End Function
        
        Public Sub SetJointFunctionalAreaNull()
            Me(Me.tableOQManufacturerRepresentative.JointFunctionalAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableOQManufacturerRepresentative.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableOQManufacturerRepresentative.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQManufacturerRepresentativeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OQManufacturerRepresentativeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OQManufacturerRepresentativeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OQManufacturerRepresentativeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQTestDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOQTestID As DataColumn
        
        Private columnOQTestName As DataColumn
        
        Private columnOQObservation As DataColumn
        
        Private columnOQDemoDate As DataColumn
        
        Private columnOQVerifiedDate As DataColumn
        
        Friend Sub New()
            MyBase.New("OQTest")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property OQTestIDColumn As DataColumn
            Get
                Return Me.columnOQTestID
            End Get
        End Property
        
        Friend ReadOnly Property OQTestNameColumn As DataColumn
            Get
                Return Me.columnOQTestName
            End Get
        End Property
        
        Friend ReadOnly Property OQObservationColumn As DataColumn
            Get
                Return Me.columnOQObservation
            End Get
        End Property
        
        Friend ReadOnly Property OQDemoDateColumn As DataColumn
            Get
                Return Me.columnOQDemoDate
            End Get
        End Property
        
        Friend ReadOnly Property OQVerifiedDateColumn As DataColumn
            Get
                Return Me.columnOQVerifiedDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OQTestRow
            Get
                Return CType(Me.Rows(index),OQTestRow)
            End Get
        End Property
        
        Public Event OQTestRowChanged As OQTestRowChangeEventHandler
        
        Public Event OQTestRowChanging As OQTestRowChangeEventHandler
        
        Public Event OQTestRowDeleted As OQTestRowChangeEventHandler
        
        Public Event OQTestRowDeleting As OQTestRowChangeEventHandler
        
        Public Overloads Sub AddOQTestRow(ByVal row As OQTestRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOQTestRow(ByVal OQTestID As Integer, ByVal OQTestName As String, ByVal OQObservation As String, ByVal OQDemoDate As Date, ByVal OQVerifiedDate As Date) As OQTestRow
            Dim rowOQTestRow As OQTestRow = CType(Me.NewRow,OQTestRow)
            rowOQTestRow.ItemArray = New Object() {OQTestID, OQTestName, OQObservation, OQDemoDate, OQVerifiedDate}
            Me.Rows.Add(rowOQTestRow)
            Return rowOQTestRow
        End Function
        
        Public Function FindByOQTestID(ByVal OQTestID As Integer) As OQTestRow
            Return CType(Me.Rows.Find(New Object() {OQTestID}),OQTestRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OQTestDataTable = CType(MyBase.Clone,OQTestDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OQTestDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnOQTestID = Me.Columns("OQTestID")
            Me.columnOQTestName = Me.Columns("OQTestName")
            Me.columnOQObservation = Me.Columns("OQObservation")
            Me.columnOQDemoDate = Me.Columns("OQDemoDate")
            Me.columnOQVerifiedDate = Me.Columns("OQVerifiedDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnOQTestID = New DataColumn("OQTestID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOQTestID)
            Me.columnOQTestName = New DataColumn("OQTestName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOQTestName)
            Me.columnOQObservation = New DataColumn("OQObservation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOQObservation)
            Me.columnOQDemoDate = New DataColumn("OQDemoDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOQDemoDate)
            Me.columnOQVerifiedDate = New DataColumn("OQVerifiedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOQVerifiedDate)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey13", New DataColumn() {Me.columnOQTestID}, true))
            Me.columnOQTestID.AllowDBNull = false
            Me.columnOQTestID.Unique = true
        End Sub
        
        Public Function NewOQTestRow() As OQTestRow
            Return CType(Me.NewRow,OQTestRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OQTestRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OQTestRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OQTestRowChangedEvent) Is Nothing) Then
                RaiseEvent OQTestRowChanged(Me, New OQTestRowChangeEvent(CType(e.Row,OQTestRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OQTestRowChangingEvent) Is Nothing) Then
                RaiseEvent OQTestRowChanging(Me, New OQTestRowChangeEvent(CType(e.Row,OQTestRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OQTestRowDeletedEvent) Is Nothing) Then
                RaiseEvent OQTestRowDeleted(Me, New OQTestRowChangeEvent(CType(e.Row,OQTestRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OQTestRowDeletingEvent) Is Nothing) Then
                RaiseEvent OQTestRowDeleting(Me, New OQTestRowChangeEvent(CType(e.Row,OQTestRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOQTestRow(ByVal row As OQTestRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQTestRow
        Inherits DataRow
        
        Private tableOQTest As OQTestDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOQTest = CType(Me.Table,OQTestDataTable)
        End Sub
        
        Public Property OQTestID As Integer
            Get
                Return CType(Me(Me.tableOQTest.OQTestIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOQTest.OQTestIDColumn) = value
            End Set
        End Property
        
        Public Property OQTestName As String
            Get
                Try 
                    Return CType(Me(Me.tableOQTest.OQTestNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQTest.OQTestNameColumn) = value
            End Set
        End Property
        
        Public Property OQObservation As String
            Get
                Try 
                    Return CType(Me(Me.tableOQTest.OQObservationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQTest.OQObservationColumn) = value
            End Set
        End Property
        
        Public Property OQDemoDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableOQTest.OQDemoDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQTest.OQDemoDateColumn) = value
            End Set
        End Property
        
        Public Property OQVerifiedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableOQTest.OQVerifiedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQTest.OQVerifiedDateColumn) = value
            End Set
        End Property
        
        Public Function IsOQTestNameNull() As Boolean
            Return Me.IsNull(Me.tableOQTest.OQTestNameColumn)
        End Function
        
        Public Sub SetOQTestNameNull()
            Me(Me.tableOQTest.OQTestNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOQObservationNull() As Boolean
            Return Me.IsNull(Me.tableOQTest.OQObservationColumn)
        End Function
        
        Public Sub SetOQObservationNull()
            Me(Me.tableOQTest.OQObservationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOQDemoDateNull() As Boolean
            Return Me.IsNull(Me.tableOQTest.OQDemoDateColumn)
        End Function
        
        Public Sub SetOQDemoDateNull()
            Me(Me.tableOQTest.OQDemoDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOQVerifiedDateNull() As Boolean
            Return Me.IsNull(Me.tableOQTest.OQVerifiedDateColumn)
        End Function
        
        Public Sub SetOQVerifiedDateNull()
            Me(Me.tableOQTest.OQVerifiedDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQTestRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OQTestRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OQTestRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OQTestRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQUserTrainingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTrainingID As DataColumn
        
        Private columnTrainingType As DataColumn
        
        Private columnTrainingGiven As DataColumn
        
        Private columnTrainingComments As DataColumn
        
        Friend Sub New()
            MyBase.New("OQUserTraining")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TrainingIDColumn As DataColumn
            Get
                Return Me.columnTrainingID
            End Get
        End Property
        
        Friend ReadOnly Property TrainingTypeColumn As DataColumn
            Get
                Return Me.columnTrainingType
            End Get
        End Property
        
        Friend ReadOnly Property TrainingGivenColumn As DataColumn
            Get
                Return Me.columnTrainingGiven
            End Get
        End Property
        
        Friend ReadOnly Property TrainingCommentsColumn As DataColumn
            Get
                Return Me.columnTrainingComments
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OQUserTrainingRow
            Get
                Return CType(Me.Rows(index),OQUserTrainingRow)
            End Get
        End Property
        
        Public Event OQUserTrainingRowChanged As OQUserTrainingRowChangeEventHandler
        
        Public Event OQUserTrainingRowChanging As OQUserTrainingRowChangeEventHandler
        
        Public Event OQUserTrainingRowDeleted As OQUserTrainingRowChangeEventHandler
        
        Public Event OQUserTrainingRowDeleting As OQUserTrainingRowChangeEventHandler
        
        Public Overloads Sub AddOQUserTrainingRow(ByVal row As OQUserTrainingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOQUserTrainingRow(ByVal TrainingID As Integer, ByVal TrainingType As String, ByVal TrainingGiven As String, ByVal TrainingComments As String) As OQUserTrainingRow
            Dim rowOQUserTrainingRow As OQUserTrainingRow = CType(Me.NewRow,OQUserTrainingRow)
            rowOQUserTrainingRow.ItemArray = New Object() {TrainingID, TrainingType, TrainingGiven, TrainingComments}
            Me.Rows.Add(rowOQUserTrainingRow)
            Return rowOQUserTrainingRow
        End Function
        
        Public Function FindByTrainingID(ByVal TrainingID As Integer) As OQUserTrainingRow
            Return CType(Me.Rows.Find(New Object() {TrainingID}),OQUserTrainingRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OQUserTrainingDataTable = CType(MyBase.Clone,OQUserTrainingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OQUserTrainingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTrainingID = Me.Columns("TrainingID")
            Me.columnTrainingType = Me.Columns("TrainingType")
            Me.columnTrainingGiven = Me.Columns("TrainingGiven")
            Me.columnTrainingComments = Me.Columns("TrainingComments")
        End Sub
        
        Private Sub InitClass()
            Me.columnTrainingID = New DataColumn("TrainingID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrainingID)
            Me.columnTrainingType = New DataColumn("TrainingType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrainingType)
            Me.columnTrainingGiven = New DataColumn("TrainingGiven", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrainingGiven)
            Me.columnTrainingComments = New DataColumn("TrainingComments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrainingComments)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey15", New DataColumn() {Me.columnTrainingID}, true))
            Me.columnTrainingID.AllowDBNull = false
            Me.columnTrainingID.Unique = true
        End Sub
        
        Public Function NewOQUserTrainingRow() As OQUserTrainingRow
            Return CType(Me.NewRow,OQUserTrainingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OQUserTrainingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OQUserTrainingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OQUserTrainingRowChangedEvent) Is Nothing) Then
                RaiseEvent OQUserTrainingRowChanged(Me, New OQUserTrainingRowChangeEvent(CType(e.Row,OQUserTrainingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OQUserTrainingRowChangingEvent) Is Nothing) Then
                RaiseEvent OQUserTrainingRowChanging(Me, New OQUserTrainingRowChangeEvent(CType(e.Row,OQUserTrainingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OQUserTrainingRowDeletedEvent) Is Nothing) Then
                RaiseEvent OQUserTrainingRowDeleted(Me, New OQUserTrainingRowChangeEvent(CType(e.Row,OQUserTrainingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OQUserTrainingRowDeletingEvent) Is Nothing) Then
                RaiseEvent OQUserTrainingRowDeleting(Me, New OQUserTrainingRowChangeEvent(CType(e.Row,OQUserTrainingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOQUserTrainingRow(ByVal row As OQUserTrainingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQUserTrainingRow
        Inherits DataRow
        
        Private tableOQUserTraining As OQUserTrainingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOQUserTraining = CType(Me.Table,OQUserTrainingDataTable)
        End Sub
        
        Public Property TrainingID As Integer
            Get
                Return CType(Me(Me.tableOQUserTraining.TrainingIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOQUserTraining.TrainingIDColumn) = value
            End Set
        End Property
        
        Public Property TrainingType As String
            Get
                Try 
                    Return CType(Me(Me.tableOQUserTraining.TrainingTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQUserTraining.TrainingTypeColumn) = value
            End Set
        End Property
        
        Public Property TrainingGiven As String
            Get
                Try 
                    Return CType(Me(Me.tableOQUserTraining.TrainingGivenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQUserTraining.TrainingGivenColumn) = value
            End Set
        End Property
        
        Public Property TrainingComments As String
            Get
                Try 
                    Return CType(Me(Me.tableOQUserTraining.TrainingCommentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQUserTraining.TrainingCommentsColumn) = value
            End Set
        End Property
        
        Public Function IsTrainingTypeNull() As Boolean
            Return Me.IsNull(Me.tableOQUserTraining.TrainingTypeColumn)
        End Function
        
        Public Sub SetTrainingTypeNull()
            Me(Me.tableOQUserTraining.TrainingTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTrainingGivenNull() As Boolean
            Return Me.IsNull(Me.tableOQUserTraining.TrainingGivenColumn)
        End Function
        
        Public Sub SetTrainingGivenNull()
            Me(Me.tableOQUserTraining.TrainingGivenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTrainingCommentsNull() As Boolean
            Return Me.IsNull(Me.tableOQUserTraining.TrainingCommentsColumn)
        End Function
        
        Public Sub SetTrainingCommentsNull()
            Me(Me.tableOQUserTraining.TrainingCommentsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQUserTrainingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OQUserTrainingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OQUserTrainingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OQUserTrainingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQUserDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserID As DataColumn
        
        Private columnUserName As DataColumn
        
        Private columnUserDate As DataColumn
        
        Friend Sub New()
            MyBase.New("OQUser")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserIDColumn As DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        Friend ReadOnly Property UserNameColumn As DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        Friend ReadOnly Property UserDateColumn As DataColumn
            Get
                Return Me.columnUserDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OQUserRow
            Get
                Return CType(Me.Rows(index),OQUserRow)
            End Get
        End Property
        
        Public Event OQUserRowChanged As OQUserRowChangeEventHandler
        
        Public Event OQUserRowChanging As OQUserRowChangeEventHandler
        
        Public Event OQUserRowDeleted As OQUserRowChangeEventHandler
        
        Public Event OQUserRowDeleting As OQUserRowChangeEventHandler
        
        Public Overloads Sub AddOQUserRow(ByVal row As OQUserRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOQUserRow(ByVal UserID As Integer, ByVal UserName As String, ByVal UserDate As Date) As OQUserRow
            Dim rowOQUserRow As OQUserRow = CType(Me.NewRow,OQUserRow)
            rowOQUserRow.ItemArray = New Object() {UserID, UserName, UserDate}
            Me.Rows.Add(rowOQUserRow)
            Return rowOQUserRow
        End Function
        
        Public Function FindByUserID(ByVal UserID As Integer) As OQUserRow
            Return CType(Me.Rows.Find(New Object() {UserID}),OQUserRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OQUserDataTable = CType(MyBase.Clone,OQUserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OQUserDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserID = Me.Columns("UserID")
            Me.columnUserName = Me.Columns("UserName")
            Me.columnUserDate = Me.Columns("UserDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserID = New DataColumn("UserID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserID)
            Me.columnUserName = New DataColumn("UserName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserName)
            Me.columnUserDate = New DataColumn("UserDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserDate)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey10", New DataColumn() {Me.columnUserID}, true))
            Me.columnUserID.AllowDBNull = false
            Me.columnUserID.Unique = true
        End Sub
        
        Public Function NewOQUserRow() As OQUserRow
            Return CType(Me.NewRow,OQUserRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OQUserRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OQUserRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OQUserRowChangedEvent) Is Nothing) Then
                RaiseEvent OQUserRowChanged(Me, New OQUserRowChangeEvent(CType(e.Row,OQUserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OQUserRowChangingEvent) Is Nothing) Then
                RaiseEvent OQUserRowChanging(Me, New OQUserRowChangeEvent(CType(e.Row,OQUserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OQUserRowDeletedEvent) Is Nothing) Then
                RaiseEvent OQUserRowDeleted(Me, New OQUserRowChangeEvent(CType(e.Row,OQUserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OQUserRowDeletingEvent) Is Nothing) Then
                RaiseEvent OQUserRowDeleting(Me, New OQUserRowChangeEvent(CType(e.Row,OQUserRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOQUserRow(ByVal row As OQUserRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQUserRow
        Inherits DataRow
        
        Private tableOQUser As OQUserDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOQUser = CType(Me.Table,OQUserDataTable)
        End Sub
        
        Public Property UserID As Integer
            Get
                Return CType(Me(Me.tableOQUser.UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOQUser.UserIDColumn) = value
            End Set
        End Property
        
        Public Property UserName As String
            Get
                Try 
                    Return CType(Me(Me.tableOQUser.UserNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQUser.UserNameColumn) = value
            End Set
        End Property
        
        Public Property UserDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableOQUser.UserDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQUser.UserDateColumn) = value
            End Set
        End Property
        
        Public Function IsUserNameNull() As Boolean
            Return Me.IsNull(Me.tableOQUser.UserNameColumn)
        End Function
        
        Public Sub SetUserNameNull()
            Me(Me.tableOQUser.UserNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserDateNull() As Boolean
            Return Me.IsNull(Me.tableOQUser.UserDateColumn)
        End Function
        
        Public Sub SetUserDateNull()
            Me(Me.tableOQUser.UserDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQUserRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OQUserRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OQUserRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OQUserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQCustomerRepresentativeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerRepresentativeID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnCustDate As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Private columnFunctionalArea As DataColumn
        
        Friend Sub New()
            MyBase.New("OQCustomerRepresentative")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerRepresentativeIDColumn As DataColumn
            Get
                Return Me.columnCustomerRepresentativeID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property CustDateColumn As DataColumn
            Get
                Return Me.columnCustDate
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Friend ReadOnly Property FunctionalAreaColumn As DataColumn
            Get
                Return Me.columnFunctionalArea
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OQCustomerRepresentativeRow
            Get
                Return CType(Me.Rows(index),OQCustomerRepresentativeRow)
            End Get
        End Property
        
        Public Event OQCustomerRepresentativeRowChanged As OQCustomerRepresentativeRowChangeEventHandler
        
        Public Event OQCustomerRepresentativeRowChanging As OQCustomerRepresentativeRowChangeEventHandler
        
        Public Event OQCustomerRepresentativeRowDeleted As OQCustomerRepresentativeRowChangeEventHandler
        
        Public Event OQCustomerRepresentativeRowDeleting As OQCustomerRepresentativeRowChangeEventHandler
        
        Public Overloads Sub AddOQCustomerRepresentativeRow(ByVal row As OQCustomerRepresentativeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOQCustomerRepresentativeRow(ByVal CustomerRepresentativeID As Integer, ByVal Name As String, ByVal Designation As String, ByVal CustDate As Date, ByVal CheckStatusIQOQPQ As Single, ByVal FunctionalArea As String) As OQCustomerRepresentativeRow
            Dim rowOQCustomerRepresentativeRow As OQCustomerRepresentativeRow = CType(Me.NewRow,OQCustomerRepresentativeRow)
            rowOQCustomerRepresentativeRow.ItemArray = New Object() {CustomerRepresentativeID, Name, Designation, CustDate, CheckStatusIQOQPQ, FunctionalArea}
            Me.Rows.Add(rowOQCustomerRepresentativeRow)
            Return rowOQCustomerRepresentativeRow
        End Function
        
        Public Function FindByCustomerRepresentativeID(ByVal CustomerRepresentativeID As Integer) As OQCustomerRepresentativeRow
            Return CType(Me.Rows.Find(New Object() {CustomerRepresentativeID}),OQCustomerRepresentativeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OQCustomerRepresentativeDataTable = CType(MyBase.Clone,OQCustomerRepresentativeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OQCustomerRepresentativeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerRepresentativeID = Me.Columns("CustomerRepresentativeID")
            Me.columnName = Me.Columns("Name")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnCustDate = Me.Columns("CustDate")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
            Me.columnFunctionalArea = Me.Columns("FunctionalArea")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerRepresentativeID = New DataColumn("CustomerRepresentativeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerRepresentativeID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnCustDate = New DataColumn("CustDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustDate)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.columnFunctionalArea = New DataColumn("FunctionalArea", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFunctionalArea)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey14", New DataColumn() {Me.columnCustomerRepresentativeID}, true))
            Me.columnCustomerRepresentativeID.AllowDBNull = false
            Me.columnCustomerRepresentativeID.Unique = true
        End Sub
        
        Public Function NewOQCustomerRepresentativeRow() As OQCustomerRepresentativeRow
            Return CType(Me.NewRow,OQCustomerRepresentativeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OQCustomerRepresentativeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OQCustomerRepresentativeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OQCustomerRepresentativeRowChangedEvent) Is Nothing) Then
                RaiseEvent OQCustomerRepresentativeRowChanged(Me, New OQCustomerRepresentativeRowChangeEvent(CType(e.Row,OQCustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OQCustomerRepresentativeRowChangingEvent) Is Nothing) Then
                RaiseEvent OQCustomerRepresentativeRowChanging(Me, New OQCustomerRepresentativeRowChangeEvent(CType(e.Row,OQCustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OQCustomerRepresentativeRowDeletedEvent) Is Nothing) Then
                RaiseEvent OQCustomerRepresentativeRowDeleted(Me, New OQCustomerRepresentativeRowChangeEvent(CType(e.Row,OQCustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OQCustomerRepresentativeRowDeletingEvent) Is Nothing) Then
                RaiseEvent OQCustomerRepresentativeRowDeleting(Me, New OQCustomerRepresentativeRowChangeEvent(CType(e.Row,OQCustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOQCustomerRepresentativeRow(ByVal row As OQCustomerRepresentativeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQCustomerRepresentativeRow
        Inherits DataRow
        
        Private tableOQCustomerRepresentative As OQCustomerRepresentativeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOQCustomerRepresentative = CType(Me.Table,OQCustomerRepresentativeDataTable)
        End Sub
        
        Public Property CustomerRepresentativeID As Integer
            Get
                Return CType(Me(Me.tableOQCustomerRepresentative.CustomerRepresentativeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOQCustomerRepresentative.CustomerRepresentativeIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableOQCustomerRepresentative.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQCustomerRepresentative.NameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tableOQCustomerRepresentative.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQCustomerRepresentative.DesignationColumn) = value
            End Set
        End Property
        
        Public Property CustDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableOQCustomerRepresentative.CustDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQCustomerRepresentative.CustDateColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableOQCustomerRepresentative.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQCustomerRepresentative.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Property FunctionalArea As String
            Get
                Try 
                    Return CType(Me(Me.tableOQCustomerRepresentative.FunctionalAreaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOQCustomerRepresentative.FunctionalAreaColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableOQCustomerRepresentative.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableOQCustomerRepresentative.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tableOQCustomerRepresentative.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tableOQCustomerRepresentative.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustDateNull() As Boolean
            Return Me.IsNull(Me.tableOQCustomerRepresentative.CustDateColumn)
        End Function
        
        Public Sub SetCustDateNull()
            Me(Me.tableOQCustomerRepresentative.CustDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableOQCustomerRepresentative.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableOQCustomerRepresentative.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFunctionalAreaNull() As Boolean
            Return Me.IsNull(Me.tableOQCustomerRepresentative.FunctionalAreaColumn)
        End Function
        
        Public Sub SetFunctionalAreaNull()
            Me(Me.tableOQCustomerRepresentative.FunctionalAreaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OQCustomerRepresentativeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OQCustomerRepresentativeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OQCustomerRepresentativeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OQCustomerRepresentativeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQCompletedAcceptedByDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCompletedAcceptedByID As DataColumn
        
        Private columnCompletedBy As DataColumn
        
        Private columnAcceptedBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("PQCompletedAcceptedBy")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CompletedAcceptedByIDColumn As DataColumn
            Get
                Return Me.columnCompletedAcceptedByID
            End Get
        End Property
        
        Friend ReadOnly Property CompletedByColumn As DataColumn
            Get
                Return Me.columnCompletedBy
            End Get
        End Property
        
        Friend ReadOnly Property AcceptedByColumn As DataColumn
            Get
                Return Me.columnAcceptedBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQCompletedAcceptedByRow
            Get
                Return CType(Me.Rows(index),PQCompletedAcceptedByRow)
            End Get
        End Property
        
        Public Event PQCompletedAcceptedByRowChanged As PQCompletedAcceptedByRowChangeEventHandler
        
        Public Event PQCompletedAcceptedByRowChanging As PQCompletedAcceptedByRowChangeEventHandler
        
        Public Event PQCompletedAcceptedByRowDeleted As PQCompletedAcceptedByRowChangeEventHandler
        
        Public Event PQCompletedAcceptedByRowDeleting As PQCompletedAcceptedByRowChangeEventHandler
        
        Public Overloads Sub AddPQCompletedAcceptedByRow(ByVal row As PQCompletedAcceptedByRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQCompletedAcceptedByRow(ByVal CompletedAcceptedByID As Integer, ByVal CompletedBy As String, ByVal AcceptedBy As String, ByVal CheckStatusIQOQPQ As Single) As PQCompletedAcceptedByRow
            Dim rowPQCompletedAcceptedByRow As PQCompletedAcceptedByRow = CType(Me.NewRow,PQCompletedAcceptedByRow)
            rowPQCompletedAcceptedByRow.ItemArray = New Object() {CompletedAcceptedByID, CompletedBy, AcceptedBy, CheckStatusIQOQPQ}
            Me.Rows.Add(rowPQCompletedAcceptedByRow)
            Return rowPQCompletedAcceptedByRow
        End Function
        
        Public Function FindByCompletedAcceptedByID(ByVal CompletedAcceptedByID As Integer) As PQCompletedAcceptedByRow
            Return CType(Me.Rows.Find(New Object() {CompletedAcceptedByID}),PQCompletedAcceptedByRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQCompletedAcceptedByDataTable = CType(MyBase.Clone,PQCompletedAcceptedByDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQCompletedAcceptedByDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCompletedAcceptedByID = Me.Columns("CompletedAcceptedByID")
            Me.columnCompletedBy = Me.Columns("CompletedBy")
            Me.columnAcceptedBy = Me.Columns("AcceptedBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnCompletedAcceptedByID = New DataColumn("CompletedAcceptedByID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompletedAcceptedByID)
            Me.columnCompletedBy = New DataColumn("CompletedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompletedBy)
            Me.columnAcceptedBy = New DataColumn("AcceptedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcceptedBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey16", New DataColumn() {Me.columnCompletedAcceptedByID}, true))
            Me.columnCompletedAcceptedByID.AllowDBNull = false
            Me.columnCompletedAcceptedByID.Unique = true
        End Sub
        
        Public Function NewPQCompletedAcceptedByRow() As PQCompletedAcceptedByRow
            Return CType(Me.NewRow,PQCompletedAcceptedByRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQCompletedAcceptedByRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQCompletedAcceptedByRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQCompletedAcceptedByRowChangedEvent) Is Nothing) Then
                RaiseEvent PQCompletedAcceptedByRowChanged(Me, New PQCompletedAcceptedByRowChangeEvent(CType(e.Row,PQCompletedAcceptedByRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQCompletedAcceptedByRowChangingEvent) Is Nothing) Then
                RaiseEvent PQCompletedAcceptedByRowChanging(Me, New PQCompletedAcceptedByRowChangeEvent(CType(e.Row,PQCompletedAcceptedByRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQCompletedAcceptedByRowDeletedEvent) Is Nothing) Then
                RaiseEvent PQCompletedAcceptedByRowDeleted(Me, New PQCompletedAcceptedByRowChangeEvent(CType(e.Row,PQCompletedAcceptedByRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQCompletedAcceptedByRowDeletingEvent) Is Nothing) Then
                RaiseEvent PQCompletedAcceptedByRowDeleting(Me, New PQCompletedAcceptedByRowChangeEvent(CType(e.Row,PQCompletedAcceptedByRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQCompletedAcceptedByRow(ByVal row As PQCompletedAcceptedByRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQCompletedAcceptedByRow
        Inherits DataRow
        
        Private tablePQCompletedAcceptedBy As PQCompletedAcceptedByDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQCompletedAcceptedBy = CType(Me.Table,PQCompletedAcceptedByDataTable)
        End Sub
        
        Public Property CompletedAcceptedByID As Integer
            Get
                Return CType(Me(Me.tablePQCompletedAcceptedBy.CompletedAcceptedByIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePQCompletedAcceptedBy.CompletedAcceptedByIDColumn) = value
            End Set
        End Property
        
        Public Property CompletedBy As String
            Get
                Try 
                    Return CType(Me(Me.tablePQCompletedAcceptedBy.CompletedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQCompletedAcceptedBy.CompletedByColumn) = value
            End Set
        End Property
        
        Public Property AcceptedBy As String
            Get
                Try 
                    Return CType(Me(Me.tablePQCompletedAcceptedBy.AcceptedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQCompletedAcceptedBy.AcceptedByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tablePQCompletedAcceptedBy.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQCompletedAcceptedBy.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsCompletedByNull() As Boolean
            Return Me.IsNull(Me.tablePQCompletedAcceptedBy.CompletedByColumn)
        End Function
        
        Public Sub SetCompletedByNull()
            Me(Me.tablePQCompletedAcceptedBy.CompletedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcceptedByNull() As Boolean
            Return Me.IsNull(Me.tablePQCompletedAcceptedBy.AcceptedByColumn)
        End Function
        
        Public Sub SetAcceptedByNull()
            Me(Me.tablePQCompletedAcceptedBy.AcceptedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tablePQCompletedAcceptedBy.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tablePQCompletedAcceptedBy.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQCompletedAcceptedByRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQCompletedAcceptedByRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQCompletedAcceptedByRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQCompletedAcceptedByRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQCustomerRepresentativeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerRepresentativeID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnCustDate As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Private columnFunctionalArea As DataColumn
        
        Friend Sub New()
            MyBase.New("PQCustomerRepresentative")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerRepresentativeIDColumn As DataColumn
            Get
                Return Me.columnCustomerRepresentativeID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property CustDateColumn As DataColumn
            Get
                Return Me.columnCustDate
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Friend ReadOnly Property FunctionalAreaColumn As DataColumn
            Get
                Return Me.columnFunctionalArea
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQCustomerRepresentativeRow
            Get
                Return CType(Me.Rows(index),PQCustomerRepresentativeRow)
            End Get
        End Property
        
        Public Event PQCustomerRepresentativeRowChanged As PQCustomerRepresentativeRowChangeEventHandler
        
        Public Event PQCustomerRepresentativeRowChanging As PQCustomerRepresentativeRowChangeEventHandler
        
        Public Event PQCustomerRepresentativeRowDeleted As PQCustomerRepresentativeRowChangeEventHandler
        
        Public Event PQCustomerRepresentativeRowDeleting As PQCustomerRepresentativeRowChangeEventHandler
        
        Public Overloads Sub AddPQCustomerRepresentativeRow(ByVal row As PQCustomerRepresentativeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQCustomerRepresentativeRow(ByVal CustomerRepresentativeID As Integer, ByVal Name As String, ByVal Designation As String, ByVal CustDate As Date, ByVal CheckStatusIQOQPQ As Single, ByVal FunctionalArea As String) As PQCustomerRepresentativeRow
            Dim rowPQCustomerRepresentativeRow As PQCustomerRepresentativeRow = CType(Me.NewRow,PQCustomerRepresentativeRow)
            rowPQCustomerRepresentativeRow.ItemArray = New Object() {CustomerRepresentativeID, Name, Designation, CustDate, CheckStatusIQOQPQ, FunctionalArea}
            Me.Rows.Add(rowPQCustomerRepresentativeRow)
            Return rowPQCustomerRepresentativeRow
        End Function
        
        Public Function FindByCustomerRepresentativeID(ByVal CustomerRepresentativeID As Integer) As PQCustomerRepresentativeRow
            Return CType(Me.Rows.Find(New Object() {CustomerRepresentativeID}),PQCustomerRepresentativeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQCustomerRepresentativeDataTable = CType(MyBase.Clone,PQCustomerRepresentativeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQCustomerRepresentativeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerRepresentativeID = Me.Columns("CustomerRepresentativeID")
            Me.columnName = Me.Columns("Name")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnCustDate = Me.Columns("CustDate")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
            Me.columnFunctionalArea = Me.Columns("FunctionalArea")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerRepresentativeID = New DataColumn("CustomerRepresentativeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerRepresentativeID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnCustDate = New DataColumn("CustDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustDate)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.columnFunctionalArea = New DataColumn("FunctionalArea", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFunctionalArea)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey17", New DataColumn() {Me.columnCustomerRepresentativeID}, true))
            Me.columnCustomerRepresentativeID.AllowDBNull = false
            Me.columnCustomerRepresentativeID.Unique = true
        End Sub
        
        Public Function NewPQCustomerRepresentativeRow() As PQCustomerRepresentativeRow
            Return CType(Me.NewRow,PQCustomerRepresentativeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQCustomerRepresentativeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQCustomerRepresentativeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQCustomerRepresentativeRowChangedEvent) Is Nothing) Then
                RaiseEvent PQCustomerRepresentativeRowChanged(Me, New PQCustomerRepresentativeRowChangeEvent(CType(e.Row,PQCustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQCustomerRepresentativeRowChangingEvent) Is Nothing) Then
                RaiseEvent PQCustomerRepresentativeRowChanging(Me, New PQCustomerRepresentativeRowChangeEvent(CType(e.Row,PQCustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQCustomerRepresentativeRowDeletedEvent) Is Nothing) Then
                RaiseEvent PQCustomerRepresentativeRowDeleted(Me, New PQCustomerRepresentativeRowChangeEvent(CType(e.Row,PQCustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQCustomerRepresentativeRowDeletingEvent) Is Nothing) Then
                RaiseEvent PQCustomerRepresentativeRowDeleting(Me, New PQCustomerRepresentativeRowChangeEvent(CType(e.Row,PQCustomerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQCustomerRepresentativeRow(ByVal row As PQCustomerRepresentativeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQCustomerRepresentativeRow
        Inherits DataRow
        
        Private tablePQCustomerRepresentative As PQCustomerRepresentativeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQCustomerRepresentative = CType(Me.Table,PQCustomerRepresentativeDataTable)
        End Sub
        
        Public Property CustomerRepresentativeID As Integer
            Get
                Return CType(Me(Me.tablePQCustomerRepresentative.CustomerRepresentativeIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePQCustomerRepresentative.CustomerRepresentativeIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tablePQCustomerRepresentative.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQCustomerRepresentative.NameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tablePQCustomerRepresentative.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQCustomerRepresentative.DesignationColumn) = value
            End Set
        End Property
        
        Public Property CustDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePQCustomerRepresentative.CustDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQCustomerRepresentative.CustDateColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tablePQCustomerRepresentative.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQCustomerRepresentative.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Property FunctionalArea As String
            Get
                Try 
                    Return CType(Me(Me.tablePQCustomerRepresentative.FunctionalAreaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQCustomerRepresentative.FunctionalAreaColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablePQCustomerRepresentative.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tablePQCustomerRepresentative.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tablePQCustomerRepresentative.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tablePQCustomerRepresentative.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustDateNull() As Boolean
            Return Me.IsNull(Me.tablePQCustomerRepresentative.CustDateColumn)
        End Function
        
        Public Sub SetCustDateNull()
            Me(Me.tablePQCustomerRepresentative.CustDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tablePQCustomerRepresentative.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tablePQCustomerRepresentative.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFunctionalAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQCustomerRepresentative.FunctionalAreaColumn)
        End Function
        
        Public Sub SetFunctionalAreaNull()
            Me(Me.tablePQCustomerRepresentative.FunctionalAreaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQCustomerRepresentativeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQCustomerRepresentativeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQCustomerRepresentativeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQCustomerRepresentativeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQDeficiencyCorrectiveActionPlanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDeficiencyCorrectiveActionPlanID As DataColumn
        
        Private columnDetails As DataColumn
        
        Private columnActionPlan As DataColumn
        
        Private columnCorrectiveActionDate As DataColumn
        
        Private columnCorrectiveActionOrBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("PQDeficiencyCorrectiveActionPlan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DeficiencyCorrectiveActionPlanIDColumn As DataColumn
            Get
                Return Me.columnDeficiencyCorrectiveActionPlanID
            End Get
        End Property
        
        Friend ReadOnly Property DetailsColumn As DataColumn
            Get
                Return Me.columnDetails
            End Get
        End Property
        
        Friend ReadOnly Property ActionPlanColumn As DataColumn
            Get
                Return Me.columnActionPlan
            End Get
        End Property
        
        Friend ReadOnly Property CorrectiveActionDateColumn As DataColumn
            Get
                Return Me.columnCorrectiveActionDate
            End Get
        End Property
        
        Friend ReadOnly Property CorrectiveActionOrByColumn As DataColumn
            Get
                Return Me.columnCorrectiveActionOrBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQDeficiencyCorrectiveActionPlanRow
            Get
                Return CType(Me.Rows(index),PQDeficiencyCorrectiveActionPlanRow)
            End Get
        End Property
        
        Public Event PQDeficiencyCorrectiveActionPlanRowChanged As PQDeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event PQDeficiencyCorrectiveActionPlanRowChanging As PQDeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event PQDeficiencyCorrectiveActionPlanRowDeleted As PQDeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Event PQDeficiencyCorrectiveActionPlanRowDeleting As PQDeficiencyCorrectiveActionPlanRowChangeEventHandler
        
        Public Overloads Sub AddPQDeficiencyCorrectiveActionPlanRow(ByVal row As PQDeficiencyCorrectiveActionPlanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQDeficiencyCorrectiveActionPlanRow(ByVal DeficiencyCorrectiveActionPlanID As Integer, ByVal Details As String, ByVal ActionPlan As String, ByVal CorrectiveActionDate As Date, ByVal CorrectiveActionOrBy As String, ByVal CheckStatusIQOQPQ As Single) As PQDeficiencyCorrectiveActionPlanRow
            Dim rowPQDeficiencyCorrectiveActionPlanRow As PQDeficiencyCorrectiveActionPlanRow = CType(Me.NewRow,PQDeficiencyCorrectiveActionPlanRow)
            rowPQDeficiencyCorrectiveActionPlanRow.ItemArray = New Object() {DeficiencyCorrectiveActionPlanID, Details, ActionPlan, CorrectiveActionDate, CorrectiveActionOrBy, CheckStatusIQOQPQ}
            Me.Rows.Add(rowPQDeficiencyCorrectiveActionPlanRow)
            Return rowPQDeficiencyCorrectiveActionPlanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQDeficiencyCorrectiveActionPlanDataTable = CType(MyBase.Clone,PQDeficiencyCorrectiveActionPlanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQDeficiencyCorrectiveActionPlanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDeficiencyCorrectiveActionPlanID = Me.Columns("DeficiencyCorrectiveActionPlanID")
            Me.columnDetails = Me.Columns("Details")
            Me.columnActionPlan = Me.Columns("ActionPlan")
            Me.columnCorrectiveActionDate = Me.Columns("CorrectiveActionDate")
            Me.columnCorrectiveActionOrBy = Me.Columns("CorrectiveActionOrBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnDeficiencyCorrectiveActionPlanID = New DataColumn("DeficiencyCorrectiveActionPlanID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeficiencyCorrectiveActionPlanID)
            Me.columnDetails = New DataColumn("Details", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails)
            Me.columnActionPlan = New DataColumn("ActionPlan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActionPlan)
            Me.columnCorrectiveActionDate = New DataColumn("CorrectiveActionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorrectiveActionDate)
            Me.columnCorrectiveActionOrBy = New DataColumn("CorrectiveActionOrBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorrectiveActionOrBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
        End Sub
        
        Public Function NewPQDeficiencyCorrectiveActionPlanRow() As PQDeficiencyCorrectiveActionPlanRow
            Return CType(Me.NewRow,PQDeficiencyCorrectiveActionPlanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQDeficiencyCorrectiveActionPlanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQDeficiencyCorrectiveActionPlanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQDeficiencyCorrectiveActionPlanRowChangedEvent) Is Nothing) Then
                RaiseEvent PQDeficiencyCorrectiveActionPlanRowChanged(Me, New PQDeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,PQDeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQDeficiencyCorrectiveActionPlanRowChangingEvent) Is Nothing) Then
                RaiseEvent PQDeficiencyCorrectiveActionPlanRowChanging(Me, New PQDeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,PQDeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQDeficiencyCorrectiveActionPlanRowDeletedEvent) Is Nothing) Then
                RaiseEvent PQDeficiencyCorrectiveActionPlanRowDeleted(Me, New PQDeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,PQDeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQDeficiencyCorrectiveActionPlanRowDeletingEvent) Is Nothing) Then
                RaiseEvent PQDeficiencyCorrectiveActionPlanRowDeleting(Me, New PQDeficiencyCorrectiveActionPlanRowChangeEvent(CType(e.Row,PQDeficiencyCorrectiveActionPlanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQDeficiencyCorrectiveActionPlanRow(ByVal row As PQDeficiencyCorrectiveActionPlanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQDeficiencyCorrectiveActionPlanRow
        Inherits DataRow
        
        Private tablePQDeficiencyCorrectiveActionPlan As PQDeficiencyCorrectiveActionPlanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQDeficiencyCorrectiveActionPlan = CType(Me.Table,PQDeficiencyCorrectiveActionPlanDataTable)
        End Sub
        
        Public Property DeficiencyCorrectiveActionPlanID As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePQDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn) = value
            End Set
        End Property
        
        Public Property Details As String
            Get
                Try 
                    Return CType(Me(Me.tablePQDeficiencyCorrectiveActionPlan.DetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQDeficiencyCorrectiveActionPlan.DetailsColumn) = value
            End Set
        End Property
        
        Public Property ActionPlan As String
            Get
                Try 
                    Return CType(Me(Me.tablePQDeficiencyCorrectiveActionPlan.ActionPlanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQDeficiencyCorrectiveActionPlan.ActionPlanColumn) = value
            End Set
        End Property
        
        Public Property CorrectiveActionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePQDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn) = value
            End Set
        End Property
        
        Public Property CorrectiveActionOrBy As String
            Get
                Try 
                    Return CType(Me(Me.tablePQDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tablePQDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsDeficiencyCorrectiveActionPlanIDNull() As Boolean
            Return Me.IsNull(Me.tablePQDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn)
        End Function
        
        Public Sub SetDeficiencyCorrectiveActionPlanIDNull()
            Me(Me.tablePQDeficiencyCorrectiveActionPlan.DeficiencyCorrectiveActionPlanIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetailsNull() As Boolean
            Return Me.IsNull(Me.tablePQDeficiencyCorrectiveActionPlan.DetailsColumn)
        End Function
        
        Public Sub SetDetailsNull()
            Me(Me.tablePQDeficiencyCorrectiveActionPlan.DetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsActionPlanNull() As Boolean
            Return Me.IsNull(Me.tablePQDeficiencyCorrectiveActionPlan.ActionPlanColumn)
        End Function
        
        Public Sub SetActionPlanNull()
            Me(Me.tablePQDeficiencyCorrectiveActionPlan.ActionPlanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorrectiveActionDateNull() As Boolean
            Return Me.IsNull(Me.tablePQDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn)
        End Function
        
        Public Sub SetCorrectiveActionDateNull()
            Me(Me.tablePQDeficiencyCorrectiveActionPlan.CorrectiveActionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorrectiveActionOrByNull() As Boolean
            Return Me.IsNull(Me.tablePQDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn)
        End Function
        
        Public Sub SetCorrectiveActionOrByNull()
            Me(Me.tablePQDeficiencyCorrectiveActionPlan.CorrectiveActionOrByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tablePQDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tablePQDeficiencyCorrectiveActionPlan.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQDeficiencyCorrectiveActionPlanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQDeficiencyCorrectiveActionPlanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQDeficiencyCorrectiveActionPlanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQDeficiencyCorrectiveActionPlanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQEquipmentListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEquipmentListID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnSerialNo As DataColumn
        
        Private columnCheckedBy As DataColumn
        
        Private columnVerifiedBy As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("PQEquipmentList")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EquipmentListIDColumn As DataColumn
            Get
                Return Me.columnEquipmentListID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property SerialNoColumn As DataColumn
            Get
                Return Me.columnSerialNo
            End Get
        End Property
        
        Friend ReadOnly Property CheckedByColumn As DataColumn
            Get
                Return Me.columnCheckedBy
            End Get
        End Property
        
        Friend ReadOnly Property VerifiedByColumn As DataColumn
            Get
                Return Me.columnVerifiedBy
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQEquipmentListRow
            Get
                Return CType(Me.Rows(index),PQEquipmentListRow)
            End Get
        End Property
        
        Public Event PQEquipmentListRowChanged As PQEquipmentListRowChangeEventHandler
        
        Public Event PQEquipmentListRowChanging As PQEquipmentListRowChangeEventHandler
        
        Public Event PQEquipmentListRowDeleted As PQEquipmentListRowChangeEventHandler
        
        Public Event PQEquipmentListRowDeleting As PQEquipmentListRowChangeEventHandler
        
        Public Overloads Sub AddPQEquipmentListRow(ByVal row As PQEquipmentListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQEquipmentListRow(ByVal EquipmentListID As Integer, ByVal Name As String, ByVal SerialNo As String, ByVal CheckedBy As String, ByVal VerifiedBy As String, ByVal CheckStatusIQOQPQ As Single) As PQEquipmentListRow
            Dim rowPQEquipmentListRow As PQEquipmentListRow = CType(Me.NewRow,PQEquipmentListRow)
            rowPQEquipmentListRow.ItemArray = New Object() {EquipmentListID, Name, SerialNo, CheckedBy, VerifiedBy, CheckStatusIQOQPQ}
            Me.Rows.Add(rowPQEquipmentListRow)
            Return rowPQEquipmentListRow
        End Function
        
        Public Function FindByEquipmentListID(ByVal EquipmentListID As Integer) As PQEquipmentListRow
            Return CType(Me.Rows.Find(New Object() {EquipmentListID}),PQEquipmentListRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQEquipmentListDataTable = CType(MyBase.Clone,PQEquipmentListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQEquipmentListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEquipmentListID = Me.Columns("EquipmentListID")
            Me.columnName = Me.Columns("Name")
            Me.columnSerialNo = Me.Columns("SerialNo")
            Me.columnCheckedBy = Me.Columns("CheckedBy")
            Me.columnVerifiedBy = Me.Columns("VerifiedBy")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnEquipmentListID = New DataColumn("EquipmentListID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEquipmentListID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnSerialNo = New DataColumn("SerialNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSerialNo)
            Me.columnCheckedBy = New DataColumn("CheckedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckedBy)
            Me.columnVerifiedBy = New DataColumn("VerifiedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVerifiedBy)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey18", New DataColumn() {Me.columnEquipmentListID}, true))
            Me.columnEquipmentListID.AllowDBNull = false
            Me.columnEquipmentListID.Unique = true
        End Sub
        
        Public Function NewPQEquipmentListRow() As PQEquipmentListRow
            Return CType(Me.NewRow,PQEquipmentListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQEquipmentListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQEquipmentListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQEquipmentListRowChangedEvent) Is Nothing) Then
                RaiseEvent PQEquipmentListRowChanged(Me, New PQEquipmentListRowChangeEvent(CType(e.Row,PQEquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQEquipmentListRowChangingEvent) Is Nothing) Then
                RaiseEvent PQEquipmentListRowChanging(Me, New PQEquipmentListRowChangeEvent(CType(e.Row,PQEquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQEquipmentListRowDeletedEvent) Is Nothing) Then
                RaiseEvent PQEquipmentListRowDeleted(Me, New PQEquipmentListRowChangeEvent(CType(e.Row,PQEquipmentListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQEquipmentListRowDeletingEvent) Is Nothing) Then
                RaiseEvent PQEquipmentListRowDeleting(Me, New PQEquipmentListRowChangeEvent(CType(e.Row,PQEquipmentListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQEquipmentListRow(ByVal row As PQEquipmentListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQEquipmentListRow
        Inherits DataRow
        
        Private tablePQEquipmentList As PQEquipmentListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQEquipmentList = CType(Me.Table,PQEquipmentListDataTable)
        End Sub
        
        Public Property EquipmentListID As Integer
            Get
                Return CType(Me(Me.tablePQEquipmentList.EquipmentListIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePQEquipmentList.EquipmentListIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tablePQEquipmentList.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQEquipmentList.NameColumn) = value
            End Set
        End Property
        
        Public Property SerialNo As String
            Get
                Try 
                    Return CType(Me(Me.tablePQEquipmentList.SerialNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQEquipmentList.SerialNoColumn) = value
            End Set
        End Property
        
        Public Property CheckedBy As String
            Get
                Try 
                    Return CType(Me(Me.tablePQEquipmentList.CheckedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQEquipmentList.CheckedByColumn) = value
            End Set
        End Property
        
        Public Property VerifiedBy As String
            Get
                Try 
                    Return CType(Me(Me.tablePQEquipmentList.VerifiedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQEquipmentList.VerifiedByColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tablePQEquipmentList.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQEquipmentList.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablePQEquipmentList.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tablePQEquipmentList.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSerialNoNull() As Boolean
            Return Me.IsNull(Me.tablePQEquipmentList.SerialNoColumn)
        End Function
        
        Public Sub SetSerialNoNull()
            Me(Me.tablePQEquipmentList.SerialNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckedByNull() As Boolean
            Return Me.IsNull(Me.tablePQEquipmentList.CheckedByColumn)
        End Function
        
        Public Sub SetCheckedByNull()
            Me(Me.tablePQEquipmentList.CheckedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVerifiedByNull() As Boolean
            Return Me.IsNull(Me.tablePQEquipmentList.VerifiedByColumn)
        End Function
        
        Public Sub SetVerifiedByNull()
            Me(Me.tablePQEquipmentList.VerifiedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tablePQEquipmentList.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tablePQEquipmentList.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQEquipmentListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQEquipmentListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQEquipmentListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQEquipmentListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQManufacturerRepresentativeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnManufacturerRepresentativeID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnCompany As DataColumn
        
        Private columnManDate As DataColumn
        
        Private columnJointFunctionalArea As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Friend Sub New()
            MyBase.New("PQManufacturerRepresentative")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ManufacturerRepresentativeIDColumn As DataColumn
            Get
                Return Me.columnManufacturerRepresentativeID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property CompanyColumn As DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Friend ReadOnly Property ManDateColumn As DataColumn
            Get
                Return Me.columnManDate
            End Get
        End Property
        
        Friend ReadOnly Property JointFunctionalAreaColumn As DataColumn
            Get
                Return Me.columnJointFunctionalArea
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQManufacturerRepresentativeRow
            Get
                Return CType(Me.Rows(index),PQManufacturerRepresentativeRow)
            End Get
        End Property
        
        Public Event PQManufacturerRepresentativeRowChanged As PQManufacturerRepresentativeRowChangeEventHandler
        
        Public Event PQManufacturerRepresentativeRowChanging As PQManufacturerRepresentativeRowChangeEventHandler
        
        Public Event PQManufacturerRepresentativeRowDeleted As PQManufacturerRepresentativeRowChangeEventHandler
        
        Public Event PQManufacturerRepresentativeRowDeleting As PQManufacturerRepresentativeRowChangeEventHandler
        
        Public Overloads Sub AddPQManufacturerRepresentativeRow(ByVal row As PQManufacturerRepresentativeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQManufacturerRepresentativeRow(ByVal ManufacturerRepresentativeID As Integer, ByVal Name As String, ByVal Designation As String, ByVal Company As String, ByVal ManDate As Date, ByVal JointFunctionalArea As String, ByVal CheckStatusIQOQPQ As Single) As PQManufacturerRepresentativeRow
            Dim rowPQManufacturerRepresentativeRow As PQManufacturerRepresentativeRow = CType(Me.NewRow,PQManufacturerRepresentativeRow)
            rowPQManufacturerRepresentativeRow.ItemArray = New Object() {ManufacturerRepresentativeID, Name, Designation, Company, ManDate, JointFunctionalArea, CheckStatusIQOQPQ}
            Me.Rows.Add(rowPQManufacturerRepresentativeRow)
            Return rowPQManufacturerRepresentativeRow
        End Function
        
        Public Function FindByManufacturerRepresentativeID(ByVal ManufacturerRepresentativeID As Integer) As PQManufacturerRepresentativeRow
            Return CType(Me.Rows.Find(New Object() {ManufacturerRepresentativeID}),PQManufacturerRepresentativeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQManufacturerRepresentativeDataTable = CType(MyBase.Clone,PQManufacturerRepresentativeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQManufacturerRepresentativeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnManufacturerRepresentativeID = Me.Columns("ManufacturerRepresentativeID")
            Me.columnName = Me.Columns("Name")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnCompany = Me.Columns("Company")
            Me.columnManDate = Me.Columns("ManDate")
            Me.columnJointFunctionalArea = Me.Columns("JointFunctionalArea")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
        End Sub
        
        Private Sub InitClass()
            Me.columnManufacturerRepresentativeID = New DataColumn("ManufacturerRepresentativeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManufacturerRepresentativeID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnCompany = New DataColumn("Company", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompany)
            Me.columnManDate = New DataColumn("ManDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManDate)
            Me.columnJointFunctionalArea = New DataColumn("JointFunctionalArea", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJointFunctionalArea)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey19", New DataColumn() {Me.columnManufacturerRepresentativeID}, true))
            Me.columnManufacturerRepresentativeID.AllowDBNull = false
            Me.columnManufacturerRepresentativeID.Unique = true
        End Sub
        
        Public Function NewPQManufacturerRepresentativeRow() As PQManufacturerRepresentativeRow
            Return CType(Me.NewRow,PQManufacturerRepresentativeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQManufacturerRepresentativeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQManufacturerRepresentativeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQManufacturerRepresentativeRowChangedEvent) Is Nothing) Then
                RaiseEvent PQManufacturerRepresentativeRowChanged(Me, New PQManufacturerRepresentativeRowChangeEvent(CType(e.Row,PQManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQManufacturerRepresentativeRowChangingEvent) Is Nothing) Then
                RaiseEvent PQManufacturerRepresentativeRowChanging(Me, New PQManufacturerRepresentativeRowChangeEvent(CType(e.Row,PQManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQManufacturerRepresentativeRowDeletedEvent) Is Nothing) Then
                RaiseEvent PQManufacturerRepresentativeRowDeleted(Me, New PQManufacturerRepresentativeRowChangeEvent(CType(e.Row,PQManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQManufacturerRepresentativeRowDeletingEvent) Is Nothing) Then
                RaiseEvent PQManufacturerRepresentativeRowDeleting(Me, New PQManufacturerRepresentativeRowChangeEvent(CType(e.Row,PQManufacturerRepresentativeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQManufacturerRepresentativeRow(ByVal row As PQManufacturerRepresentativeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQManufacturerRepresentativeRow
        Inherits DataRow
        
        Private tablePQManufacturerRepresentative As PQManufacturerRepresentativeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQManufacturerRepresentative = CType(Me.Table,PQManufacturerRepresentativeDataTable)
        End Sub
        
        Public Property ManufacturerRepresentativeID As Integer
            Get
                Return CType(Me(Me.tablePQManufacturerRepresentative.ManufacturerRepresentativeIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePQManufacturerRepresentative.ManufacturerRepresentativeIDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tablePQManufacturerRepresentative.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQManufacturerRepresentative.NameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tablePQManufacturerRepresentative.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQManufacturerRepresentative.DesignationColumn) = value
            End Set
        End Property
        
        Public Property Company As String
            Get
                Try 
                    Return CType(Me(Me.tablePQManufacturerRepresentative.CompanyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQManufacturerRepresentative.CompanyColumn) = value
            End Set
        End Property
        
        Public Property ManDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePQManufacturerRepresentative.ManDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQManufacturerRepresentative.ManDateColumn) = value
            End Set
        End Property
        
        Public Property JointFunctionalArea As String
            Get
                Try 
                    Return CType(Me(Me.tablePQManufacturerRepresentative.JointFunctionalAreaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQManufacturerRepresentative.JointFunctionalAreaColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tablePQManufacturerRepresentative.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQManufacturerRepresentative.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablePQManufacturerRepresentative.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tablePQManufacturerRepresentative.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tablePQManufacturerRepresentative.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tablePQManufacturerRepresentative.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tablePQManufacturerRepresentative.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tablePQManufacturerRepresentative.CompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsManDateNull() As Boolean
            Return Me.IsNull(Me.tablePQManufacturerRepresentative.ManDateColumn)
        End Function
        
        Public Sub SetManDateNull()
            Me(Me.tablePQManufacturerRepresentative.ManDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJointFunctionalAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQManufacturerRepresentative.JointFunctionalAreaColumn)
        End Function
        
        Public Sub SetJointFunctionalAreaNull()
            Me(Me.tablePQManufacturerRepresentative.JointFunctionalAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tablePQManufacturerRepresentative.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tablePQManufacturerRepresentative.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQManufacturerRepresentativeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQManufacturerRepresentativeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQManufacturerRepresentativeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQManufacturerRepresentativeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TestDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTestID As DataColumn
        
        Private columnTestName As DataColumn
        
        Private columnPurposeOrCondition As DataColumn
        
        Private columnCheckStatusIQOQPQ As DataColumn
        
        Private columnConfirmity As DataColumn
        
        Private columnComments As DataColumn
        
        Friend Sub New()
            MyBase.New("Test")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TestIDColumn As DataColumn
            Get
                Return Me.columnTestID
            End Get
        End Property
        
        Friend ReadOnly Property TestNameColumn As DataColumn
            Get
                Return Me.columnTestName
            End Get
        End Property
        
        Friend ReadOnly Property PurposeOrConditionColumn As DataColumn
            Get
                Return Me.columnPurposeOrCondition
            End Get
        End Property
        
        Friend ReadOnly Property CheckStatusIQOQPQColumn As DataColumn
            Get
                Return Me.columnCheckStatusIQOQPQ
            End Get
        End Property
        
        Friend ReadOnly Property ConfirmityColumn As DataColumn
            Get
                Return Me.columnConfirmity
            End Get
        End Property
        
        Friend ReadOnly Property CommentsColumn As DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TestRow
            Get
                Return CType(Me.Rows(index),TestRow)
            End Get
        End Property
        
        Public Event TestRowChanged As TestRowChangeEventHandler
        
        Public Event TestRowChanging As TestRowChangeEventHandler
        
        Public Event TestRowDeleted As TestRowChangeEventHandler
        
        Public Event TestRowDeleting As TestRowChangeEventHandler
        
        Public Overloads Sub AddTestRow(ByVal row As TestRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTestRow(ByVal TestID As Integer, ByVal TestName As String, ByVal PurposeOrCondition As String, ByVal CheckStatusIQOQPQ As Single, ByVal Confirmity As String, ByVal Comments As String) As TestRow
            Dim rowTestRow As TestRow = CType(Me.NewRow,TestRow)
            rowTestRow.ItemArray = New Object() {TestID, TestName, PurposeOrCondition, CheckStatusIQOQPQ, Confirmity, Comments}
            Me.Rows.Add(rowTestRow)
            Return rowTestRow
        End Function
        
        Public Function FindByTestID(ByVal TestID As Integer) As TestRow
            Return CType(Me.Rows.Find(New Object() {TestID}),TestRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TestDataTable = CType(MyBase.Clone,TestDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TestDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTestID = Me.Columns("TestID")
            Me.columnTestName = Me.Columns("TestName")
            Me.columnPurposeOrCondition = Me.Columns("PurposeOrCondition")
            Me.columnCheckStatusIQOQPQ = Me.Columns("CheckStatusIQOQPQ")
            Me.columnConfirmity = Me.Columns("Confirmity")
            Me.columnComments = Me.Columns("Comments")
        End Sub
        
        Private Sub InitClass()
            Me.columnTestID = New DataColumn("TestID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTestID)
            Me.columnTestName = New DataColumn("TestName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTestName)
            Me.columnPurposeOrCondition = New DataColumn("PurposeOrCondition", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPurposeOrCondition)
            Me.columnCheckStatusIQOQPQ = New DataColumn("CheckStatusIQOQPQ", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckStatusIQOQPQ)
            Me.columnConfirmity = New DataColumn("Confirmity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConfirmity)
            Me.columnComments = New DataColumn("Comments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComments)
            Me.Constraints.Add(New UniqueConstraint("dtsetExportAllKey21", New DataColumn() {Me.columnTestID}, true))
            Me.columnTestID.AllowDBNull = false
            Me.columnTestID.Unique = true
        End Sub
        
        Public Function NewTestRow() As TestRow
            Return CType(Me.NewRow,TestRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TestRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TestRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TestRowChangedEvent) Is Nothing) Then
                RaiseEvent TestRowChanged(Me, New TestRowChangeEvent(CType(e.Row,TestRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TestRowChangingEvent) Is Nothing) Then
                RaiseEvent TestRowChanging(Me, New TestRowChangeEvent(CType(e.Row,TestRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TestRowDeletedEvent) Is Nothing) Then
                RaiseEvent TestRowDeleted(Me, New TestRowChangeEvent(CType(e.Row,TestRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TestRowDeletingEvent) Is Nothing) Then
                RaiseEvent TestRowDeleting(Me, New TestRowChangeEvent(CType(e.Row,TestRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTestRow(ByVal row As TestRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TestRow
        Inherits DataRow
        
        Private tableTest As TestDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTest = CType(Me.Table,TestDataTable)
        End Sub
        
        Public Property TestID As Integer
            Get
                Return CType(Me(Me.tableTest.TestIDColumn),Integer)
            End Get
            Set
                Me(Me.tableTest.TestIDColumn) = value
            End Set
        End Property
        
        Public Property TestName As String
            Get
                Try 
                    Return CType(Me(Me.tableTest.TestNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest.TestNameColumn) = value
            End Set
        End Property
        
        Public Property PurposeOrCondition As String
            Get
                Try 
                    Return CType(Me(Me.tableTest.PurposeOrConditionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest.PurposeOrConditionColumn) = value
            End Set
        End Property
        
        Public Property CheckStatusIQOQPQ As Single
            Get
                Try 
                    Return CType(Me(Me.tableTest.CheckStatusIQOQPQColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest.CheckStatusIQOQPQColumn) = value
            End Set
        End Property
        
        Public Property Confirmity As String
            Get
                Try 
                    Return CType(Me(Me.tableTest.ConfirmityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest.ConfirmityColumn) = value
            End Set
        End Property
        
        Public Property Comments As String
            Get
                Try 
                    Return CType(Me(Me.tableTest.CommentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest.CommentsColumn) = value
            End Set
        End Property
        
        Public Function IsTestNameNull() As Boolean
            Return Me.IsNull(Me.tableTest.TestNameColumn)
        End Function
        
        Public Sub SetTestNameNull()
            Me(Me.tableTest.TestNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPurposeOrConditionNull() As Boolean
            Return Me.IsNull(Me.tableTest.PurposeOrConditionColumn)
        End Function
        
        Public Sub SetPurposeOrConditionNull()
            Me(Me.tableTest.PurposeOrConditionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckStatusIQOQPQNull() As Boolean
            Return Me.IsNull(Me.tableTest.CheckStatusIQOQPQColumn)
        End Function
        
        Public Sub SetCheckStatusIQOQPQNull()
            Me(Me.tableTest.CheckStatusIQOQPQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConfirmityNull() As Boolean
            Return Me.IsNull(Me.tableTest.ConfirmityColumn)
        End Function
        
        Public Sub SetConfirmityNull()
            Me(Me.tableTest.ConfirmityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableTest.CommentsColumn)
        End Function
        
        Public Sub SetCommentsNull()
            Me(Me.tableTest.CommentsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TestRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TestRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TestRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TestRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnValidationTestID As DataColumn
        
        Private columnPQTestName As DataColumn
        
        Private columnPQPurpose As DataColumn
        
        Private columnPQConformity As DataColumn
        
        Private columnPQComments As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ValidationTestIDColumn As DataColumn
            Get
                Return Me.columnValidationTestID
            End Get
        End Property
        
        Friend ReadOnly Property PQTestNameColumn As DataColumn
            Get
                Return Me.columnPQTestName
            End Get
        End Property
        
        Friend ReadOnly Property PQPurposeColumn As DataColumn
            Get
                Return Me.columnPQPurpose
            End Get
        End Property
        
        Friend ReadOnly Property PQConformityColumn As DataColumn
            Get
                Return Me.columnPQConformity
            End Get
        End Property
        
        Friend ReadOnly Property PQCommentsColumn As DataColumn
            Get
                Return Me.columnPQComments
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest1Row
            Get
                Return CType(Me.Rows(index),PQTest1Row)
            End Get
        End Property
        
        Public Event PQTest1RowChanged As PQTest1RowChangeEventHandler
        
        Public Event PQTest1RowChanging As PQTest1RowChangeEventHandler
        
        Public Event PQTest1RowDeleted As PQTest1RowChangeEventHandler
        
        Public Event PQTest1RowDeleting As PQTest1RowChangeEventHandler
        
        Public Overloads Sub AddPQTest1Row(ByVal row As PQTest1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest1Row(ByVal ValidationTestID As Integer, ByVal PQTestName As String, ByVal PQPurpose As String, ByVal PQConformity As String, ByVal PQComments As String) As PQTest1Row
            Dim rowPQTest1Row As PQTest1Row = CType(Me.NewRow,PQTest1Row)
            rowPQTest1Row.ItemArray = New Object() {ValidationTestID, PQTestName, PQPurpose, PQConformity, PQComments}
            Me.Rows.Add(rowPQTest1Row)
            Return rowPQTest1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest1DataTable = CType(MyBase.Clone,PQTest1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnValidationTestID = Me.Columns("ValidationTestID")
            Me.columnPQTestName = Me.Columns("PQTestName")
            Me.columnPQPurpose = Me.Columns("PQPurpose")
            Me.columnPQConformity = Me.Columns("PQConformity")
            Me.columnPQComments = Me.Columns("PQComments")
        End Sub
        
        Private Sub InitClass()
            Me.columnValidationTestID = New DataColumn("ValidationTestID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidationTestID)
            Me.columnPQTestName = New DataColumn("PQTestName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQTestName)
            Me.columnPQPurpose = New DataColumn("PQPurpose", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQPurpose)
            Me.columnPQConformity = New DataColumn("PQConformity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQConformity)
            Me.columnPQComments = New DataColumn("PQComments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQComments)
        End Sub
        
        Public Function NewPQTest1Row() As PQTest1Row
            Return CType(Me.NewRow,PQTest1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest1RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest1RowChanged(Me, New PQTest1RowChangeEvent(CType(e.Row,PQTest1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest1RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest1RowChanging(Me, New PQTest1RowChangeEvent(CType(e.Row,PQTest1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest1RowDeleted(Me, New PQTest1RowChangeEvent(CType(e.Row,PQTest1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest1RowDeleting(Me, New PQTest1RowChangeEvent(CType(e.Row,PQTest1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest1Row(ByVal row As PQTest1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest1Row
        Inherits DataRow
        
        Private tablePQTest1 As PQTest1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest1 = CType(Me.Table,PQTest1DataTable)
        End Sub
        
        Public Property ValidationTestID As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePQTest1.ValidationTestIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest1.ValidationTestIDColumn) = value
            End Set
        End Property
        
        Public Property PQTestName As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest1.PQTestNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest1.PQTestNameColumn) = value
            End Set
        End Property
        
        Public Property PQPurpose As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest1.PQPurposeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest1.PQPurposeColumn) = value
            End Set
        End Property
        
        Public Property PQConformity As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest1.PQConformityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest1.PQConformityColumn) = value
            End Set
        End Property
        
        Public Property PQComments As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest1.PQCommentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest1.PQCommentsColumn) = value
            End Set
        End Property
        
        Public Function IsValidationTestIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest1.ValidationTestIDColumn)
        End Function
        
        Public Sub SetValidationTestIDNull()
            Me(Me.tablePQTest1.ValidationTestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPQTestNameNull() As Boolean
            Return Me.IsNull(Me.tablePQTest1.PQTestNameColumn)
        End Function
        
        Public Sub SetPQTestNameNull()
            Me(Me.tablePQTest1.PQTestNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPQPurposeNull() As Boolean
            Return Me.IsNull(Me.tablePQTest1.PQPurposeColumn)
        End Function
        
        Public Sub SetPQPurposeNull()
            Me(Me.tablePQTest1.PQPurposeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPQConformityNull() As Boolean
            Return Me.IsNull(Me.tablePQTest1.PQConformityColumn)
        End Function
        
        Public Sub SetPQConformityNull()
            Me(Me.tablePQTest1.PQConformityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPQCommentsNull() As Boolean
            Return Me.IsNull(Me.tablePQTest1.PQCommentsColumn)
        End Function
        
        Public Sub SetPQCommentsNull()
            Me(Me.tablePQTest1.PQCommentsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest5DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPeakArea As DataColumn
        
        Private columnValidationTestID As DataColumn
        
        Private columnRT As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest5")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PeakAreaColumn As DataColumn
            Get
                Return Me.columnPeakArea
            End Get
        End Property
        
        Friend ReadOnly Property ValidationTestIDColumn As DataColumn
            Get
                Return Me.columnValidationTestID
            End Get
        End Property
        
        Friend ReadOnly Property RTColumn As DataColumn
            Get
                Return Me.columnRT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest5Row
            Get
                Return CType(Me.Rows(index),PQTest5Row)
            End Get
        End Property
        
        Public Event PQTest5RowChanged As PQTest5RowChangeEventHandler
        
        Public Event PQTest5RowChanging As PQTest5RowChangeEventHandler
        
        Public Event PQTest5RowDeleted As PQTest5RowChangeEventHandler
        
        Public Event PQTest5RowDeleting As PQTest5RowChangeEventHandler
        
        Public Overloads Sub AddPQTest5Row(ByVal row As PQTest5Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest5Row(ByVal PeakArea As Double, ByVal ValidationTestID As String, ByVal RT As Double) As PQTest5Row
            Dim rowPQTest5Row As PQTest5Row = CType(Me.NewRow,PQTest5Row)
            rowPQTest5Row.ItemArray = New Object() {PeakArea, ValidationTestID, RT}
            Me.Rows.Add(rowPQTest5Row)
            Return rowPQTest5Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest5DataTable = CType(MyBase.Clone,PQTest5DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest5DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPeakArea = Me.Columns("PeakArea")
            Me.columnValidationTestID = Me.Columns("ValidationTestID")
            Me.columnRT = Me.Columns("RT")
        End Sub
        
        Private Sub InitClass()
            Me.columnPeakArea = New DataColumn("PeakArea", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeakArea)
            Me.columnValidationTestID = New DataColumn("ValidationTestID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidationTestID)
            Me.columnRT = New DataColumn("RT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRT)
        End Sub
        
        Public Function NewPQTest5Row() As PQTest5Row
            Return CType(Me.NewRow,PQTest5Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest5Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest5Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest5RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest5RowChanged(Me, New PQTest5RowChangeEvent(CType(e.Row,PQTest5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest5RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest5RowChanging(Me, New PQTest5RowChangeEvent(CType(e.Row,PQTest5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest5RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest5RowDeleted(Me, New PQTest5RowChangeEvent(CType(e.Row,PQTest5Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest5RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest5RowDeleting(Me, New PQTest5RowChangeEvent(CType(e.Row,PQTest5Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest5Row(ByVal row As PQTest5Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest5Row
        Inherits DataRow
        
        Private tablePQTest5 As PQTest5DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest5 = CType(Me.Table,PQTest5DataTable)
        End Sub
        
        Public Property PeakArea As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest5.PeakAreaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest5.PeakAreaColumn) = value
            End Set
        End Property
        
        Public Property ValidationTestID As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest5.ValidationTestIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest5.ValidationTestIDColumn) = value
            End Set
        End Property
        
        Public Property RT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest5.RTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest5.RTColumn) = value
            End Set
        End Property
        
        Public Function IsPeakAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQTest5.PeakAreaColumn)
        End Function
        
        Public Sub SetPeakAreaNull()
            Me(Me.tablePQTest5.PeakAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidationTestIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest5.ValidationTestIDColumn)
        End Function
        
        Public Sub SetValidationTestIDNull()
            Me(Me.tablePQTest5.ValidationTestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRTNull() As Boolean
            Return Me.IsNull(Me.tablePQTest5.RTColumn)
        End Function
        
        Public Sub SetRTNull()
            Me(Me.tablePQTest5.RTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest5RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest5Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest5Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest5Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPQTest2ID As DataColumn
        
        Private columnSampleID As DataColumn
        
        Private columnAbsorbance As DataColumn
        
        Private columnDeviation As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PQTest2IDColumn As DataColumn
            Get
                Return Me.columnPQTest2ID
            End Get
        End Property
        
        Friend ReadOnly Property SampleIDColumn As DataColumn
            Get
                Return Me.columnSampleID
            End Get
        End Property
        
        Friend ReadOnly Property AbsorbanceColumn As DataColumn
            Get
                Return Me.columnAbsorbance
            End Get
        End Property
        
        Friend ReadOnly Property DeviationColumn As DataColumn
            Get
                Return Me.columnDeviation
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest2Row
            Get
                Return CType(Me.Rows(index),PQTest2Row)
            End Get
        End Property
        
        Public Event PQTest2RowChanged As PQTest2RowChangeEventHandler
        
        Public Event PQTest2RowChanging As PQTest2RowChangeEventHandler
        
        Public Event PQTest2RowDeleted As PQTest2RowChangeEventHandler
        
        Public Event PQTest2RowDeleting As PQTest2RowChangeEventHandler
        
        Public Overloads Sub AddPQTest2Row(ByVal row As PQTest2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest2Row(ByVal PQTest2ID As Long, ByVal SampleID As Long, ByVal Absorbance As String, ByVal Deviation As String) As PQTest2Row
            Dim rowPQTest2Row As PQTest2Row = CType(Me.NewRow,PQTest2Row)
            rowPQTest2Row.ItemArray = New Object() {PQTest2ID, SampleID, Absorbance, Deviation}
            Me.Rows.Add(rowPQTest2Row)
            Return rowPQTest2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest2DataTable = CType(MyBase.Clone,PQTest2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPQTest2ID = Me.Columns("PQTest2ID")
            Me.columnSampleID = Me.Columns("SampleID")
            Me.columnAbsorbance = Me.Columns("Absorbance")
            Me.columnDeviation = Me.Columns("Deviation")
        End Sub
        
        Private Sub InitClass()
            Me.columnPQTest2ID = New DataColumn("PQTest2ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQTest2ID)
            Me.columnSampleID = New DataColumn("SampleID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSampleID)
            Me.columnAbsorbance = New DataColumn("Absorbance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbsorbance)
            Me.columnDeviation = New DataColumn("Deviation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeviation)
        End Sub
        
        Public Function NewPQTest2Row() As PQTest2Row
            Return CType(Me.NewRow,PQTest2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest2RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest2RowChanged(Me, New PQTest2RowChangeEvent(CType(e.Row,PQTest2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest2RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest2RowChanging(Me, New PQTest2RowChangeEvent(CType(e.Row,PQTest2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest2RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest2RowDeleted(Me, New PQTest2RowChangeEvent(CType(e.Row,PQTest2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest2RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest2RowDeleting(Me, New PQTest2RowChangeEvent(CType(e.Row,PQTest2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest2Row(ByVal row As PQTest2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest2Row
        Inherits DataRow
        
        Private tablePQTest2 As PQTest2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest2 = CType(Me.Table,PQTest2DataTable)
        End Sub
        
        Public Property PQTest2ID As Long
            Get
                Try 
                    Return CType(Me(Me.tablePQTest2.PQTest2IDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest2.PQTest2IDColumn) = value
            End Set
        End Property
        
        Public Property SampleID As Long
            Get
                Try 
                    Return CType(Me(Me.tablePQTest2.SampleIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest2.SampleIDColumn) = value
            End Set
        End Property
        
        Public Property Absorbance As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest2.AbsorbanceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest2.AbsorbanceColumn) = value
            End Set
        End Property
        
        Public Property Deviation As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest2.DeviationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest2.DeviationColumn) = value
            End Set
        End Property
        
        Public Function IsPQTest2IDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest2.PQTest2IDColumn)
        End Function
        
        Public Sub SetPQTest2IDNull()
            Me(Me.tablePQTest2.PQTest2IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSampleIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest2.SampleIDColumn)
        End Function
        
        Public Sub SetSampleIDNull()
            Me(Me.tablePQTest2.SampleIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbsorbanceNull() As Boolean
            Return Me.IsNull(Me.tablePQTest2.AbsorbanceColumn)
        End Function
        
        Public Sub SetAbsorbanceNull()
            Me(Me.tablePQTest2.AbsorbanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeviationNull() As Boolean
            Return Me.IsNull(Me.tablePQTest2.DeviationColumn)
        End Function
        
        Public Sub SetDeviationNull()
            Me(Me.tablePQTest2.DeviationColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest3DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPQTest3ID As DataColumn
        
        Private columnSampleID As DataColumn
        
        Private columnAbsorbance As DataColumn
        
        Private columnConcentration As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest3")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PQTest3IDColumn As DataColumn
            Get
                Return Me.columnPQTest3ID
            End Get
        End Property
        
        Friend ReadOnly Property SampleIDColumn As DataColumn
            Get
                Return Me.columnSampleID
            End Get
        End Property
        
        Friend ReadOnly Property AbsorbanceColumn As DataColumn
            Get
                Return Me.columnAbsorbance
            End Get
        End Property
        
        Friend ReadOnly Property ConcentrationColumn As DataColumn
            Get
                Return Me.columnConcentration
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest3Row
            Get
                Return CType(Me.Rows(index),PQTest3Row)
            End Get
        End Property
        
        Public Event PQTest3RowChanged As PQTest3RowChangeEventHandler
        
        Public Event PQTest3RowChanging As PQTest3RowChangeEventHandler
        
        Public Event PQTest3RowDeleted As PQTest3RowChangeEventHandler
        
        Public Event PQTest3RowDeleting As PQTest3RowChangeEventHandler
        
        Public Overloads Sub AddPQTest3Row(ByVal row As PQTest3Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest3Row(ByVal PQTest3ID As Long, ByVal SampleID As Long, ByVal Absorbance As String, ByVal Concentration As String) As PQTest3Row
            Dim rowPQTest3Row As PQTest3Row = CType(Me.NewRow,PQTest3Row)
            rowPQTest3Row.ItemArray = New Object() {PQTest3ID, SampleID, Absorbance, Concentration}
            Me.Rows.Add(rowPQTest3Row)
            Return rowPQTest3Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest3DataTable = CType(MyBase.Clone,PQTest3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest3DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPQTest3ID = Me.Columns("PQTest3ID")
            Me.columnSampleID = Me.Columns("SampleID")
            Me.columnAbsorbance = Me.Columns("Absorbance")
            Me.columnConcentration = Me.Columns("Concentration")
        End Sub
        
        Private Sub InitClass()
            Me.columnPQTest3ID = New DataColumn("PQTest3ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQTest3ID)
            Me.columnSampleID = New DataColumn("SampleID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSampleID)
            Me.columnAbsorbance = New DataColumn("Absorbance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbsorbance)
            Me.columnConcentration = New DataColumn("Concentration", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConcentration)
        End Sub
        
        Public Function NewPQTest3Row() As PQTest3Row
            Return CType(Me.NewRow,PQTest3Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest3Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest3Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest3RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest3RowChanged(Me, New PQTest3RowChangeEvent(CType(e.Row,PQTest3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest3RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest3RowChanging(Me, New PQTest3RowChangeEvent(CType(e.Row,PQTest3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest3RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest3RowDeleted(Me, New PQTest3RowChangeEvent(CType(e.Row,PQTest3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest3RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest3RowDeleting(Me, New PQTest3RowChangeEvent(CType(e.Row,PQTest3Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest3Row(ByVal row As PQTest3Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest3Row
        Inherits DataRow
        
        Private tablePQTest3 As PQTest3DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest3 = CType(Me.Table,PQTest3DataTable)
        End Sub
        
        Public Property PQTest3ID As Long
            Get
                Try 
                    Return CType(Me(Me.tablePQTest3.PQTest3IDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest3.PQTest3IDColumn) = value
            End Set
        End Property
        
        Public Property SampleID As Long
            Get
                Try 
                    Return CType(Me(Me.tablePQTest3.SampleIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest3.SampleIDColumn) = value
            End Set
        End Property
        
        Public Property Absorbance As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest3.AbsorbanceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest3.AbsorbanceColumn) = value
            End Set
        End Property
        
        Public Property Concentration As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest3.ConcentrationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest3.ConcentrationColumn) = value
            End Set
        End Property
        
        Public Function IsPQTest3IDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest3.PQTest3IDColumn)
        End Function
        
        Public Sub SetPQTest3IDNull()
            Me(Me.tablePQTest3.PQTest3IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSampleIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest3.SampleIDColumn)
        End Function
        
        Public Sub SetSampleIDNull()
            Me(Me.tablePQTest3.SampleIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbsorbanceNull() As Boolean
            Return Me.IsNull(Me.tablePQTest3.AbsorbanceColumn)
        End Function
        
        Public Sub SetAbsorbanceNull()
            Me(Me.tablePQTest3.AbsorbanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConcentrationNull() As Boolean
            Return Me.IsNull(Me.tablePQTest3.ConcentrationColumn)
        End Function
        
        Public Sub SetConcentrationNull()
            Me(Me.tablePQTest3.ConcentrationColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest3RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest3Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest3Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest4DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPeakArea As DataColumn
        
        Private columnValidationTestID As DataColumn
        
        Private columnRT As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest4")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PeakAreaColumn As DataColumn
            Get
                Return Me.columnPeakArea
            End Get
        End Property
        
        Friend ReadOnly Property ValidationTestIDColumn As DataColumn
            Get
                Return Me.columnValidationTestID
            End Get
        End Property
        
        Friend ReadOnly Property RTColumn As DataColumn
            Get
                Return Me.columnRT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest4Row
            Get
                Return CType(Me.Rows(index),PQTest4Row)
            End Get
        End Property
        
        Public Event PQTest4RowChanged As PQTest4RowChangeEventHandler
        
        Public Event PQTest4RowChanging As PQTest4RowChangeEventHandler
        
        Public Event PQTest4RowDeleted As PQTest4RowChangeEventHandler
        
        Public Event PQTest4RowDeleting As PQTest4RowChangeEventHandler
        
        Public Overloads Sub AddPQTest4Row(ByVal row As PQTest4Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest4Row(ByVal PeakArea As Double, ByVal ValidationTestID As String, ByVal RT As Double) As PQTest4Row
            Dim rowPQTest4Row As PQTest4Row = CType(Me.NewRow,PQTest4Row)
            rowPQTest4Row.ItemArray = New Object() {PeakArea, ValidationTestID, RT}
            Me.Rows.Add(rowPQTest4Row)
            Return rowPQTest4Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest4DataTable = CType(MyBase.Clone,PQTest4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest4DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPeakArea = Me.Columns("PeakArea")
            Me.columnValidationTestID = Me.Columns("ValidationTestID")
            Me.columnRT = Me.Columns("RT")
        End Sub
        
        Private Sub InitClass()
            Me.columnPeakArea = New DataColumn("PeakArea", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeakArea)
            Me.columnValidationTestID = New DataColumn("ValidationTestID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidationTestID)
            Me.columnRT = New DataColumn("RT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRT)
        End Sub
        
        Public Function NewPQTest4Row() As PQTest4Row
            Return CType(Me.NewRow,PQTest4Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest4Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest4Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest4RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest4RowChanged(Me, New PQTest4RowChangeEvent(CType(e.Row,PQTest4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest4RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest4RowChanging(Me, New PQTest4RowChangeEvent(CType(e.Row,PQTest4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest4RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest4RowDeleted(Me, New PQTest4RowChangeEvent(CType(e.Row,PQTest4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest4RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest4RowDeleting(Me, New PQTest4RowChangeEvent(CType(e.Row,PQTest4Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest4Row(ByVal row As PQTest4Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest4Row
        Inherits DataRow
        
        Private tablePQTest4 As PQTest4DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest4 = CType(Me.Table,PQTest4DataTable)
        End Sub
        
        Public Property PeakArea As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest4.PeakAreaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest4.PeakAreaColumn) = value
            End Set
        End Property
        
        Public Property ValidationTestID As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest4.ValidationTestIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest4.ValidationTestIDColumn) = value
            End Set
        End Property
        
        Public Property RT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest4.RTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest4.RTColumn) = value
            End Set
        End Property
        
        Public Function IsPeakAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQTest4.PeakAreaColumn)
        End Function
        
        Public Sub SetPeakAreaNull()
            Me(Me.tablePQTest4.PeakAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidationTestIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest4.ValidationTestIDColumn)
        End Function
        
        Public Sub SetValidationTestIDNull()
            Me(Me.tablePQTest4.ValidationTestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRTNull() As Boolean
            Return Me.IsNull(Me.tablePQTest4.RTColumn)
        End Function
        
        Public Sub SetRTNull()
            Me(Me.tablePQTest4.RTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest4RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest4Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest4Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest6DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPeakArea As DataColumn
        
        Private columnValidationTestID As DataColumn
        
        Private columnRT As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest6")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PeakAreaColumn As DataColumn
            Get
                Return Me.columnPeakArea
            End Get
        End Property
        
        Friend ReadOnly Property ValidationTestIDColumn As DataColumn
            Get
                Return Me.columnValidationTestID
            End Get
        End Property
        
        Friend ReadOnly Property RTColumn As DataColumn
            Get
                Return Me.columnRT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest6Row
            Get
                Return CType(Me.Rows(index),PQTest6Row)
            End Get
        End Property
        
        Public Event PQTest6RowChanged As PQTest6RowChangeEventHandler
        
        Public Event PQTest6RowChanging As PQTest6RowChangeEventHandler
        
        Public Event PQTest6RowDeleted As PQTest6RowChangeEventHandler
        
        Public Event PQTest6RowDeleting As PQTest6RowChangeEventHandler
        
        Public Overloads Sub AddPQTest6Row(ByVal row As PQTest6Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest6Row(ByVal PeakArea As Double, ByVal ValidationTestID As String, ByVal RT As Double) As PQTest6Row
            Dim rowPQTest6Row As PQTest6Row = CType(Me.NewRow,PQTest6Row)
            rowPQTest6Row.ItemArray = New Object() {PeakArea, ValidationTestID, RT}
            Me.Rows.Add(rowPQTest6Row)
            Return rowPQTest6Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest6DataTable = CType(MyBase.Clone,PQTest6DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest6DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPeakArea = Me.Columns("PeakArea")
            Me.columnValidationTestID = Me.Columns("ValidationTestID")
            Me.columnRT = Me.Columns("RT")
        End Sub
        
        Private Sub InitClass()
            Me.columnPeakArea = New DataColumn("PeakArea", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeakArea)
            Me.columnValidationTestID = New DataColumn("ValidationTestID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidationTestID)
            Me.columnRT = New DataColumn("RT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRT)
        End Sub
        
        Public Function NewPQTest6Row() As PQTest6Row
            Return CType(Me.NewRow,PQTest6Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest6Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest6Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest6RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest6RowChanged(Me, New PQTest6RowChangeEvent(CType(e.Row,PQTest6Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest6RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest6RowChanging(Me, New PQTest6RowChangeEvent(CType(e.Row,PQTest6Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest6RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest6RowDeleted(Me, New PQTest6RowChangeEvent(CType(e.Row,PQTest6Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest6RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest6RowDeleting(Me, New PQTest6RowChangeEvent(CType(e.Row,PQTest6Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest6Row(ByVal row As PQTest6Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest6Row
        Inherits DataRow
        
        Private tablePQTest6 As PQTest6DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest6 = CType(Me.Table,PQTest6DataTable)
        End Sub
        
        Public Property PeakArea As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest6.PeakAreaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest6.PeakAreaColumn) = value
            End Set
        End Property
        
        Public Property ValidationTestID As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest6.ValidationTestIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest6.ValidationTestIDColumn) = value
            End Set
        End Property
        
        Public Property RT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest6.RTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest6.RTColumn) = value
            End Set
        End Property
        
        Public Function IsPeakAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQTest6.PeakAreaColumn)
        End Function
        
        Public Sub SetPeakAreaNull()
            Me(Me.tablePQTest6.PeakAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidationTestIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest6.ValidationTestIDColumn)
        End Function
        
        Public Sub SetValidationTestIDNull()
            Me(Me.tablePQTest6.ValidationTestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRTNull() As Boolean
            Return Me.IsNull(Me.tablePQTest6.RTColumn)
        End Function
        
        Public Sub SetRTNull()
            Me(Me.tablePQTest6.RTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest6RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest6Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest6Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest6Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest7DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPeakArea As DataColumn
        
        Private columnValidationTestID As DataColumn
        
        Private columnRT As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest7")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PeakAreaColumn As DataColumn
            Get
                Return Me.columnPeakArea
            End Get
        End Property
        
        Friend ReadOnly Property ValidationTestIDColumn As DataColumn
            Get
                Return Me.columnValidationTestID
            End Get
        End Property
        
        Friend ReadOnly Property RTColumn As DataColumn
            Get
                Return Me.columnRT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest7Row
            Get
                Return CType(Me.Rows(index),PQTest7Row)
            End Get
        End Property
        
        Public Event PQTest7RowChanged As PQTest7RowChangeEventHandler
        
        Public Event PQTest7RowChanging As PQTest7RowChangeEventHandler
        
        Public Event PQTest7RowDeleted As PQTest7RowChangeEventHandler
        
        Public Event PQTest7RowDeleting As PQTest7RowChangeEventHandler
        
        Public Overloads Sub AddPQTest7Row(ByVal row As PQTest7Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest7Row(ByVal PeakArea As Double, ByVal ValidationTestID As String, ByVal RT As Double) As PQTest7Row
            Dim rowPQTest7Row As PQTest7Row = CType(Me.NewRow,PQTest7Row)
            rowPQTest7Row.ItemArray = New Object() {PeakArea, ValidationTestID, RT}
            Me.Rows.Add(rowPQTest7Row)
            Return rowPQTest7Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest7DataTable = CType(MyBase.Clone,PQTest7DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest7DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPeakArea = Me.Columns("PeakArea")
            Me.columnValidationTestID = Me.Columns("ValidationTestID")
            Me.columnRT = Me.Columns("RT")
        End Sub
        
        Private Sub InitClass()
            Me.columnPeakArea = New DataColumn("PeakArea", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeakArea)
            Me.columnValidationTestID = New DataColumn("ValidationTestID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidationTestID)
            Me.columnRT = New DataColumn("RT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRT)
        End Sub
        
        Public Function NewPQTest7Row() As PQTest7Row
            Return CType(Me.NewRow,PQTest7Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest7Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest7Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest7RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest7RowChanged(Me, New PQTest7RowChangeEvent(CType(e.Row,PQTest7Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest7RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest7RowChanging(Me, New PQTest7RowChangeEvent(CType(e.Row,PQTest7Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest7RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest7RowDeleted(Me, New PQTest7RowChangeEvent(CType(e.Row,PQTest7Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest7RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest7RowDeleting(Me, New PQTest7RowChangeEvent(CType(e.Row,PQTest7Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest7Row(ByVal row As PQTest7Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest7Row
        Inherits DataRow
        
        Private tablePQTest7 As PQTest7DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest7 = CType(Me.Table,PQTest7DataTable)
        End Sub
        
        Public Property PeakArea As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest7.PeakAreaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest7.PeakAreaColumn) = value
            End Set
        End Property
        
        Public Property ValidationTestID As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest7.ValidationTestIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest7.ValidationTestIDColumn) = value
            End Set
        End Property
        
        Public Property RT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest7.RTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest7.RTColumn) = value
            End Set
        End Property
        
        Public Function IsPeakAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQTest7.PeakAreaColumn)
        End Function
        
        Public Sub SetPeakAreaNull()
            Me(Me.tablePQTest7.PeakAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidationTestIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest7.ValidationTestIDColumn)
        End Function
        
        Public Sub SetValidationTestIDNull()
            Me(Me.tablePQTest7.ValidationTestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRTNull() As Boolean
            Return Me.IsNull(Me.tablePQTest7.RTColumn)
        End Function
        
        Public Sub SetRTNull()
            Me(Me.tablePQTest7.RTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest7RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest7Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest7Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest7Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest8DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPeakArea As DataColumn
        
        Private columnValidationTestID As DataColumn
        
        Private columnRT As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest8")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PeakAreaColumn As DataColumn
            Get
                Return Me.columnPeakArea
            End Get
        End Property
        
        Friend ReadOnly Property ValidationTestIDColumn As DataColumn
            Get
                Return Me.columnValidationTestID
            End Get
        End Property
        
        Friend ReadOnly Property RTColumn As DataColumn
            Get
                Return Me.columnRT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest8Row
            Get
                Return CType(Me.Rows(index),PQTest8Row)
            End Get
        End Property
        
        Public Event PQTest8RowChanged As PQTest8RowChangeEventHandler
        
        Public Event PQTest8RowChanging As PQTest8RowChangeEventHandler
        
        Public Event PQTest8RowDeleted As PQTest8RowChangeEventHandler
        
        Public Event PQTest8RowDeleting As PQTest8RowChangeEventHandler
        
        Public Overloads Sub AddPQTest8Row(ByVal row As PQTest8Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest8Row(ByVal PeakArea As Double, ByVal ValidationTestID As String, ByVal RT As Double) As PQTest8Row
            Dim rowPQTest8Row As PQTest8Row = CType(Me.NewRow,PQTest8Row)
            rowPQTest8Row.ItemArray = New Object() {PeakArea, ValidationTestID, RT}
            Me.Rows.Add(rowPQTest8Row)
            Return rowPQTest8Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest8DataTable = CType(MyBase.Clone,PQTest8DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest8DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPeakArea = Me.Columns("PeakArea")
            Me.columnValidationTestID = Me.Columns("ValidationTestID")
            Me.columnRT = Me.Columns("RT")
        End Sub
        
        Private Sub InitClass()
            Me.columnPeakArea = New DataColumn("PeakArea", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeakArea)
            Me.columnValidationTestID = New DataColumn("ValidationTestID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidationTestID)
            Me.columnRT = New DataColumn("RT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRT)
        End Sub
        
        Public Function NewPQTest8Row() As PQTest8Row
            Return CType(Me.NewRow,PQTest8Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest8Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest8Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest8RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest8RowChanged(Me, New PQTest8RowChangeEvent(CType(e.Row,PQTest8Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest8RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest8RowChanging(Me, New PQTest8RowChangeEvent(CType(e.Row,PQTest8Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest8RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest8RowDeleted(Me, New PQTest8RowChangeEvent(CType(e.Row,PQTest8Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest8RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest8RowDeleting(Me, New PQTest8RowChangeEvent(CType(e.Row,PQTest8Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest8Row(ByVal row As PQTest8Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest8Row
        Inherits DataRow
        
        Private tablePQTest8 As PQTest8DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest8 = CType(Me.Table,PQTest8DataTable)
        End Sub
        
        Public Property PeakArea As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest8.PeakAreaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest8.PeakAreaColumn) = value
            End Set
        End Property
        
        Public Property ValidationTestID As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest8.ValidationTestIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest8.ValidationTestIDColumn) = value
            End Set
        End Property
        
        Public Property RT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest8.RTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest8.RTColumn) = value
            End Set
        End Property
        
        Public Function IsPeakAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQTest8.PeakAreaColumn)
        End Function
        
        Public Sub SetPeakAreaNull()
            Me(Me.tablePQTest8.PeakAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidationTestIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest8.ValidationTestIDColumn)
        End Function
        
        Public Sub SetValidationTestIDNull()
            Me(Me.tablePQTest8.ValidationTestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRTNull() As Boolean
            Return Me.IsNull(Me.tablePQTest8.RTColumn)
        End Function
        
        Public Sub SetRTNull()
            Me(Me.tablePQTest8.RTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest8RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest8Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest8Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest8Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest9DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPeakArea As DataColumn
        
        Private columnValidationTestID As DataColumn
        
        Private columnRT As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest9")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PeakAreaColumn As DataColumn
            Get
                Return Me.columnPeakArea
            End Get
        End Property
        
        Friend ReadOnly Property ValidationTestIDColumn As DataColumn
            Get
                Return Me.columnValidationTestID
            End Get
        End Property
        
        Friend ReadOnly Property RTColumn As DataColumn
            Get
                Return Me.columnRT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest9Row
            Get
                Return CType(Me.Rows(index),PQTest9Row)
            End Get
        End Property
        
        Public Event PQTest9RowChanged As PQTest9RowChangeEventHandler
        
        Public Event PQTest9RowChanging As PQTest9RowChangeEventHandler
        
        Public Event PQTest9RowDeleted As PQTest9RowChangeEventHandler
        
        Public Event PQTest9RowDeleting As PQTest9RowChangeEventHandler
        
        Public Overloads Sub AddPQTest9Row(ByVal row As PQTest9Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest9Row(ByVal PeakArea As Double, ByVal ValidationTestID As String, ByVal RT As Double) As PQTest9Row
            Dim rowPQTest9Row As PQTest9Row = CType(Me.NewRow,PQTest9Row)
            rowPQTest9Row.ItemArray = New Object() {PeakArea, ValidationTestID, RT}
            Me.Rows.Add(rowPQTest9Row)
            Return rowPQTest9Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest9DataTable = CType(MyBase.Clone,PQTest9DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest9DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPeakArea = Me.Columns("PeakArea")
            Me.columnValidationTestID = Me.Columns("ValidationTestID")
            Me.columnRT = Me.Columns("RT")
        End Sub
        
        Private Sub InitClass()
            Me.columnPeakArea = New DataColumn("PeakArea", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeakArea)
            Me.columnValidationTestID = New DataColumn("ValidationTestID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidationTestID)
            Me.columnRT = New DataColumn("RT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRT)
        End Sub
        
        Public Function NewPQTest9Row() As PQTest9Row
            Return CType(Me.NewRow,PQTest9Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest9Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest9Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest9RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest9RowChanged(Me, New PQTest9RowChangeEvent(CType(e.Row,PQTest9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest9RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest9RowChanging(Me, New PQTest9RowChangeEvent(CType(e.Row,PQTest9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest9RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest9RowDeleted(Me, New PQTest9RowChangeEvent(CType(e.Row,PQTest9Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest9RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest9RowDeleting(Me, New PQTest9RowChangeEvent(CType(e.Row,PQTest9Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest9Row(ByVal row As PQTest9Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest9Row
        Inherits DataRow
        
        Private tablePQTest9 As PQTest9DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest9 = CType(Me.Table,PQTest9DataTable)
        End Sub
        
        Public Property PeakArea As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest9.PeakAreaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest9.PeakAreaColumn) = value
            End Set
        End Property
        
        Public Property ValidationTestID As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest9.ValidationTestIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest9.ValidationTestIDColumn) = value
            End Set
        End Property
        
        Public Property RT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest9.RTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest9.RTColumn) = value
            End Set
        End Property
        
        Public Function IsPeakAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQTest9.PeakAreaColumn)
        End Function
        
        Public Sub SetPeakAreaNull()
            Me(Me.tablePQTest9.PeakAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidationTestIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest9.ValidationTestIDColumn)
        End Function
        
        Public Sub SetValidationTestIDNull()
            Me(Me.tablePQTest9.ValidationTestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRTNull() As Boolean
            Return Me.IsNull(Me.tablePQTest9.RTColumn)
        End Function
        
        Public Sub SetRTNull()
            Me(Me.tablePQTest9.RTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest9RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest9Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest9Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest9Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest10DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPeakArea As DataColumn
        
        Private columnValidationTestID As DataColumn
        
        Private columnRT As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest10")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PeakAreaColumn As DataColumn
            Get
                Return Me.columnPeakArea
            End Get
        End Property
        
        Friend ReadOnly Property ValidationTestIDColumn As DataColumn
            Get
                Return Me.columnValidationTestID
            End Get
        End Property
        
        Friend ReadOnly Property RTColumn As DataColumn
            Get
                Return Me.columnRT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest10Row
            Get
                Return CType(Me.Rows(index),PQTest10Row)
            End Get
        End Property
        
        Public Event PQTest10RowChanged As PQTest10RowChangeEventHandler
        
        Public Event PQTest10RowChanging As PQTest10RowChangeEventHandler
        
        Public Event PQTest10RowDeleted As PQTest10RowChangeEventHandler
        
        Public Event PQTest10RowDeleting As PQTest10RowChangeEventHandler
        
        Public Overloads Sub AddPQTest10Row(ByVal row As PQTest10Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest10Row(ByVal PeakArea As Double, ByVal ValidationTestID As String, ByVal RT As Double) As PQTest10Row
            Dim rowPQTest10Row As PQTest10Row = CType(Me.NewRow,PQTest10Row)
            rowPQTest10Row.ItemArray = New Object() {PeakArea, ValidationTestID, RT}
            Me.Rows.Add(rowPQTest10Row)
            Return rowPQTest10Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest10DataTable = CType(MyBase.Clone,PQTest10DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest10DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPeakArea = Me.Columns("PeakArea")
            Me.columnValidationTestID = Me.Columns("ValidationTestID")
            Me.columnRT = Me.Columns("RT")
        End Sub
        
        Private Sub InitClass()
            Me.columnPeakArea = New DataColumn("PeakArea", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeakArea)
            Me.columnValidationTestID = New DataColumn("ValidationTestID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidationTestID)
            Me.columnRT = New DataColumn("RT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRT)
        End Sub
        
        Public Function NewPQTest10Row() As PQTest10Row
            Return CType(Me.NewRow,PQTest10Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest10Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest10Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest10RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest10RowChanged(Me, New PQTest10RowChangeEvent(CType(e.Row,PQTest10Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest10RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest10RowChanging(Me, New PQTest10RowChangeEvent(CType(e.Row,PQTest10Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest10RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest10RowDeleted(Me, New PQTest10RowChangeEvent(CType(e.Row,PQTest10Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest10RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest10RowDeleting(Me, New PQTest10RowChangeEvent(CType(e.Row,PQTest10Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest10Row(ByVal row As PQTest10Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest10Row
        Inherits DataRow
        
        Private tablePQTest10 As PQTest10DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest10 = CType(Me.Table,PQTest10DataTable)
        End Sub
        
        Public Property PeakArea As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest10.PeakAreaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest10.PeakAreaColumn) = value
            End Set
        End Property
        
        Public Property ValidationTestID As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest10.ValidationTestIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest10.ValidationTestIDColumn) = value
            End Set
        End Property
        
        Public Property RT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePQTest10.RTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest10.RTColumn) = value
            End Set
        End Property
        
        Public Function IsPeakAreaNull() As Boolean
            Return Me.IsNull(Me.tablePQTest10.PeakAreaColumn)
        End Function
        
        Public Sub SetPeakAreaNull()
            Me(Me.tablePQTest10.PeakAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidationTestIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest10.ValidationTestIDColumn)
        End Function
        
        Public Sub SetValidationTestIDNull()
            Me(Me.tablePQTest10.ValidationTestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRTNull() As Boolean
            Return Me.IsNull(Me.tablePQTest10.RTColumn)
        End Function
        
        Public Sub SetRTNull()
            Me(Me.tablePQTest10.RTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest10RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest10Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest10Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest10Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest11DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTest1ID As DataColumn
        
        Private columnSampleID As DataColumn
        
        Private columnLampCurrent As DataColumn
        
        Private columnPMTVoltage As DataColumn
        
        Private columnWaveLength As DataColumn
        
        Private columnSlitWidth As DataColumn
        
        Private columnBurnerHeight As DataColumn
        
        Private columnFuel As DataColumn
        
        Private columnAbsorbance As DataColumn
        
        Private columnRemark As DataColumn
        
        Private column_Date As DataColumn
        
        Friend Sub New()
            MyBase.New("PQTest11")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Test1IDColumn As DataColumn
            Get
                Return Me.columnTest1ID
            End Get
        End Property
        
        Friend ReadOnly Property SampleIDColumn As DataColumn
            Get
                Return Me.columnSampleID
            End Get
        End Property
        
        Friend ReadOnly Property LampCurrentColumn As DataColumn
            Get
                Return Me.columnLampCurrent
            End Get
        End Property
        
        Friend ReadOnly Property PMTVoltageColumn As DataColumn
            Get
                Return Me.columnPMTVoltage
            End Get
        End Property
        
        Friend ReadOnly Property WaveLengthColumn As DataColumn
            Get
                Return Me.columnWaveLength
            End Get
        End Property
        
        Friend ReadOnly Property SlitWidthColumn As DataColumn
            Get
                Return Me.columnSlitWidth
            End Get
        End Property
        
        Friend ReadOnly Property BurnerHeightColumn As DataColumn
            Get
                Return Me.columnBurnerHeight
            End Get
        End Property
        
        Friend ReadOnly Property FuelColumn As DataColumn
            Get
                Return Me.columnFuel
            End Get
        End Property
        
        Friend ReadOnly Property AbsorbanceColumn As DataColumn
            Get
                Return Me.columnAbsorbance
            End Get
        End Property
        
        Friend ReadOnly Property RemarkColumn As DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        Friend ReadOnly Property _DateColumn As DataColumn
            Get
                Return Me.column_Date
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PQTest11Row
            Get
                Return CType(Me.Rows(index),PQTest11Row)
            End Get
        End Property
        
        Public Event PQTest11RowChanged As PQTest11RowChangeEventHandler
        
        Public Event PQTest11RowChanging As PQTest11RowChangeEventHandler
        
        Public Event PQTest11RowDeleted As PQTest11RowChangeEventHandler
        
        Public Event PQTest11RowDeleting As PQTest11RowChangeEventHandler
        
        Public Overloads Sub AddPQTest11Row(ByVal row As PQTest11Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPQTest11Row(ByVal Test1ID As Long, ByVal SampleID As Long, ByVal LampCurrent As String, ByVal PMTVoltage As String, ByVal WaveLength As String, ByVal SlitWidth As String, ByVal BurnerHeight As String, ByVal Fuel As String, ByVal Absorbance As String, ByVal Remark As String, ByVal _Date As String) As PQTest11Row
            Dim rowPQTest11Row As PQTest11Row = CType(Me.NewRow,PQTest11Row)
            rowPQTest11Row.ItemArray = New Object() {Test1ID, SampleID, LampCurrent, PMTVoltage, WaveLength, SlitWidth, BurnerHeight, Fuel, Absorbance, Remark, _Date}
            Me.Rows.Add(rowPQTest11Row)
            Return rowPQTest11Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PQTest11DataTable = CType(MyBase.Clone,PQTest11DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PQTest11DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTest1ID = Me.Columns("Test1ID")
            Me.columnSampleID = Me.Columns("SampleID")
            Me.columnLampCurrent = Me.Columns("LampCurrent")
            Me.columnPMTVoltage = Me.Columns("PMTVoltage")
            Me.columnWaveLength = Me.Columns("WaveLength")
            Me.columnSlitWidth = Me.Columns("SlitWidth")
            Me.columnBurnerHeight = Me.Columns("BurnerHeight")
            Me.columnFuel = Me.Columns("Fuel")
            Me.columnAbsorbance = Me.Columns("Absorbance")
            Me.columnRemark = Me.Columns("Remark")
            Me.column_Date = Me.Columns("Date")
        End Sub
        
        Private Sub InitClass()
            Me.columnTest1ID = New DataColumn("Test1ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTest1ID)
            Me.columnSampleID = New DataColumn("SampleID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSampleID)
            Me.columnLampCurrent = New DataColumn("LampCurrent", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLampCurrent)
            Me.columnPMTVoltage = New DataColumn("PMTVoltage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPMTVoltage)
            Me.columnWaveLength = New DataColumn("WaveLength", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWaveLength)
            Me.columnSlitWidth = New DataColumn("SlitWidth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSlitWidth)
            Me.columnBurnerHeight = New DataColumn("BurnerHeight", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBurnerHeight)
            Me.columnFuel = New DataColumn("Fuel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFuel)
            Me.columnAbsorbance = New DataColumn("Absorbance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbsorbance)
            Me.columnRemark = New DataColumn("Remark", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRemark)
            Me.column_Date = New DataColumn("Date", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Date)
        End Sub
        
        Public Function NewPQTest11Row() As PQTest11Row
            Return CType(Me.NewRow,PQTest11Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PQTest11Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PQTest11Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PQTest11RowChangedEvent) Is Nothing) Then
                RaiseEvent PQTest11RowChanged(Me, New PQTest11RowChangeEvent(CType(e.Row,PQTest11Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PQTest11RowChangingEvent) Is Nothing) Then
                RaiseEvent PQTest11RowChanging(Me, New PQTest11RowChangeEvent(CType(e.Row,PQTest11Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PQTest11RowDeletedEvent) Is Nothing) Then
                RaiseEvent PQTest11RowDeleted(Me, New PQTest11RowChangeEvent(CType(e.Row,PQTest11Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PQTest11RowDeletingEvent) Is Nothing) Then
                RaiseEvent PQTest11RowDeleting(Me, New PQTest11RowChangeEvent(CType(e.Row,PQTest11Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePQTest11Row(ByVal row As PQTest11Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest11Row
        Inherits DataRow
        
        Private tablePQTest11 As PQTest11DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePQTest11 = CType(Me.Table,PQTest11DataTable)
        End Sub
        
        Public Property Test1ID As Long
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.Test1IDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.Test1IDColumn) = value
            End Set
        End Property
        
        Public Property SampleID As Long
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.SampleIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.SampleIDColumn) = value
            End Set
        End Property
        
        Public Property LampCurrent As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.LampCurrentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.LampCurrentColumn) = value
            End Set
        End Property
        
        Public Property PMTVoltage As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.PMTVoltageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.PMTVoltageColumn) = value
            End Set
        End Property
        
        Public Property WaveLength As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.WaveLengthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.WaveLengthColumn) = value
            End Set
        End Property
        
        Public Property SlitWidth As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.SlitWidthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.SlitWidthColumn) = value
            End Set
        End Property
        
        Public Property BurnerHeight As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.BurnerHeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.BurnerHeightColumn) = value
            End Set
        End Property
        
        Public Property Fuel As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.FuelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.FuelColumn) = value
            End Set
        End Property
        
        Public Property Absorbance As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.AbsorbanceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.AbsorbanceColumn) = value
            End Set
        End Property
        
        Public Property Remark As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11.RemarkColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11.RemarkColumn) = value
            End Set
        End Property
        
        Public Property _Date As String
            Get
                Try 
                    Return CType(Me(Me.tablePQTest11._DateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePQTest11._DateColumn) = value
            End Set
        End Property
        
        Public Function IsTest1IDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.Test1IDColumn)
        End Function
        
        Public Sub SetTest1IDNull()
            Me(Me.tablePQTest11.Test1IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSampleIDNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.SampleIDColumn)
        End Function
        
        Public Sub SetSampleIDNull()
            Me(Me.tablePQTest11.SampleIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLampCurrentNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.LampCurrentColumn)
        End Function
        
        Public Sub SetLampCurrentNull()
            Me(Me.tablePQTest11.LampCurrentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPMTVoltageNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.PMTVoltageColumn)
        End Function
        
        Public Sub SetPMTVoltageNull()
            Me(Me.tablePQTest11.PMTVoltageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWaveLengthNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.WaveLengthColumn)
        End Function
        
        Public Sub SetWaveLengthNull()
            Me(Me.tablePQTest11.WaveLengthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSlitWidthNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.SlitWidthColumn)
        End Function
        
        Public Sub SetSlitWidthNull()
            Me(Me.tablePQTest11.SlitWidthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBurnerHeightNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.BurnerHeightColumn)
        End Function
        
        Public Sub SetBurnerHeightNull()
            Me(Me.tablePQTest11.BurnerHeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFuelNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.FuelColumn)
        End Function
        
        Public Sub SetFuelNull()
            Me(Me.tablePQTest11.FuelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbsorbanceNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.AbsorbanceColumn)
        End Function
        
        Public Sub SetAbsorbanceNull()
            Me(Me.tablePQTest11.AbsorbanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11.RemarkColumn)
        End Function
        
        Public Sub SetRemarkNull()
            Me(Me.tablePQTest11.RemarkColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tablePQTest11._DateColumn)
        End Function
        
        Public Sub Set_DateNull()
            Me(Me.tablePQTest11._DateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PQTest11RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PQTest11Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PQTest11Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PQTest11Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
