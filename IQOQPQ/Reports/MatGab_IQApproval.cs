//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------


 // ERROR: Not supported in C#: OptionDeclaration
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.ReportSource;
using CrystalDecisions.Shared;
using System;
using System.ComponentModel;


public class IQApproval : ReportClass
{

	public IQApproval()
	{
		base.New();
	}

	public override string ResourceName {
		get { return "IQApproval.rpt"; }
			//Do nothing
		set { }
	}

	[Browsable(false), DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
	public CrystalDecisions.CrystalReports.Engine.Section Section1 {
		get { return this.ReportDefinition.Sections(0); }
	}

	[Browsable(false), DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
	public CrystalDecisions.CrystalReports.Engine.Section Section6 {
		get { return this.ReportDefinition.Sections(1); }
	}

	[Browsable(false), DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
	public CrystalDecisions.CrystalReports.Engine.Section Section2 {
		get { return this.ReportDefinition.Sections(2); }
	}

	[Browsable(false), DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
	public CrystalDecisions.CrystalReports.Engine.Section Section3 {
		get { return this.ReportDefinition.Sections(3); }
	}

	[Browsable(false), DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
	public CrystalDecisions.CrystalReports.Engine.Section Section4 {
		get { return this.ReportDefinition.Sections(4); }
	}

	[Browsable(false), DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
	public CrystalDecisions.CrystalReports.Engine.Section Section5 {
		get { return this.ReportDefinition.Sections(5); }
	}
}

[System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
public class CachedIQApproval : Component, ICachedReport
{

	public CachedIQApproval()
	{
		base.New();
	}

	public virtual bool CrystalDecisions.ReportSource.ICachedReport.IsCacheable {
		get { return true; }
			//
		set { }
	}

	public virtual bool CrystalDecisions.ReportSource.ICachedReport.ShareDBLogonInfo {
		get { return false; }
			//
		set { }
	}

	public virtual System.TimeSpan CrystalDecisions.ReportSource.ICachedReport.CacheTimeOut {
		get { return CachedReportConstants.DEFAULT_TIMEOUT; }
			//
		set { }
	}

	public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CrystalDecisions.ReportSource.ICachedReport.CreateReport()
	{
		IQApproval rpt = new IQApproval();
		rpt.Site = this.Site;
		return rpt;
	}

	public virtual string CrystalDecisions.ReportSource.ICachedReport.GetCustomizedCacheKey(RequestContext request)
	{
		String key = null;
		//// The following is the code used to generate the default
		//// cache key for caching report jobs in the ASP.NET Cache.
		//// Feel free to modify this code to suit your needs.
		//// Returning key == null causes the default cache key to
		//// be generated.
		//
		//key = RequestContext.BuildCompleteCacheKey(
		//    request,
		//    null,       // sReportFilename
		//    this.GetType(),
		//    this.ShareDBLogonInfo );
		return key;
	}
}
